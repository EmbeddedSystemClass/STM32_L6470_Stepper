
STM32_L6470.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000547c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000304  20000000  08005ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  20000304  08005db8  00020304  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000618  08005db8  00020618  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016859  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000291b  00000000  00000000  00036b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ba8  00000000  00000000  000394a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab0  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005828  00000000  00000000  0003ab00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003bb9  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00043ee1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000300c  00000000  00000000  00043f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000304 	.word	0x20000304
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080055f8 	.word	0x080055f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000308 	.word	0x20000308
 80001d0:	080055f8 	.word	0x080055f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f947 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f808 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f004 fbfa 	bl	8004d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f95f 	bl	800080a <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000564:	f000 f927 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000a0 	.word	0x200000a0
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000370 	.word	0x20000370

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000370 	.word	0x20000370

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff ffee 	bl	80005b0 <HAL_GetTick>
 80005d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005e0:	d005      	beq.n	80005ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_Delay+0x40>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ee:	bf00      	nop
 80005f0:	f7ff ffde 	bl	80005b0 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1ad2      	subs	r2, r2, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d3f7      	bcc.n	80005f0 <HAL_Delay+0x28>
  {
  }
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000004 	.word	0x20000004

0800060c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800067a:	4909      	ldr	r1, [pc, #36]	; (80006a0 <NVIC_EnableIRQ+0x30>)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	095b      	lsrs	r3, r3, #5
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	f002 021f 	and.w	r2, r2, #31
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	da0b      	bge.n	80006d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	490d      	ldr	r1, [pc, #52]	; (80006f0 <NVIC_SetPriority+0x4c>)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 030f 	and.w	r3, r3, #15
 80006c0:	3b04      	subs	r3, #4
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ce:	e009      	b.n	80006e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	4908      	ldr	r1, [pc, #32]	; (80006f4 <NVIC_SetPriority+0x50>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	2201      	movs	r2, #1
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	401a      	ands	r2, r3
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073e:	2101      	movs	r1, #1
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	1e59      	subs	r1, r3, #1
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000780:	f7ff ff90 	bl	80006a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff2f 	bl	800060c <NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff44 	bl	8000654 <NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff90 	bl	80006f8 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5f 	bl	80006a4 <NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff37 	bl	8000670 <NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b04      	cmp	r3, #4
 8000830:	d106      	bne.n	8000840 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800083e:	e005      	b.n	800084c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f023 0304 	bic.w	r3, r3, #4
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000860:	f003 ff4e 	bl	8004700 <HAL_SYSTICK_Callback>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff fe9c 	bl	80005b0 <HAL_GetTick>
 8000878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	e099      	b.n	80009b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2202      	movs	r2, #2
 8000890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	f022 0201 	bic.w	r2, r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008a4:	e00f      	b.n	80008c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008a6:	f7ff fe83 	bl	80005b0 <HAL_GetTick>
 80008aa:	4602      	mov	r2, r0
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	d908      	bls.n	80008c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2220      	movs	r2, #32
 80008b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2203      	movs	r2, #3
 80008be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e078      	b.n	80009b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1e8      	bne.n	80008a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <HAL_DMA_Init+0x158>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800090a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091c:	2b04      	cmp	r3, #4
 800091e:	d107      	bne.n	8000930 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4313      	orrs	r3, r2
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4313      	orrs	r3, r2
 800092e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f023 0307 	bic.w	r3, r3, #7
 8000946:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	4313      	orrs	r3, r2
 8000950:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000956:	2b04      	cmp	r3, #4
 8000958:	d117      	bne.n	800098a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	4313      	orrs	r3, r2
 8000962:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00e      	beq.n	800098a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa99 	bl	8000ea4 <DMA_CheckFifoParam>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000986:	2301      	movs	r3, #1
 8000988:	e016      	b.n	80009b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 fa50 	bl	8000e38 <DMA_CalcBaseAndBitshift>
 8000998:	4603      	mov	r3, r0
 800099a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a0:	223f      	movs	r2, #63	; 0x3f
 80009a2:	409a      	lsls	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	f010803f 	.word	0xf010803f

080009c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d101      	bne.n	80009ea <HAL_DMA_Start_IT+0x26>
 80009e6:	2302      	movs	r3, #2
 80009e8:	e048      	b.n	8000a7c <HAL_DMA_Start_IT+0xb8>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d137      	bne.n	8000a6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2202      	movs	r2, #2
 8000a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f9e2 	bl	8000ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a1c:	223f      	movs	r2, #63	; 0x3f
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	6812      	ldr	r2, [r2, #0]
 8000a2e:	f042 0216 	orr.w	r2, r2, #22
 8000a32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	6952      	ldr	r2, [r2, #20]
 8000a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	f042 0208 	orr.w	r2, r2, #8
 8000a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	f042 0201 	orr.w	r2, r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e005      	b.n	8000a7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a76:	2302      	movs	r3, #2
 8000a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d004      	beq.n	8000aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00c      	b.n	8000abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	f022 0201 	bic.w	r2, r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ad4:	4b92      	ldr	r3, [pc, #584]	; (8000d20 <HAL_DMA_IRQHandler+0x258>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x25c>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0a9b      	lsrs	r3, r3, #10
 8000ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af2:	2208      	movs	r2, #8
 8000af4:	409a      	lsls	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01a      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6812      	ldr	r2, [r2, #0]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	f022 0204 	bic.w	r2, r2, #4
 8000b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b20:	2208      	movs	r2, #8
 8000b22:	409a      	lsls	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b2c:	f043 0201 	orr.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b38:	2201      	movs	r2, #1
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00b      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b62:	f043 0202 	orr.w	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6e:	2204      	movs	r2, #4
 8000b70:	409a      	lsls	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d012      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b98:	f043 0204 	orr.w	r2, r3, #4
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d043      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d03c      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d018      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d108      	bne.n	8000bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d024      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	4798      	blx	r3
 8000bf6:	e01f      	b.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01b      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	4798      	blx	r3
 8000c08:	e016      	b.n	8000c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d107      	bne.n	8000c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	f022 0208 	bic.w	r2, r2, #8
 8000c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 808e 	beq.w	8000d66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 8086 	beq.w	8000d66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5e:	2220      	movs	r2, #32
 8000c60:	409a      	lsls	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	d136      	bne.n	8000ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	f022 0216 	bic.w	r2, r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	6952      	ldr	r2, [r2, #20]
 8000c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <HAL_DMA_IRQHandler+0x1da>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	f022 0208 	bic.w	r2, r2, #8
 8000cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb6:	223f      	movs	r2, #63	; 0x3f
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d07d      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
        }
        return;
 8000cde:	e078      	b.n	8000dd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01c      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d108      	bne.n	8000d0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d030      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	4798      	blx	r3
 8000d0c:	e02b      	b.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d027      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
 8000d1e:	e022      	b.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
 8000d20:	200000a0 	.word	0x200000a0
 8000d24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	f022 0210 	bic.w	r2, r2, #16
 8000d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d032      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d022      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d807      	bhi.n	8000dae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f2      	bne.n	8000d92 <HAL_DMA_IRQHandler+0x2ca>
 8000dac:	e000      	b.n	8000db0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000dae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
 8000dd0:	e000      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd2:	bf00      	nop
    }
  }
}
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop

08000ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d108      	bne.n	8000e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e1a:	e007      	b.n	8000e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3b10      	subs	r3, #16
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <DMA_CalcBaseAndBitshift+0x64>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d909      	bls.n	8000e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	1d1a      	adds	r2, r3, #4
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	659a      	str	r2, [r3, #88]	; 0x58
 8000e78:	e007      	b.n	8000e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ea0:	08005658 	.word	0x08005658

08000ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11f      	bne.n	8000efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d855      	bhi.n	8000f70 <DMA_CheckFifoParam+0xcc>
 8000ec4:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <DMA_CheckFifoParam+0x28>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000eef 	.word	0x08000eef
 8000ed4:	08000edd 	.word	0x08000edd
 8000ed8:	08000f71 	.word	0x08000f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d045      	beq.n	8000f74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eec:	e042      	b.n	8000f74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ef6:	d13f      	bne.n	8000f78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000efc:	e03c      	b.n	8000f78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f06:	d121      	bne.n	8000f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d836      	bhi.n	8000f7c <DMA_CheckFifoParam+0xd8>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <DMA_CheckFifoParam+0x70>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f2b 	.word	0x08000f2b
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	08000f3d 	.word	0x08000f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
      break;
 8000f28:	e02f      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d024      	beq.n	8000f80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f3a:	e021      	b.n	8000f80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f44:	d11e      	bne.n	8000f84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f4a:	e01b      	b.n	8000f84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d902      	bls.n	8000f58 <DMA_CheckFifoParam+0xb4>
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d003      	beq.n	8000f5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f56:	e018      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f5c:	e015      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00e      	beq.n	8000f88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f6e:	e00b      	b.n	8000f88 <DMA_CheckFifoParam+0xe4>
      break;
 8000f70:	bf00      	nop
 8000f72:	e00a      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;   
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f88:	bf00      	nop
    }
  } 
  
  return status; 
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e159      	b.n	8001268 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 8148 	bne.w	8001262 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x4a>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	69b9      	ldr	r1, [r7, #24]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d00b      	beq.n	800107e <HAL_GPIO_Init+0xe6>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001072:	2b11      	cmp	r3, #17
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d130      	bne.n	80010e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 0201 	and.w	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a2 	beq.w	8001262 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4a56      	ldr	r2, [pc, #344]	; (800127c <HAL_GPIO_Init+0x2e4>)
 8001124:	4b55      	ldr	r3, [pc, #340]	; (800127c <HAL_GPIO_Init+0x2e4>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_GPIO_Init+0x2e4>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a51      	ldr	r2, [pc, #324]	; (8001280 <HAL_GPIO_Init+0x2e8>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <HAL_GPIO_Init+0x2ec>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x202>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	; (8001288 <HAL_GPIO_Init+0x2f0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x1fe>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	; (800128c <HAL_GPIO_Init+0x2f4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x1fa>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a45      	ldr	r2, [pc, #276]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x1f6>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a44      	ldr	r2, [pc, #272]	; (8001294 <HAL_GPIO_Init+0x2fc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x1f2>
 8001186:	2304      	movs	r3, #4
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x204>
 800118a:	2307      	movs	r3, #7
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x204>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x204>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x204>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x204>
 800119a:	2300      	movs	r3, #0
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ac:	4934      	ldr	r1, [pc, #208]	; (8001280 <HAL_GPIO_Init+0x2e8>)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_GPIO_Init+0x300>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011de:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <HAL_GPIO_Init+0x300>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_GPIO_Init+0x300>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_GPIO_Init+0x300>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_GPIO_Init+0x300>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_GPIO_Init+0x300>)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_GPIO_Init+0x300>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_GPIO_Init+0x300>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	f67f aea2 	bls.w	8000fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001270:	bf00      	nop
 8001272:	3724      	adds	r7, #36	; 0x24
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fb62 	bl	80049e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e22d      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	4ba3      	ldr	r3, [pc, #652]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b04      	cmp	r3, #4
 8001358:	d00c      	beq.n	8001374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135a:	4ba0      	ldr	r3, [pc, #640]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d112      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b9d      	ldr	r3, [pc, #628]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b99      	ldr	r3, [pc, #612]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d05b      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d157      	bne.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e208      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x74>
 8001396:	4a91      	ldr	r2, [pc, #580]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001398:	4b90      	ldr	r3, [pc, #576]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4a8b      	ldr	r2, [pc, #556]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	4b8a      	ldr	r3, [pc, #552]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4a88      	ldr	r2, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	4b87      	ldr	r3, [pc, #540]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013c8:	4a84      	ldr	r2, [pc, #528]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	4b84      	ldr	r3, [pc, #528]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4a81      	ldr	r2, [pc, #516]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff f8e2 	bl	80005b0 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff f8de 	bl	80005b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e1cd      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff f8ce 	bl	80005b0 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff f8ca 	bl	80005b0 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1b9      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001452:	4b62      	ldr	r3, [pc, #392]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e18d      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4956      	ldr	r1, [pc, #344]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001484:	4b55      	ldr	r3, [pc, #340]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <HAL_RCC_OscConfig+0x2b0>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff f883 	bl	80005b0 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff f87f 	bl	80005b0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e16e      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4943      	ldr	r1, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_RCC_OscConfig+0x2b0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff f862 	bl	80005b0 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff f85e 	bl	80005b0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e14d      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d030      	beq.n	800157c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d016      	beq.n	8001550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_RCC_OscConfig+0x2b4>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff f842 	bl	80005b0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff f83e 	bl	80005b0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e12d      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x200>
 800154e:	e015      	b.n	800157c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_RCC_OscConfig+0x2b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff f82b 	bl	80005b0 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff f827 	bl	80005b0 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e116      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a0 	beq.w	80016ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x2b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d121      	bne.n	800160a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_RCC_OscConfig+0x2b8>)
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_RCC_OscConfig+0x2b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7fe ffed 	bl	80005b0 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	e011      	b.n	80015fe <HAL_RCC_OscConfig+0x2ce>
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
 80015e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ec:	f7fe ffe0 	bl	80005b0 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0cf      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x2f0>
 8001612:	4a66      	ldr	r2, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x32a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x312>
 8001628:	4a60      	ldr	r2, [pc, #384]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 800162a:	4b60      	ldr	r3, [pc, #384]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	4a5d      	ldr	r2, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x32a>
 8001642:	4a5a      	ldr	r2, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001650:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7fe ffa5 	bl	80005b0 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7fe ffa1 	bl	80005b0 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e08e      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x33a>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7fe ff8f 	bl	80005b0 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7fe ff8b 	bl	80005b0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e078      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80016c0:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d064      	beq.n	800179c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d05c      	beq.n	8001798 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d141      	bne.n	800176a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <HAL_RCC_OscConfig+0x480>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7fe ff60 	bl	80005b0 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7fe ff5c 	bl	80005b0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e04b      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001712:	4926      	ldr	r1, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	019b      	lsls	r3, r3, #6
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	3b01      	subs	r3, #1
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	061b      	lsls	r3, r3, #24
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_RCC_OscConfig+0x480>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7fe ff35 	bl	80005b0 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7fe ff31 	bl	80005b0 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e020      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x41a>
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_RCC_OscConfig+0x480>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7fe ff1e 	bl	80005b0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7fe ff1a 	bl	80005b0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e009      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x448>
 8001796:	e001      	b.n	800179c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470060 	.word	0x42470060

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0ca      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_ClockConfig+0x1b4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 020f 	and.w	r2, r3, #15
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b64      	ldr	r3, [pc, #400]	; (8001968 <HAL_RCC_ClockConfig+0x1b4>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_ClockConfig+0x1b4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 020f 	and.w	r2, r3, #15
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b6      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	4b58      	ldr	r3, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	4b52      	ldr	r3, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	494f      	ldr	r1, [pc, #316]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	4b4f      	ldr	r3, [pc, #316]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07d      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06d      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e065      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4936      	ldr	r1, [pc, #216]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 0203 	bic.w	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7fe fe84 	bl	80005b0 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7fe fe80 	bl	80005b0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04d      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_ClockConfig+0x1b4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 020f 	and.w	r2, r3, #15
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_ClockConfig+0x1b4>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_ClockConfig+0x1b4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 020f 	and.w	r2, r3, #15
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e030      	b.n	800195e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4918      	ldr	r1, [pc, #96]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4911      	ldr	r1, [pc, #68]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f81d 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 800193e:	4601      	mov	r1, r0
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	fa21 f303 	lsr.w	r3, r1, r3
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001956:	2000      	movs	r0, #0
 8001958:	f7fe fde6 	bl	8000528 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08005980 	.word	0x08005980
 8001974:	200000a0 	.word	0x200000a0

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197c:	b08f      	sub	sp, #60	; 0x3c
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b04      	cmp	r3, #4
 800199a:	d007      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 800199c:	2b08      	cmp	r3, #8
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 80b2 	bne.w	8001b0a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80019aa:	e0b1      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019b0:	e0ae      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019bc:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d04e      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	f04f 0400 	mov.w	r4, #0
 80019d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	ea01 0103 	and.w	r1, r1, r3
 80019de:	ea02 0204 	and.w	r2, r2, r4
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	0160      	lsls	r0, r4, #5
 80019e8:	6278      	str	r0, [r7, #36]	; 0x24
 80019ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019ec:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80019f0:	6278      	str	r0, [r7, #36]	; 0x24
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80019fa:	1a5b      	subs	r3, r3, r1
 80019fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001a00:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001a04:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001a08:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001a0c:	ebb8 0803 	subs.w	r8, r8, r3
 8001a10:	eb69 0904 	sbc.w	r9, r9, r4
 8001a14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a2c:	eb18 0801 	adds.w	r8, r8, r1
 8001a30:	eb49 0902 	adc.w	r9, r9, r2
 8001a34:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	4649      	mov	r1, r9
 8001a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a52:	f04f 0400 	mov.w	r4, #0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f7fe fbbb 	bl	80001d4 <__aeabi_uldivmod>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460c      	mov	r4, r1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
 8001a64:	e043      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	ea01 0103 	and.w	r1, r1, r3
 8001a7c:	ea02 0204 	and.w	r2, r2, r4
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	0160      	lsls	r0, r4, #5
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a98:	1a5b      	subs	r3, r3, r1
 8001a9a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a9e:	01a6      	lsls	r6, r4, #6
 8001aa0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001aa4:	019d      	lsls	r5, r3, #6
 8001aa6:	1aed      	subs	r5, r5, r3
 8001aa8:	eb66 0604 	sbc.w	r6, r6, r4
 8001aac:	00f3      	lsls	r3, r6, #3
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	00eb      	lsls	r3, r5, #3
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001ac0:	186d      	adds	r5, r5, r1
 8001ac2:	eb46 0602 	adc.w	r6, r6, r2
 8001ac6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001aca:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001ace:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001ad2:	4655      	mov	r5, sl
 8001ad4:	465e      	mov	r6, fp
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	4631      	mov	r1, r6
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	f04f 0400 	mov.w	r4, #0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	f7fe fb76 	bl	80001d4 <__aeabi_uldivmod>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0c1b      	lsrs	r3, r3, #16
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	3301      	adds	r3, #1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b08:	e002      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	373c      	adds	r7, #60	; 0x3c
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	007a1200 	.word	0x007a1200

08001b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200000a0 	.word	0x200000a0

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b48:	4601      	mov	r1, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08005990 	.word	0x08005990

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b6c:	f7ff ffdc 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b70:	4601      	mov	r1, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0b5b      	lsrs	r3, r3, #13
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08005990 	.word	0x08005990

08001b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e055      	b.n	8001c4e <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d106      	bne.n	8001bc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f003 f863 	bl	8004c88 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6851      	ldr	r1, [r2, #4]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68d2      	ldr	r2, [r2, #12]
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6912      	ldr	r2, [r2, #16]
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6952      	ldr	r2, [r2, #20]
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6992      	ldr	r2, [r2, #24]
 8001bfe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	69d2      	ldr	r2, [r2, #28]
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a12      	ldr	r2, [r2, #32]
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6992      	ldr	r2, [r2, #24]
 8001c20:	0c12      	lsrs	r2, r2, #16
 8001c22:	f002 0104 	and.w	r1, r2, #4
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69d2      	ldr	r2, [r2, #28]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b08c      	sub	sp, #48	; 0x30
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x32>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e181      	b.n	8001f8c <HAL_SPI_TransmitReceive+0x336>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c90:	f7fe fc8e 	bl	80005b0 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d00e      	beq.n	8001cca <HAL_SPI_TransmitReceive+0x74>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cb2:	d106      	bne.n	8001cc2 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_SPI_TransmitReceive+0x6c>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001cc8:	e156      	b.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x86>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x86>
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d103      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ce2:	e149      	b.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d103      	bne.n	8001cf8 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2205      	movs	r2, #5
 8001cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	887a      	ldrh	r2, [r7, #2]
 8001d1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d007      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d171      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x112>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d15d      	bne.n	8001e24 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	8812      	ldrh	r2, [r2, #0]
 8001d70:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3302      	adds	r3, #2
 8001d76:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d86:	e04d      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01c      	beq.n	8001dc8 <HAL_SPI_TransmitReceive+0x172>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_SPI_TransmitReceive+0x172>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d110      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	8812      	ldrh	r2, [r2, #0]
 8001dae:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3302      	adds	r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d018      	beq.n	8001e04 <HAL_SPI_TransmitReceive+0x1ae>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d111      	bne.n	8001e04 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3302      	adds	r3, #2
 8001df0:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0a:	d00b      	beq.n	8001e24 <HAL_SPI_TransmitReceive+0x1ce>
 8001e0c:	f7fe fbd0 	bl	80005b0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d303      	bcc.n	8001e24 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001e22:	e0a9      	b.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ac      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x132>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1a7      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x132>
 8001e38:	e071      	b.n	8001f1e <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_SPI_TransmitReceive+0x1f6>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d15e      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	330c      	adds	r3, #12
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e6c:	e04d      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01d      	beq.n	8001eb0 <HAL_SPI_TransmitReceive+0x25a>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d018      	beq.n	8001eb0 <HAL_SPI_TransmitReceive+0x25a>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f103 020c 	add.w	r2, r3, #12
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <HAL_SPI_TransmitReceive+0x294>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d110      	bne.n	8001eea <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	68d2      	ldr	r2, [r2, #12]
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef0:	d00b      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0x2b4>
 8001ef2:	f7fe fb5d 	bl	80005b0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d303      	bcc.n	8001f0a <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001f08:	e036      	b.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ac      	bne.n	8001e6e <HAL_SPI_TransmitReceive+0x218>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1a7      	bne.n	8001e6e <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f833 	bl	8001f94 <SPI_WaitFlagStateUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001f3a:	e01d      	b.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f890 	bl	8002066 <SPI_CheckFlag_BSY>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f58:	e00e      	b.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001fa2:	e04d      	b.n	8002040 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001faa:	d049      	beq.n	8002040 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001fb2:	f7fe fafd 	bl	80005b0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad2      	subs	r2, r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d33e      	bcc.n	8002040 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fd0:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fda:	d111      	bne.n	8002000 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe4:	d004      	beq.n	8001ff0 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fee:	d107      	bne.n	8002000 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002008:	d110      	bne.n	800202c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002018:	400b      	ands	r3, r1
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202a:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e00e      	b.n	800205e <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	401a      	ands	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	d101      	bne.n	8002054 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002050:	2201      	movs	r2, #1
 8002052:	e000      	b.n	8002056 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002054:	2200      	movs	r2, #0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d1a3      	bne.n	8001fa4 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af02      	add	r7, sp, #8
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff ff89 	bl	8001f94 <SPI_WaitFlagStateUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e000      	b.n	800209a <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e03f      	b.n	8002134 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f003 f919 	bl	8005300 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2224      	movs	r2, #36	; 0x24
 80020d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	68d2      	ldr	r2, [r2, #12]
 80020e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fc68 	bl	80029bc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	6912      	ldr	r2, [r2, #16]
 80020f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6952      	ldr	r2, [r2, #20]
 8002106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800210a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800211a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b20      	cmp	r3, #32
 800215a:	f040 8082 	bne.w	8002262 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_UART_Transmit+0x2e>
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07a      	b.n	8002264 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_UART_Transmit+0x40>
 8002178:	2302      	movs	r3, #2
 800217a:	e073      	b.n	8002264 <HAL_UART_Transmit+0x128>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2221      	movs	r2, #33	; 0x21
 800218e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002192:	f7fe fa0d 	bl	80005b0 <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80021a4:	e041      	b.n	800222a <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021bc:	d121      	bne.n	8002202 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fa7f 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e045      	b.n	8002264 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3302      	adds	r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	e017      	b.n	800222a <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	e013      	b.n	800222a <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fa5d 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e023      	b.n	8002264 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1b8      	bne.n	80021a6 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2200      	movs	r2, #0
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fa44 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e00a      	b.n	8002264 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	d166      	bne.n	8002354 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_UART_Receive_DMA+0x26>
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e05f      	b.n	8002356 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_UART_Receive_DMA+0x38>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e058      	b.n	8002356 <HAL_UART_Receive_DMA+0xea>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2222      	movs	r2, #34	; 0x22
 80022c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_UART_Receive_DMA+0xf4>)
 80022cc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_UART_Receive_DMA+0xf8>)
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	4a23      	ldr	r2, [pc, #140]	; (8002368 <HAL_UART_Receive_DMA+0xfc>)
 80022dc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	2200      	movs	r2, #0
 80022e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3304      	adds	r3, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	f7fe fb61 	bl	80009c4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	68d2      	ldr	r2, [r2, #12]
 800232a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	6952      	ldr	r2, [r2, #20]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	6952      	ldr	r2, [r2, #20]
 800234a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800234e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	e000      	b.n	8002356 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8002354:	2302      	movs	r3, #2
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	080025b5 	.word	0x080025b5
 8002364:	0800261d 	.word	0x0800261d
 8002368:	08002639 	.word	0x08002639

0800236c <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_UART_IRQHandler+0x52>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa87 	bl	80028ca <UART_Receive_IT>
      return;
 80023bc:	e0cc      	b.n	8002558 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80ab 	beq.w	800251c <HAL_UART_IRQHandler+0x1b0>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_UART_IRQHandler+0x70>
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80a0 	beq.w	800251c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_UART_IRQHandler+0xb0>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_UART_IRQHandler+0xd0>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_UART_IRQHandler+0xf0>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f043 0208 	orr.w	r2, r3, #8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d078      	beq.n	8002556 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_UART_IRQHandler+0x112>
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa26 	bl	80028ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <HAL_UART_IRQHandler+0x13a>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d031      	beq.n	800250a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f970 	bl	800278c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d023      	beq.n	8002502 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6952      	ldr	r2, [r2, #20]
 80024c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c8:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d013      	beq.n	80024fa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_UART_IRQHandler+0x1f4>)
 80024d8:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fad0 	bl	8000a84 <HAL_DMA_Abort_IT>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024f4:	4610      	mov	r0, r2
 80024f6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	e00e      	b.n	8002518 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f850 	bl	80025a0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	e00a      	b.n	8002518 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f84c 	bl	80025a0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	e006      	b.n	8002518 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f848 	bl	80025a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002516:	e01e      	b.n	8002556 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	bf00      	nop
    return;
 800251a:	e01c      	b.n	8002556 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_UART_IRQHandler+0x1cc>
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f95d 	bl	80027f0 <UART_Transmit_IT>
    return;
 8002536:	e00f      	b.n	8002558 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_UART_IRQHandler+0x1ec>
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f9a4 	bl	800289a <UART_EndTransmit_IT>
    return;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002556:	bf00      	nop
  }
}
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	080027c9 	.word	0x080027c9

08002564 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11e      	bne.n	800260e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	68d2      	ldr	r2, [r2, #12]
 80025e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	6952      	ldr	r2, [r2, #20]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	6952      	ldr	r2, [r2, #20]
 8002600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002604:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ffb2 	bl	8002578 <HAL_UART_RxCpltCallback>
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff ffae 	bl	800258c <HAL_UART_RxHalfCpltCallback>
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b21      	cmp	r3, #33	; 0x21
 800266a:	d108      	bne.n	800267e <UART_DMAError+0x46>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002678:	68b8      	ldr	r0, [r7, #8]
 800267a:	f000 f871 	bl	8002760 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b22      	cmp	r3, #34	; 0x22
 800269e:	d108      	bne.n	80026b2 <UART_DMAError+0x7a>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80026ac:	68b8      	ldr	r0, [r7, #8]
 80026ae:	f000 f86d 	bl	800278c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80026be:	68b8      	ldr	r0, [r7, #8]
 80026c0:	f7ff ff6e 	bl	80025a0 <HAL_UART_ErrorCallback>
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80026dc:	e02c      	b.n	8002738 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e4:	d028      	beq.n	8002738 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x30>
 80026ec:	f7fd ff60 	bl	80005b0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d91d      	bls.n	8002738 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800270a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	6952      	ldr	r2, [r2, #20]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e00f      	b.n	8002758 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	401a      	ands	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	429a      	cmp	r2, r3
 8002754:	d0c3      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	68d2      	ldr	r2, [r2, #12]
 8002772:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002776:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	6952      	ldr	r2, [r2, #20]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff fedc 	bl	80025a0 <HAL_UART_ErrorCallback>
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b21      	cmp	r3, #33	; 0x21
 8002802:	d143      	bne.n	800288c <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d119      	bne.n	8002842 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	1c9a      	adds	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	621a      	str	r2, [r3, #32]
 8002834:	e00e      	b.n	8002854 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	621a      	str	r2, [r3, #32]
 8002840:	e008      	b.n	8002854 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	1c58      	adds	r0, r3, #1
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6208      	str	r0, [r1, #32]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4619      	mov	r1, r3
 8002862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	68d2      	ldr	r2, [r2, #12]
 8002872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	68d2      	ldr	r2, [r2, #12]
 80028ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fe52 	bl	8002564 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b22      	cmp	r3, #34	; 0x22
 80028dc:	d169      	bne.n	80029b2 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d123      	bne.n	8002930 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10e      	bne.n	8002914 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	1c9a      	adds	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
 8002912:	e029      	b.n	8002968 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	b29b      	uxth	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
 800292e:	e01b      	b.n	8002968 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6291      	str	r1, [r2, #40]	; 0x28
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	6852      	ldr	r2, [r2, #4]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e00c      	b.n	8002968 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6291      	str	r1, [r2, #40]	; 0x28
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29b      	uxth	r3, r3
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4619      	mov	r1, r3
 8002976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002978:	2b00      	cmp	r3, #0
 800297a:	d118      	bne.n	80029ae <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800298a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	6952      	ldr	r2, [r2, #20]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fde7 	bl	8002578 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e002      	b.n	80029b4 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029f8:	f023 030c 	bic.w	r3, r3, #12
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	f040 80e4 	bne.w	8002c18 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4aab      	ldr	r2, [pc, #684]	; (8002d04 <UART_SetConfig+0x348>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <UART_SetConfig+0xa8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4aaa      	ldr	r2, [pc, #680]	; (8002d08 <UART_SetConfig+0x34c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d16c      	bne.n	8002b3e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	f7ff f87e 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4aa2      	ldr	r2, [pc, #648]	; (8002d0c <UART_SetConfig+0x350>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	011d      	lsls	r5, r3, #4
 8002a8c:	f7ff f86c 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fbb2 f6f3 	udiv	r6, r2, r3
 8002aa6:	f7ff f85f 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	4a92      	ldr	r2, [pc, #584]	; (8002d0c <UART_SetConfig+0x350>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2264      	movs	r2, #100	; 0x64
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	1af3      	subs	r3, r6, r3
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a8d      	ldr	r2, [pc, #564]	; (8002d0c <UART_SetConfig+0x350>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ae2:	441d      	add	r5, r3
 8002ae4:	f7ff f840 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fbb2 f6f3 	udiv	r6, r2, r3
 8002afe:	f7ff f833 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4a7c      	ldr	r2, [pc, #496]	; (8002d0c <UART_SetConfig+0x350>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2264      	movs	r2, #100	; 0x64
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	1af3      	subs	r3, r6, r3
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	4a77      	ldr	r2, [pc, #476]	; (8002d0c <UART_SetConfig+0x350>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	442b      	add	r3, r5
 8002b3a:	60a3      	str	r3, [r4, #8]
 8002b3c:	e154      	b.n	8002de8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681c      	ldr	r4, [r3, #0]
 8002b42:	f7fe fffd 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	441a      	add	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5c:	4a6b      	ldr	r2, [pc, #428]	; (8002d0c <UART_SetConfig+0x350>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	011d      	lsls	r5, r3, #4
 8002b66:	f7fe ffeb 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b80:	f7fe ffde 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009a      	lsls	r2, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	; (8002d0c <UART_SetConfig+0x350>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	2264      	movs	r2, #100	; 0x64
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	1af3      	subs	r3, r6, r3
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	3332      	adds	r3, #50	; 0x32
 8002bae:	4a57      	ldr	r2, [pc, #348]	; (8002d0c <UART_SetConfig+0x350>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bbc:	441d      	add	r5, r3
 8002bbe:	f7fe ffbf 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bd8:	f7fe ffb2 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	441a      	add	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4a46      	ldr	r2, [pc, #280]	; (8002d0c <UART_SetConfig+0x350>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2264      	movs	r2, #100	; 0x64
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	1af3      	subs	r3, r6, r3
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3332      	adds	r3, #50	; 0x32
 8002c06:	4a41      	ldr	r2, [pc, #260]	; (8002d0c <UART_SetConfig+0x350>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	442b      	add	r3, r5
 8002c14:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002c16:	e0e7      	b.n	8002de8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <UART_SetConfig+0x348>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <UART_SetConfig+0x270>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <UART_SetConfig+0x34c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d171      	bne.n	8002d10 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681c      	ldr	r4, [r3, #0]
 8002c30:	f7fe ff9a 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	441a      	add	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	4a30      	ldr	r2, [pc, #192]	; (8002d0c <UART_SetConfig+0x350>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	011d      	lsls	r5, r3, #4
 8002c54:	f7fe ff88 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c6e:	f7fe ff7b 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	009a      	lsls	r2, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <UART_SetConfig+0x350>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2264      	movs	r2, #100	; 0x64
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	1af3      	subs	r3, r6, r3
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	3332      	adds	r3, #50	; 0x32
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <UART_SetConfig+0x350>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca8:	441d      	add	r5, r3
 8002caa:	f7fe ff5d 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009a      	lsls	r2, r3, #2
 8002cb8:	441a      	add	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cc4:	f7fe ff50 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009a      	lsls	r2, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <UART_SetConfig+0x350>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2264      	movs	r2, #100	; 0x64
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	1af3      	subs	r3, r6, r3
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	3332      	adds	r3, #50	; 0x32
 8002cf2:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <UART_SetConfig+0x350>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	442b      	add	r3, r5
 8002d00:	60a3      	str	r3, [r4, #8]
 8002d02:	e071      	b.n	8002de8 <UART_SetConfig+0x42c>
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681c      	ldr	r4, [r3, #0]
 8002d14:	f7fe ff14 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009a      	lsls	r2, r3, #2
 8002d22:	441a      	add	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <UART_SetConfig+0x434>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	011d      	lsls	r5, r3, #4
 8002d38:	f7fe ff02 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d52:	f7fe fef5 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009a      	lsls	r2, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <UART_SetConfig+0x434>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2264      	movs	r2, #100	; 0x64
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	1af3      	subs	r3, r6, r3
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	3332      	adds	r3, #50	; 0x32
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <UART_SetConfig+0x434>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8c:	441d      	add	r5, r3
 8002d8e:	f7fe fed7 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002da8:	f7fe feca 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	441a      	add	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <UART_SetConfig+0x434>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	2264      	movs	r2, #100	; 0x64
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	1af3      	subs	r3, r6, r3
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	3332      	adds	r3, #50	; 0x32
 8002dd6:	4a06      	ldr	r2, [pc, #24]	; (8002df0 <UART_SetConfig+0x434>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	442b      	add	r3, r5
 8002de4:	60a3      	str	r3, [r4, #8]
}
 8002de6:	e7ff      	b.n	8002de8 <UART_SetConfig+0x42c>
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df0:	51eb851f 	.word	0x51eb851f

08002df4 <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e01a      	b.n	8002e38 <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d9e1      	bls.n	8002e02 <L6470_ResetAppCmdPkg+0xe>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	4603      	mov	r3, r0
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4413      	add	r3, r2
 8002e64:	7bba      	ldrb	r2, [r7, #14]
 8002e66:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4413      	add	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	4413      	add	r3, r2
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	60da      	str	r2, [r3, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <L6470_PrepareAppCmdPkg+0x44>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d105      	bne.n	8002ebe <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <L6470_PrepareAppCmdPkg+0x44>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8002eb8:	68b8      	ldr	r0, [r7, #8]
 8002eba:	f7ff ff9b 	bl	8002df4 <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 8002ebe:	7bba      	ldrb	r2, [r7, #14]
 8002ec0:	7bf8      	ldrb	r0, [r7, #15]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	f7ff ffbc 	bl	8002e4a <L6470_FillAppCmdPkg>
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000320 	.word	0x20000320

08002ee0 <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 8002ee0:	b490      	push	{r4, r7}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73bb      	strb	r3, [r7, #14]
 8002ef2:	e013      	b.n	8002f1c <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e00a      	b.n	8002f10 <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8002efa:	7b7b      	ldrb	r3, [r7, #13]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	737a      	strb	r2, [r7, #13]
 8002f00:	461a      	mov	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d9f1      	bls.n	8002efa <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8002f16:	7bbb      	ldrb	r3, [r7, #14]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	73bb      	strb	r3, [r7, #14]
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d9e8      	bls.n	8002ef4 <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e1f7      	b.n	8003318 <L6470_PrepareDaisyChainCommand+0x438>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	440b      	add	r3, r1
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	49b3      	ldr	r1, [pc, #716]	; (8003208 <L6470_PrepareDaisyChainCommand+0x328>)
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a1b      	subs	r3, r3, r0
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	440b      	add	r3, r1
 8002f46:	330c      	adds	r3, #12
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b12      	cmp	r3, #18
 8002f58:	f200 81db 	bhi.w	8003312 <L6470_PrepareDaisyChainCommand+0x432>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <L6470_PrepareDaisyChainCommand+0x84>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08003313 	.word	0x08003313
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08003039 	.word	0x08003039
 8002f70:	08003067 	.word	0x08003067
 8002f74:	080030cf 	.word	0x080030cf
 8002f78:	080030fd 	.word	0x080030fd
 8002f7c:	08003165 	.word	0x08003165
 8002f80:	080031a1 	.word	0x080031a1
 8002f84:	08003215 	.word	0x08003215
 8002f88:	080032b1 	.word	0x080032b1
 8002f8c:	08003313 	.word	0x08003313
 8002f90:	08003313 	.word	0x08003313
 8002f94:	08003313 	.word	0x08003313
 8002f98:	08003313 	.word	0x08003313
 8002f9c:	08003313 	.word	0x08003313
 8002fa0:	08003313 	.word	0x08003313
 8002fa4:	08003313 	.word	0x08003313
 8002fa8:	08003313 	.word	0x08003313
 8002fac:	08003313 	.word	0x08003313
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	18d1      	adds	r1, r2, r3
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	7818      	ldrb	r0, [r3, #0]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	4c90      	ldr	r4, [pc, #576]	; (800320c <L6470_PrepareDaisyChainCommand+0x32c>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4423      	add	r3, r4
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	4303      	orrs	r3, r0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	700b      	strb	r3, [r1, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4989      	ldr	r1, [pc, #548]	; (800320c <L6470_PrepareDaisyChainCommand+0x32c>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	330e      	adds	r3, #14
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73bb      	strb	r3, [r7, #14]
 8002ffc:	e016      	b.n	800302c <L6470_PrepareDaisyChainCommand+0x14c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 8002ffe:	7bbb      	ldrb	r3, [r7, #14]
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	4413      	add	r3, r2
 8003006:	461a      	mov	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4413      	add	r3, r2
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	440a      	add	r2, r1
 8003014:	6891      	ldr	r1, [r2, #8]
 8003016:	7b38      	ldrb	r0, [r7, #12]
 8003018:	7bba      	ldrb	r2, [r7, #14]
 800301a:	1a82      	subs	r2, r0, r2
 800301c:	00d2      	lsls	r2, r2, #3
 800301e:	fa21 f202 	lsr.w	r2, r1, r2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	3301      	adds	r3, #1
 800302a:	73bb      	strb	r3, [r7, #14]
 800302c:	7bba      	ldrb	r2, [r7, #14]
 800302e:	7b3b      	ldrb	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	429a      	cmp	r2, r3
 8003034:	dbe3      	blt.n	8002ffe <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 8003036:	e16c      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	18d1      	adds	r1, r2, r3
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	4413      	add	r3, r2
 8003044:	7818      	ldrb	r0, [r3, #0]
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4c6e      	ldr	r4, [pc, #440]	; (800320c <L6470_PrepareDaisyChainCommand+0x32c>)
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4423      	add	r3, r4
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	4303      	orrs	r3, r0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	700b      	strb	r3, [r1, #0]
      break;
 8003064:	e155      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	18d1      	adds	r1, r2, r3
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4413      	add	r3, r2
 8003072:	7818      	ldrb	r0, [r3, #0]
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4c64      	ldr	r4, [pc, #400]	; (8003210 <L6470_PrepareDaisyChainCommand+0x330>)
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	4423      	add	r3, r4
 8003088:	3308      	adds	r3, #8
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4303      	orrs	r3, r0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8003092:	2301      	movs	r3, #1
 8003094:	73bb      	strb	r3, [r7, #14]
 8003096:	e016      	b.n	80030c6 <L6470_PrepareDaisyChainCommand+0x1e6>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8003098:	7bbb      	ldrb	r3, [r7, #14]
 800309a:	009a      	lsls	r2, r3, #2
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	4413      	add	r3, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	440a      	add	r2, r1
 80030ae:	6891      	ldr	r1, [r2, #8]
 80030b0:	7bba      	ldrb	r2, [r7, #14]
 80030b2:	f1c2 0203 	rsb	r2, r2, #3
 80030b6:	00d2      	lsls	r2, r2, #3
 80030b8:	fa21 f202 	lsr.w	r2, r1, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3301      	adds	r3, #1
 80030c4:	73bb      	strb	r3, [r7, #14]
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d9e5      	bls.n	8003098 <L6470_PrepareDaisyChainCommand+0x1b8>
      }
      break;
 80030cc:	e121      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	18d1      	adds	r1, r2, r3
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	4413      	add	r3, r2
 80030da:	7818      	ldrb	r0, [r3, #0]
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4c4a      	ldr	r4, [pc, #296]	; (8003210 <L6470_PrepareDaisyChainCommand+0x330>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	4423      	add	r3, r4
 80030f0:	3308      	adds	r3, #8
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4303      	orrs	r3, r0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	700b      	strb	r3, [r1, #0]
      break;
 80030fa:	e10a      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	18d1      	adds	r1, r2, r3
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4413      	add	r3, r2
 8003108:	7818      	ldrb	r0, [r3, #0]
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4c3e      	ldr	r4, [pc, #248]	; (8003210 <L6470_PrepareDaisyChainCommand+0x330>)
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	4423      	add	r3, r4
 800311e:	3308      	adds	r3, #8
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4303      	orrs	r3, r0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8003128:	2301      	movs	r3, #1
 800312a:	73bb      	strb	r3, [r7, #14]
 800312c:	e016      	b.n	800315c <L6470_PrepareDaisyChainCommand+0x27c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800312e:	7bbb      	ldrb	r3, [r7, #14]
 8003130:	009a      	lsls	r2, r3, #2
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	4413      	add	r3, r2
 8003136:	461a      	mov	r2, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4413      	add	r3, r2
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	440a      	add	r2, r1
 8003144:	6891      	ldr	r1, [r2, #8]
 8003146:	7bba      	ldrb	r2, [r7, #14]
 8003148:	f1c2 0203 	rsb	r2, r2, #3
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	fa21 f202 	lsr.w	r2, r1, r2
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8003156:	7bbb      	ldrb	r3, [r7, #14]
 8003158:	3301      	adds	r3, #1
 800315a:	73bb      	strb	r3, [r7, #14]
 800315c:	7bbb      	ldrb	r3, [r7, #14]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d9e5      	bls.n	800312e <L6470_PrepareDaisyChainCommand+0x24e>
      }      
      break;
 8003162:	e0d6      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8003164:	2301      	movs	r3, #1
 8003166:	73bb      	strb	r3, [r7, #14]
 8003168:	e016      	b.n	8003198 <L6470_PrepareDaisyChainCommand+0x2b8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 800316a:	7bbb      	ldrb	r3, [r7, #14]
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	4413      	add	r3, r2
 8003172:	461a      	mov	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4413      	add	r3, r2
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	440a      	add	r2, r1
 8003180:	6851      	ldr	r1, [r2, #4]
 8003182:	7bba      	ldrb	r2, [r7, #14]
 8003184:	f1c2 0203 	rsb	r2, r2, #3
 8003188:	00d2      	lsls	r2, r2, #3
 800318a:	fa21 f202 	lsr.w	r2, r1, r2
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	3301      	adds	r3, #1
 8003196:	73bb      	strb	r3, [r7, #14]
 8003198:	7bbb      	ldrb	r3, [r7, #14]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d9e5      	bls.n	800316a <L6470_PrepareDaisyChainCommand+0x28a>
      }
      break;
 800319e:	e0b8      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	18d1      	adds	r1, r2, r3
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	7818      	ldrb	r0, [r3, #0]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4c15      	ldr	r4, [pc, #84]	; (8003210 <L6470_PrepareDaisyChainCommand+0x330>)
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	4423      	add	r3, r4
 80031c2:	3308      	adds	r3, #8
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4303      	orrs	r3, r0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80031cc:	2301      	movs	r3, #1
 80031ce:	73bb      	strb	r3, [r7, #14]
 80031d0:	e016      	b.n	8003200 <L6470_PrepareDaisyChainCommand+0x320>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80031d2:	7bbb      	ldrb	r3, [r7, #14]
 80031d4:	009a      	lsls	r2, r3, #2
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	4413      	add	r3, r2
 80031da:	461a      	mov	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	440a      	add	r2, r1
 80031e8:	6891      	ldr	r1, [r2, #8]
 80031ea:	7bba      	ldrb	r2, [r7, #14]
 80031ec:	f1c2 0203 	rsb	r2, r2, #3
 80031f0:	00d2      	lsls	r2, r2, #3
 80031f2:	fa21 f202 	lsr.w	r2, r1, r2
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80031fa:	7bbb      	ldrb	r3, [r7, #14]
 80031fc:	3301      	adds	r3, #1
 80031fe:	73bb      	strb	r3, [r7, #14]
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d9e5      	bls.n	80031d2 <L6470_PrepareDaisyChainCommand+0x2f2>
      }
      break;
 8003206:	e084      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
 8003208:	08005854 	.word	0x08005854
 800320c:	08005660 	.word	0x08005660
 8003210:	08005960 	.word	0x08005960
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	18d1      	adds	r1, r2, r3
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b258      	sxtb	r0, r3
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4c3f      	ldr	r4, [pc, #252]	; (800332c <L6470_PrepareDaisyChainCommand+0x44c>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	4423      	add	r3, r4
 8003238:	3304      	adds	r3, #4
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	b25b      	sxtb	r3, r3
 8003240:	4303      	orrs	r3, r0
 8003242:	b25b      	sxtb	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	18d1      	adds	r1, r2, r3
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4413      	add	r3, r2
 8003254:	7818      	ldrb	r0, [r3, #0]
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4c33      	ldr	r4, [pc, #204]	; (8003330 <L6470_PrepareDaisyChainCommand+0x450>)
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	4423      	add	r3, r4
 800326a:	3308      	adds	r3, #8
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4303      	orrs	r3, r0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8003274:	2301      	movs	r3, #1
 8003276:	73bb      	strb	r3, [r7, #14]
 8003278:	e016      	b.n	80032a8 <L6470_PrepareDaisyChainCommand+0x3c8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	009a      	lsls	r2, r3, #2
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	4413      	add	r3, r2
 8003282:	461a      	mov	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4413      	add	r3, r2
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	440a      	add	r2, r1
 8003290:	68d1      	ldr	r1, [r2, #12]
 8003292:	7bba      	ldrb	r2, [r7, #14]
 8003294:	f1c2 0203 	rsb	r2, r2, #3
 8003298:	00d2      	lsls	r2, r2, #3
 800329a:	fa21 f202 	lsr.w	r2, r1, r2
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80032a2:	7bbb      	ldrb	r3, [r7, #14]
 80032a4:	3301      	adds	r3, #1
 80032a6:	73bb      	strb	r3, [r7, #14]
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d9e5      	bls.n	800327a <L6470_PrepareDaisyChainCommand+0x39a>
      }
      break;
 80032ae:	e030      	b.n	8003312 <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	18d1      	adds	r1, r2, r3
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b258      	sxtb	r0, r3
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4c18      	ldr	r4, [pc, #96]	; (800332c <L6470_PrepareDaisyChainCommand+0x44c>)
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	4423      	add	r3, r4
 80032d4:	3304      	adds	r3, #4
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	4303      	orrs	r3, r0
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	18d1      	adds	r1, r2, r3
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	7818      	ldrb	r0, [r3, #0]
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4c0c      	ldr	r4, [pc, #48]	; (8003330 <L6470_PrepareDaisyChainCommand+0x450>)
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	4423      	add	r3, r4
 8003306:	3308      	adds	r3, #8
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	4303      	orrs	r3, r0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	700b      	strb	r3, [r1, #0]
      break;
 8003310:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3301      	adds	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b03      	cmp	r3, #3
 800331c:	f67f ae04 	bls.w	8002f28 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bc90      	pop	{r4, r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	08005974 	.word	0x08005974
 8003330:	08005960 	.word	0x08005960

08003334 <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 800333e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003342:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003378 <Step_s2_2_Acc+0x44>
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d80c      	bhi.n	800336a <Step_s2_2_Acc+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8003350:	ed97 7a01 	vldr	s14, [r7, #4]
 8003354:	eddf 6a09 	vldr	s13, [pc, #36]	; 800337c <Step_s2_2_Acc+0x48>
 8003358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800335c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003360:	edc7 7a00 	vstr	s15, [r7]
 8003364:	883b      	ldrh	r3, [r7, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	e000      	b.n	800336c <Step_s2_2_Acc+0x38>
  else
    return 0;   // Warning
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	4768c671 	.word	0x4768c671
 800337c:	4168d4fe 	.word	0x4168d4fe

08003380 <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 800338a:	edd7 7a01 	vldr	s15, [r7, #4]
 800338e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80033c4 <Step_s2_2_Dec+0x44>
 8003392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	d80c      	bhi.n	80033b6 <Step_s2_2_Dec+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800339c:	ed97 7a01 	vldr	s14, [r7, #4]
 80033a0:	eddf 6a09 	vldr	s13, [pc, #36]	; 80033c8 <Step_s2_2_Dec+0x48>
 80033a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ac:	edc7 7a00 	vstr	s15, [r7]
 80033b0:	883b      	ldrh	r3, [r7, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	e000      	b.n	80033b8 <Step_s2_2_Dec+0x38>
  else
    return 0;   // Warning
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	4768c671 	.word	0x4768c671
 80033c8:	4168d4fe 	.word	0x4168d4fe

080033cc <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 80033d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033da:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003410 <Step_s_2_MaxSpeed+0x44>
 80033de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e6:	d80c      	bhi.n	8003402 <Step_s_2_MaxSpeed+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80033e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80033ec:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003414 <Step_s_2_MaxSpeed+0x48>
 80033f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f8:	edc7 7a00 	vstr	s15, [r7]
 80033fc:	883b      	ldrh	r3, [r7, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	e000      	b.n	8003404 <Step_s_2_MaxSpeed+0x38>
  else
    return 0;   // Warning
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	4673e702 	.word	0x4673e702
 8003414:	4174240b 	.word	0x4174240b

08003418 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8003422:	edd7 7a01 	vldr	s15, [r7, #4]
 8003426:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800345c <Step_s_2_MinSpeed+0x44>
 800342a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	d80c      	bhi.n	800344e <Step_s_2_MinSpeed+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8003434:	ed97 7a01 	vldr	s14, [r7, #4]
 8003438:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003460 <Step_s_2_MinSpeed+0x48>
 800343c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003444:	edc7 7a00 	vstr	s15, [r7]
 8003448:	883b      	ldrh	r3, [r7, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	e000      	b.n	8003450 <Step_s_2_MinSpeed+0x38>
  else
    return 0;   // Warning
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	447414bf 	.word	0x447414bf
 8003460:	3e742401 	.word	0x3e742401

08003464 <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 800346e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003472:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80034b0 <Step_s_2_FsSpd+0x4c>
 8003476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d810      	bhi.n	80034a2 <Step_s_2_FsSpd+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8003480:	ed97 7a01 	vldr	s14, [r7, #4]
 8003484:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80034b4 <Step_s_2_FsSpd+0x50>
 8003488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800348c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003498:	edc7 7a00 	vstr	s15, [r7]
 800349c:	883b      	ldrh	r3, [r7, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	e000      	b.n	80034a4 <Step_s_2_FsSpd+0x40>
  else
    return 0;   // Warning
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	4673e180 	.word	0x4673e180
 80034b4:	41740000 	.word	0x41740000

080034b8 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 80034c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80034fc <Step_s_2_IntSpeed+0x44>
 80034ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d80c      	bhi.n	80034ee <Step_s_2_IntSpeed+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 80034d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80034d8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003500 <Step_s_2_IntSpeed+0x48>
 80034dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	edc7 7a00 	vstr	s15, [r7]
 80034e8:	883b      	ldrh	r3, [r7, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	e000      	b.n	80034f0 <Step_s_2_IntSpeed+0x38>
  else
    return 0;   // Warning
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	44742023 	.word	0x44742023
 8003500:	3d7423f4 	.word	0x3d7423f4

08003504 <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 800350e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003512:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003548 <s_Step_2_StSlp+0x44>
 8003516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351e:	d80c      	bhi.n	800353a <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8003520:	ed97 7a01 	vldr	s14, [r7, #4]
 8003524:	eddf 6a09 	vldr	s13, [pc, #36]	; 800354c <s_Step_2_StSlp+0x48>
 8003528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003530:	edc7 7a00 	vstr	s15, [r7]
 8003534:	783b      	ldrb	r3, [r7, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e000      	b.n	800353c <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	3b8311d9 	.word	0x3b8311d9
 800354c:	3783956e 	.word	0x3783956e

08003550 <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 800355a:	edd7 7a01 	vldr	s15, [r7, #4]
 800355e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003594 <s_Step_2_FnSlpAcc+0x44>
 8003562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	d80c      	bhi.n	8003586 <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 800356c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003570:	eddf 6a09 	vldr	s13, [pc, #36]	; 8003598 <s_Step_2_FnSlpAcc+0x48>
 8003574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800357c:	edc7 7a00 	vstr	s15, [r7]
 8003580:	783b      	ldrb	r3, [r7, #0]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e000      	b.n	8003588 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	3b8311d9 	.word	0x3b8311d9
 8003598:	3783956e 	.word	0x3783956e

0800359c <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 80035a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80035aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80035e0 <s_Step_2_FnSlpDec+0x44>
 80035ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	d80c      	bhi.n	80035d2 <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 80035b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80035bc:	eddf 6a09 	vldr	s13, [pc, #36]	; 80035e4 <s_Step_2_FnSlpDec+0x48>
 80035c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c8:	edc7 7a00 	vstr	s15, [r7]
 80035cc:	783b      	ldrb	r3, [r7, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	e000      	b.n	80035d4 <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	3b8311d9 	.word	0x3b8311d9
 80035e4:	3783956e 	.word	0x3783956e

080035e8 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 80035f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003680 <mA_2_OcdTh+0x98>
 80035fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	d836      	bhi.n	8003672 <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8003604:	ed97 7a01 	vldr	s14, [r7, #4]
 8003608:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003684 <mA_2_OcdTh+0x9c>
 800360c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003610:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8003614:	edd7 7a03 	vldr	s15, [r7, #12]
 8003618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361c:	edc7 7a00 	vstr	s15, [r7]
 8003620:	783b      	ldrb	r3, [r7, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003634:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8003638:	edd7 7a02 	vldr	s15, [r7, #8]
 800363c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	d50a      	bpl.n	8003660 <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 800364a:	edd7 7a03 	vldr	s15, [r7, #12]
 800364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003652:	edc7 7a00 	vstr	s15, [r7]
 8003656:	783b      	ldrb	r3, [r7, #0]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e009      	b.n	8003674 <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8003660:	edd7 7a03 	vldr	s15, [r7, #12]
 8003664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003668:	edc7 7a00 	vstr	s15, [r7]
 800366c:	783b      	ldrb	r3, [r7, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e000      	b.n	8003674 <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	45bb8000 	.word	0x45bb8000
 8003684:	43bb8000 	.word	0x43bb8000

08003688 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8003692:	edd7 7a01 	vldr	s15, [r7, #4]
 8003696:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003720 <mA_2_StallTh+0x98>
 800369a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	d836      	bhi.n	8003712 <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 80036a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80036a8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003724 <mA_2_StallTh+0x9c>
 80036ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b0:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 80036b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036bc:	edc7 7a00 	vstr	s15, [r7]
 80036c0:	783b      	ldrb	r3, [r7, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80036d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d4:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 80036d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80036dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	d50a      	bpl.n	8003700 <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 80036ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f2:	edc7 7a00 	vstr	s15, [r7]
 80036f6:	783b      	ldrb	r3, [r7, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e009      	b.n	8003714 <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8003700:	edd7 7a03 	vldr	s15, [r7, #12]
 8003704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003708:	edc7 7a00 	vstr	s15, [r7]
 800370c:	783b      	ldrb	r3, [r7, #0]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e000      	b.n	8003714 <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	457a0000 	.word	0x457a0000
 8003724:	41fa0000 	.word	0x41fa0000

08003728 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af02      	add	r7, sp, #8
 800372e:	4603      	mov	r3, r0
 8003730:	603a      	str	r2, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	460b      	mov	r3, r1
 8003736:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8003738:	79ba      	ldrb	r2, [r7, #6]
 800373a:	79f8      	ldrb	r0, [r7, #7]
 800373c:	2300      	movs	r3, #0
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	2201      	movs	r2, #1
 8003748:	4907      	ldr	r1, [pc, #28]	; (8003768 <L6470_SetParam+0x40>)
 800374a:	f7ff fba5 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800374e:	4907      	ldr	r1, [pc, #28]	; (800376c <L6470_SetParam+0x44>)
 8003750:	4805      	ldr	r0, [pc, #20]	; (8003768 <L6470_SetParam+0x40>)
 8003752:	f7ff fbc5 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003756:	4906      	ldr	r1, [pc, #24]	; (8003770 <L6470_SetParam+0x48>)
 8003758:	4804      	ldr	r0, [pc, #16]	; (800376c <L6470_SetParam+0x44>)
 800375a:	f000 fc51 	bl	8004000 <L6470_DaisyChainCommand>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000394 	.word	0x20000394
 800376c:	20000384 	.word	0x20000384
 8003770:	20000374 	.word	0x20000374

08003774 <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	4603      	mov	r3, r0
 800377c:	460a      	mov	r2, r1
 800377e:	71fb      	strb	r3, [r7, #7]
 8003780:	4613      	mov	r3, r2
 8003782:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8003784:	79ba      	ldrb	r2, [r7, #6]
 8003786:	79f8      	ldrb	r0, [r7, #7]
 8003788:	2300      	movs	r3, #0
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	2202      	movs	r2, #2
 8003794:	4910      	ldr	r1, [pc, #64]	; (80037d8 <L6470_GetParam+0x64>)
 8003796:	f7ff fb7f 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800379a:	4910      	ldr	r1, [pc, #64]	; (80037dc <L6470_GetParam+0x68>)
 800379c:	480e      	ldr	r0, [pc, #56]	; (80037d8 <L6470_GetParam+0x64>)
 800379e:	f7ff fb9f 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80037a2:	490f      	ldr	r1, [pc, #60]	; (80037e0 <L6470_GetParam+0x6c>)
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <L6470_GetParam+0x68>)
 80037a6:	f000 fc2b 	bl	8004000 <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 80037aa:	79ba      	ldrb	r2, [r7, #6]
 80037ac:	490d      	ldr	r1, [pc, #52]	; (80037e4 <L6470_GetParam+0x70>)
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	330e      	adds	r3, #14
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	4907      	ldr	r1, [pc, #28]	; (80037e0 <L6470_GetParam+0x6c>)
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fc61 	bl	800408c <L6470_ExtractReturnedData>
 80037ca:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 80037cc:	68bb      	ldr	r3, [r7, #8]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000394 	.word	0x20000394
 80037dc:	20000384 	.word	0x20000384
 80037e0:	20000374 	.word	0x20000374
 80037e4:	08005660 	.word	0x08005660

080037e8 <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	4603      	mov	r3, r0
 80037f0:	603a      	str	r2, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
 80037f4:	460b      	mov	r3, r1
 80037f6:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80037f8:	79ba      	ldrb	r2, [r7, #6]
 80037fa:	79f8      	ldrb	r0, [r7, #7]
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	2203      	movs	r2, #3
 8003808:	4907      	ldr	r1, [pc, #28]	; (8003828 <L6470_Run+0x40>)
 800380a:	f7ff fb45 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800380e:	4907      	ldr	r1, [pc, #28]	; (800382c <L6470_Run+0x44>)
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <L6470_Run+0x40>)
 8003812:	f7ff fb65 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003816:	4906      	ldr	r1, [pc, #24]	; (8003830 <L6470_Run+0x48>)
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <L6470_Run+0x44>)
 800381a:	f000 fbf1 	bl	8004000 <L6470_DaisyChainCommand>
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000394 	.word	0x20000394
 800382c:	20000384 	.word	0x20000384
 8003830:	20000374 	.word	0x20000374

08003834 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af02      	add	r7, sp, #8
 800383a:	4603      	mov	r3, r0
 800383c:	460a      	mov	r2, r1
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	4613      	mov	r3, r2
 8003842:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8003844:	79ba      	ldrb	r2, [r7, #6]
 8003846:	79f8      	ldrb	r0, [r7, #7]
 8003848:	2300      	movs	r3, #0
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	2300      	movs	r3, #0
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	2204      	movs	r2, #4
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <L6470_StepClock+0x40>)
 8003856:	f7ff fb1f 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800385a:	4907      	ldr	r1, [pc, #28]	; (8003878 <L6470_StepClock+0x44>)
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <L6470_StepClock+0x40>)
 800385e:	f7ff fb3f 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003862:	4906      	ldr	r1, [pc, #24]	; (800387c <L6470_StepClock+0x48>)
 8003864:	4804      	ldr	r0, [pc, #16]	; (8003878 <L6470_StepClock+0x44>)
 8003866:	f000 fbcb 	bl	8004000 <L6470_DaisyChainCommand>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000394 	.word	0x20000394
 8003878:	20000384 	.word	0x20000384
 800387c:	20000374 	.word	0x20000374

08003880 <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af02      	add	r7, sp, #8
 8003886:	4603      	mov	r3, r0
 8003888:	603a      	str	r2, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
 800388c:	460b      	mov	r3, r1
 800388e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8003890:	79ba      	ldrb	r2, [r7, #6]
 8003892:	79f8      	ldrb	r0, [r7, #7]
 8003894:	2300      	movs	r3, #0
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	2205      	movs	r2, #5
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <L6470_Move+0x40>)
 80038a2:	f7ff faf9 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80038a6:	4907      	ldr	r1, [pc, #28]	; (80038c4 <L6470_Move+0x44>)
 80038a8:	4805      	ldr	r0, [pc, #20]	; (80038c0 <L6470_Move+0x40>)
 80038aa:	f7ff fb19 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80038ae:	4906      	ldr	r1, [pc, #24]	; (80038c8 <L6470_Move+0x48>)
 80038b0:	4804      	ldr	r0, [pc, #16]	; (80038c4 <L6470_Move+0x44>)
 80038b2:	f000 fba5 	bl	8004000 <L6470_DaisyChainCommand>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000394 	.word	0x20000394
 80038c4:	20000384 	.word	0x20000384
 80038c8:	20000374 	.word	0x20000374

080038cc <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	4603      	mov	r3, r0
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038de:	d211      	bcs.n	8003904 <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 80038e0:	79f8      	ldrb	r0, [r7, #7]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2206      	movs	r2, #6
 80038ee:	4907      	ldr	r1, [pc, #28]	; (800390c <L6470_GoTo+0x40>)
 80038f0:	f7ff fad2 	bl	8002e98 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80038f4:	4906      	ldr	r1, [pc, #24]	; (8003910 <L6470_GoTo+0x44>)
 80038f6:	4805      	ldr	r0, [pc, #20]	; (800390c <L6470_GoTo+0x40>)
 80038f8:	f7ff faf2 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80038fc:	4905      	ldr	r1, [pc, #20]	; (8003914 <L6470_GoTo+0x48>)
 80038fe:	4804      	ldr	r0, [pc, #16]	; (8003910 <L6470_GoTo+0x44>)
 8003900:	f000 fb7e 	bl	8004000 <L6470_DaisyChainCommand>
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000394 	.word	0x20000394
 8003910:	20000384 	.word	0x20000384
 8003914:	20000374 	.word	0x20000374

08003918 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af02      	add	r7, sp, #8
 800391e:	4603      	mov	r3, r0
 8003920:	603a      	str	r2, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	460b      	mov	r3, r1
 8003926:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392e:	d212      	bcs.n	8003956 <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8003930:	79ba      	ldrb	r2, [r7, #6]
 8003932:	79f8      	ldrb	r0, [r7, #7]
 8003934:	2300      	movs	r3, #0
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	2207      	movs	r2, #7
 8003940:	4907      	ldr	r1, [pc, #28]	; (8003960 <L6470_GoToDir+0x48>)
 8003942:	f7ff faa9 	bl	8002e98 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003946:	4907      	ldr	r1, [pc, #28]	; (8003964 <L6470_GoToDir+0x4c>)
 8003948:	4805      	ldr	r0, [pc, #20]	; (8003960 <L6470_GoToDir+0x48>)
 800394a:	f7ff fac9 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800394e:	4906      	ldr	r1, [pc, #24]	; (8003968 <L6470_GoToDir+0x50>)
 8003950:	4804      	ldr	r0, [pc, #16]	; (8003964 <L6470_GoToDir+0x4c>)
 8003952:	f000 fb55 	bl	8004000 <L6470_DaisyChainCommand>
  }
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000394 	.word	0x20000394
 8003964:	20000384 	.word	0x20000384
 8003968:	20000374 	.word	0x20000374

0800396c <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af02      	add	r7, sp, #8
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
 8003978:	460b      	mov	r3, r1
 800397a:	71bb      	strb	r3, [r7, #6]
 800397c:	4613      	mov	r3, r2
 800397e:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8003980:	79b9      	ldrb	r1, [r7, #6]
 8003982:	797b      	ldrb	r3, [r7, #5]
 8003984:	79f8      	ldrb	r0, [r7, #7]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	9201      	str	r2, [sp, #4]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	460b      	mov	r3, r1
 800398e:	2208      	movs	r2, #8
 8003990:	4907      	ldr	r1, [pc, #28]	; (80039b0 <L6470_GoUntil+0x44>)
 8003992:	f7ff fa81 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003996:	4907      	ldr	r1, [pc, #28]	; (80039b4 <L6470_GoUntil+0x48>)
 8003998:	4805      	ldr	r0, [pc, #20]	; (80039b0 <L6470_GoUntil+0x44>)
 800399a:	f7ff faa1 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800399e:	4906      	ldr	r1, [pc, #24]	; (80039b8 <L6470_GoUntil+0x4c>)
 80039a0:	4804      	ldr	r0, [pc, #16]	; (80039b4 <L6470_GoUntil+0x48>)
 80039a2:	f000 fb2d 	bl	8004000 <L6470_DaisyChainCommand>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000394 	.word	0x20000394
 80039b4:	20000384 	.word	0x20000384
 80039b8:	20000374 	.word	0x20000374

080039bc <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
 80039c6:	460b      	mov	r3, r1
 80039c8:	71bb      	strb	r3, [r7, #6]
 80039ca:	4613      	mov	r3, r2
 80039cc:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80039ce:	79b9      	ldrb	r1, [r7, #6]
 80039d0:	797b      	ldrb	r3, [r7, #5]
 80039d2:	79f8      	ldrb	r0, [r7, #7]
 80039d4:	2200      	movs	r2, #0
 80039d6:	9201      	str	r2, [sp, #4]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	460b      	mov	r3, r1
 80039dc:	2209      	movs	r2, #9
 80039de:	4907      	ldr	r1, [pc, #28]	; (80039fc <L6470_ReleaseSW+0x40>)
 80039e0:	f7ff fa5a 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80039e4:	4906      	ldr	r1, [pc, #24]	; (8003a00 <L6470_ReleaseSW+0x44>)
 80039e6:	4805      	ldr	r0, [pc, #20]	; (80039fc <L6470_ReleaseSW+0x40>)
 80039e8:	f7ff fa7a 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80039ec:	4905      	ldr	r1, [pc, #20]	; (8003a04 <L6470_ReleaseSW+0x48>)
 80039ee:	4804      	ldr	r0, [pc, #16]	; (8003a00 <L6470_ReleaseSW+0x44>)
 80039f0:	f000 fb06 	bl	8004000 <L6470_DaisyChainCommand>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000394 	.word	0x20000394
 8003a00:	20000384 	.word	0x20000384
 8003a04:	20000374 	.word	0x20000374

08003a08 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8003a12:	79f8      	ldrb	r0, [r7, #7]
 8003a14:	2300      	movs	r3, #0
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	220a      	movs	r2, #10
 8003a20:	4907      	ldr	r1, [pc, #28]	; (8003a40 <L6470_GoHome+0x38>)
 8003a22:	f7ff fa39 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003a26:	4907      	ldr	r1, [pc, #28]	; (8003a44 <L6470_GoHome+0x3c>)
 8003a28:	4805      	ldr	r0, [pc, #20]	; (8003a40 <L6470_GoHome+0x38>)
 8003a2a:	f7ff fa59 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003a2e:	4906      	ldr	r1, [pc, #24]	; (8003a48 <L6470_GoHome+0x40>)
 8003a30:	4804      	ldr	r0, [pc, #16]	; (8003a44 <L6470_GoHome+0x3c>)
 8003a32:	f000 fae5 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000394 	.word	0x20000394
 8003a44:	20000384 	.word	0x20000384
 8003a48:	20000374 	.word	0x20000374

08003a4c <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8003a56:	79f8      	ldrb	r0, [r7, #7]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	2300      	movs	r3, #0
 8003a62:	220b      	movs	r2, #11
 8003a64:	4907      	ldr	r1, [pc, #28]	; (8003a84 <L6470_GoMark+0x38>)
 8003a66:	f7ff fa17 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003a6a:	4907      	ldr	r1, [pc, #28]	; (8003a88 <L6470_GoMark+0x3c>)
 8003a6c:	4805      	ldr	r0, [pc, #20]	; (8003a84 <L6470_GoMark+0x38>)
 8003a6e:	f7ff fa37 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003a72:	4906      	ldr	r1, [pc, #24]	; (8003a8c <L6470_GoMark+0x40>)
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <L6470_GoMark+0x3c>)
 8003a76:	f000 fac3 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000394 	.word	0x20000394
 8003a88:	20000384 	.word	0x20000384
 8003a8c:	20000374 	.word	0x20000374

08003a90 <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8003a9a:	79f8      	ldrb	r0, [r7, #7]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	4907      	ldr	r1, [pc, #28]	; (8003ac8 <L6470_ResetPos+0x38>)
 8003aaa:	f7ff f9f5 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003aae:	4907      	ldr	r1, [pc, #28]	; (8003acc <L6470_ResetPos+0x3c>)
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <L6470_ResetPos+0x38>)
 8003ab2:	f7ff fa15 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003ab6:	4906      	ldr	r1, [pc, #24]	; (8003ad0 <L6470_ResetPos+0x40>)
 8003ab8:	4804      	ldr	r0, [pc, #16]	; (8003acc <L6470_ResetPos+0x3c>)
 8003aba:	f000 faa1 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000394 	.word	0x20000394
 8003acc:	20000384 	.word	0x20000384
 8003ad0:	20000374 	.word	0x20000374

08003ad4 <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8003ade:	79f8      	ldrb	r0, [r7, #7]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	220d      	movs	r2, #13
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <L6470_ResetDevice+0x38>)
 8003aee:	f7ff f9d3 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003af2:	4907      	ldr	r1, [pc, #28]	; (8003b10 <L6470_ResetDevice+0x3c>)
 8003af4:	4805      	ldr	r0, [pc, #20]	; (8003b0c <L6470_ResetDevice+0x38>)
 8003af6:	f7ff f9f3 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003afa:	4906      	ldr	r1, [pc, #24]	; (8003b14 <L6470_ResetDevice+0x40>)
 8003afc:	4804      	ldr	r0, [pc, #16]	; (8003b10 <L6470_ResetDevice+0x3c>)
 8003afe:	f000 fa7f 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000394 	.word	0x20000394
 8003b10:	20000384 	.word	0x20000384
 8003b14:	20000374 	.word	0x20000374

08003b18 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8003b22:	79f8      	ldrb	r0, [r7, #7]
 8003b24:	2300      	movs	r3, #0
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	220e      	movs	r2, #14
 8003b30:	4907      	ldr	r1, [pc, #28]	; (8003b50 <L6470_SoftStop+0x38>)
 8003b32:	f7ff f9b1 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003b36:	4907      	ldr	r1, [pc, #28]	; (8003b54 <L6470_SoftStop+0x3c>)
 8003b38:	4805      	ldr	r0, [pc, #20]	; (8003b50 <L6470_SoftStop+0x38>)
 8003b3a:	f7ff f9d1 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003b3e:	4906      	ldr	r1, [pc, #24]	; (8003b58 <L6470_SoftStop+0x40>)
 8003b40:	4804      	ldr	r0, [pc, #16]	; (8003b54 <L6470_SoftStop+0x3c>)
 8003b42:	f000 fa5d 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000394 	.word	0x20000394
 8003b54:	20000384 	.word	0x20000384
 8003b58:	20000374 	.word	0x20000374

08003b5c <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8003b66:	79f8      	ldrb	r0, [r7, #7]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2300      	movs	r3, #0
 8003b72:	220f      	movs	r2, #15
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <L6470_HardStop+0x38>)
 8003b76:	f7ff f98f 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003b7a:	4907      	ldr	r1, [pc, #28]	; (8003b98 <L6470_HardStop+0x3c>)
 8003b7c:	4805      	ldr	r0, [pc, #20]	; (8003b94 <L6470_HardStop+0x38>)
 8003b7e:	f7ff f9af 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003b82:	4906      	ldr	r1, [pc, #24]	; (8003b9c <L6470_HardStop+0x40>)
 8003b84:	4804      	ldr	r0, [pc, #16]	; (8003b98 <L6470_HardStop+0x3c>)
 8003b86:	f000 fa3b 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000394 	.word	0x20000394
 8003b98:	20000384 	.word	0x20000384
 8003b9c:	20000374 	.word	0x20000374

08003ba0 <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8003baa:	79f8      	ldrb	r0, [r7, #7]
 8003bac:	2300      	movs	r3, #0
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <L6470_SoftHiZ+0x38>)
 8003bba:	f7ff f96d 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003bbe:	4907      	ldr	r1, [pc, #28]	; (8003bdc <L6470_SoftHiZ+0x3c>)
 8003bc0:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <L6470_SoftHiZ+0x38>)
 8003bc2:	f7ff f98d 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003bc6:	4906      	ldr	r1, [pc, #24]	; (8003be0 <L6470_SoftHiZ+0x40>)
 8003bc8:	4804      	ldr	r0, [pc, #16]	; (8003bdc <L6470_SoftHiZ+0x3c>)
 8003bca:	f000 fa19 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000394 	.word	0x20000394
 8003bdc:	20000384 	.word	0x20000384
 8003be0:	20000374 	.word	0x20000374

08003be4 <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8003bee:	79f8      	ldrb	r0, [r7, #7]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2211      	movs	r2, #17
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <L6470_HardHiZ+0x38>)
 8003bfe:	f7ff f94b 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003c02:	4907      	ldr	r1, [pc, #28]	; (8003c20 <L6470_HardHiZ+0x3c>)
 8003c04:	4805      	ldr	r0, [pc, #20]	; (8003c1c <L6470_HardHiZ+0x38>)
 8003c06:	f7ff f96b 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003c0a:	4906      	ldr	r1, [pc, #24]	; (8003c24 <L6470_HardHiZ+0x40>)
 8003c0c:	4804      	ldr	r0, [pc, #16]	; (8003c20 <L6470_HardHiZ+0x3c>)
 8003c0e:	f000 f9f7 	bl	8004000 <L6470_DaisyChainCommand>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000394 	.word	0x20000394
 8003c20:	20000384 	.word	0x20000384
 8003c24:	20000374 	.word	0x20000374

08003c28 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8003c32:	79f8      	ldrb	r0, [r7, #7]
 8003c34:	2300      	movs	r3, #0
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2212      	movs	r2, #18
 8003c40:	490b      	ldr	r1, [pc, #44]	; (8003c70 <L6470_GetStatus+0x48>)
 8003c42:	f7ff f929 	bl	8002e98 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003c46:	490b      	ldr	r1, [pc, #44]	; (8003c74 <L6470_GetStatus+0x4c>)
 8003c48:	4809      	ldr	r0, [pc, #36]	; (8003c70 <L6470_GetStatus+0x48>)
 8003c4a:	f7ff f949 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003c4e:	490a      	ldr	r1, [pc, #40]	; (8003c78 <L6470_GetStatus+0x50>)
 8003c50:	4808      	ldr	r0, [pc, #32]	; (8003c74 <L6470_GetStatus+0x4c>)
 8003c52:	f000 f9d5 	bl	8004000 <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	4907      	ldr	r1, [pc, #28]	; (8003c78 <L6470_GetStatus+0x50>)
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa15 	bl	800408c <L6470_ExtractReturnedData>
 8003c62:	4603      	mov	r3, r0
 8003c64:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 8003c66:	89fb      	ldrh	r3, [r7, #14]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000394 	.word	0x20000394
 8003c74:	20000384 	.word	0x20000384
 8003c78:	20000374 	.word	0x20000374

08003c7c <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	4603      	mov	r3, r0
 8003c84:	603a      	str	r2, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8003c8c:	79ba      	ldrb	r2, [r7, #6]
 8003c8e:	79f8      	ldrb	r0, [r7, #7]
 8003c90:	2300      	movs	r3, #0
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <L6470_PrepareSetParam+0x30>)
 8003c9e:	f7ff f8fb 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000394 	.word	0x20000394

08003cb0 <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460a      	mov	r2, r1
 8003cba:	71fb      	strb	r3, [r7, #7]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8003cc0:	79ba      	ldrb	r2, [r7, #6]
 8003cc2:	79f8      	ldrb	r0, [r7, #7]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <L6470_PrepareGetParam+0x30>)
 8003cd2:	f7ff f8e1 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000394 	.word	0x20000394

08003ce4 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	4603      	mov	r3, r0
 8003cec:	603a      	str	r2, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8003cf4:	79ba      	ldrb	r2, [r7, #6]
 8003cf6:	79f8      	ldrb	r0, [r7, #7]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	2203      	movs	r2, #3
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <L6470_PrepareRun+0x30>)
 8003d06:	f7ff f8c7 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000394 	.word	0x20000394

08003d18 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8003d28:	79ba      	ldrb	r2, [r7, #6]
 8003d2a:	79f8      	ldrb	r0, [r7, #7]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	2300      	movs	r3, #0
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	2204      	movs	r2, #4
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <L6470_PrepareStepClock+0x30>)
 8003d3a:	f7ff f8ad 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000394 	.word	0x20000394

08003d4c <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	4603      	mov	r3, r0
 8003d54:	603a      	str	r2, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8003d5c:	79ba      	ldrb	r2, [r7, #6]
 8003d5e:	79f8      	ldrb	r0, [r7, #7]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	2205      	movs	r2, #5
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <L6470_PrepareMove+0x30>)
 8003d6e:	f7ff f893 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000394 	.word	0x20000394

08003d80 <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	4603      	mov	r3, r0
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8003d8c:	79f8      	ldrb	r0, [r7, #7]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2206      	movs	r2, #6
 8003d9a:	4903      	ldr	r1, [pc, #12]	; (8003da8 <L6470_PrepareGoTo+0x28>)
 8003d9c:	f7ff f87c 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000394 	.word	0x20000394

08003dac <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	4603      	mov	r3, r0
 8003db4:	603a      	str	r2, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
 8003db8:	460b      	mov	r3, r1
 8003dba:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8003dbc:	79ba      	ldrb	r2, [r7, #6]
 8003dbe:	79f8      	ldrb	r0, [r7, #7]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <L6470_PrepareGoToDir+0x30>)
 8003dce:	f7ff f863 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000394 	.word	0x20000394

08003de0 <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4603      	mov	r3, r0
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	460b      	mov	r3, r1
 8003dee:	71bb      	strb	r3, [r7, #6]
 8003df0:	4613      	mov	r3, r2
 8003df2:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8003df4:	79b9      	ldrb	r1, [r7, #6]
 8003df6:	797b      	ldrb	r3, [r7, #5]
 8003df8:	79f8      	ldrb	r0, [r7, #7]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	9201      	str	r2, [sp, #4]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	460b      	mov	r3, r1
 8003e02:	2208      	movs	r2, #8
 8003e04:	4903      	ldr	r1, [pc, #12]	; (8003e14 <L6470_PrepareGoUntil+0x34>)
 8003e06:	f7ff f847 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000394 	.word	0x20000394

08003e18 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
 8003e22:	460b      	mov	r3, r1
 8003e24:	71bb      	strb	r3, [r7, #6]
 8003e26:	4613      	mov	r3, r2
 8003e28:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8003e2a:	79b9      	ldrb	r1, [r7, #6]
 8003e2c:	797b      	ldrb	r3, [r7, #5]
 8003e2e:	79f8      	ldrb	r0, [r7, #7]
 8003e30:	2200      	movs	r2, #0
 8003e32:	9201      	str	r2, [sp, #4]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	460b      	mov	r3, r1
 8003e38:	2209      	movs	r2, #9
 8003e3a:	4903      	ldr	r1, [pc, #12]	; (8003e48 <L6470_PrepareReleaseSW+0x30>)
 8003e3c:	f7ff f82c 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000394 	.word	0x20000394

08003e4c <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8003e56:	79f8      	ldrb	r0, [r7, #7]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	220a      	movs	r2, #10
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <L6470_PrepareGoHome+0x28>)
 8003e66:	f7ff f817 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000394 	.word	0x20000394

08003e78 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8003e82:	79f8      	ldrb	r0, [r7, #7]
 8003e84:	2300      	movs	r3, #0
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	220b      	movs	r2, #11
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <L6470_PrepareGoMark+0x28>)
 8003e92:	f7ff f801 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000394 	.word	0x20000394

08003ea4 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8003eae:	79f8      	ldrb	r0, [r7, #7]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	220c      	movs	r2, #12
 8003ebc:	4903      	ldr	r1, [pc, #12]	; (8003ecc <L6470_PrepareResetPos+0x28>)
 8003ebe:	f7fe ffeb 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000394 	.word	0x20000394

08003ed0 <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8003eda:	79f8      	ldrb	r0, [r7, #7]
 8003edc:	2300      	movs	r3, #0
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	220d      	movs	r2, #13
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <L6470_PrepareResetDevice+0x28>)
 8003eea:	f7fe ffd5 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000394 	.word	0x20000394

08003efc <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8003f06:	79f8      	ldrb	r0, [r7, #7]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2300      	movs	r3, #0
 8003f12:	220e      	movs	r2, #14
 8003f14:	4903      	ldr	r1, [pc, #12]	; (8003f24 <L6470_PrepareSoftStop+0x28>)
 8003f16:	f7fe ffbf 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000394 	.word	0x20000394

08003f28 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8003f32:	79f8      	ldrb	r0, [r7, #7]
 8003f34:	2300      	movs	r3, #0
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	220f      	movs	r2, #15
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <L6470_PrepareHardStop+0x28>)
 8003f42:	f7fe ffa9 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000394 	.word	0x20000394

08003f54 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8003f5e:	79f8      	ldrb	r0, [r7, #7]
 8003f60:	2300      	movs	r3, #0
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	2300      	movs	r3, #0
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <L6470_PrepareSoftHiZ+0x28>)
 8003f6e:	f7fe ff93 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000394 	.word	0x20000394

08003f80 <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8003f8a:	79f8      	ldrb	r0, [r7, #7]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	2211      	movs	r2, #17
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <L6470_PrepareHardHiZ+0x28>)
 8003f9a:	f7fe ff7d 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000394 	.word	0x20000394

08003fac <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8003fb6:	79f8      	ldrb	r0, [r7, #7]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2212      	movs	r2, #18
 8003fc4:	4903      	ldr	r1, [pc, #12]	; (8003fd4 <L6470_PrepareGetStatus+0x28>)
 8003fc6:	f7fe ff67 	bl	8002e98 <L6470_PrepareAppCmdPkg>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000394 	.word	0x20000394

08003fd8 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8003fdc:	4905      	ldr	r1, [pc, #20]	; (8003ff4 <L6470_PerformPreparedApplicationCommand+0x1c>)
 8003fde:	4806      	ldr	r0, [pc, #24]	; (8003ff8 <L6470_PerformPreparedApplicationCommand+0x20>)
 8003fe0:	f7fe ff7e 	bl	8002ee0 <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8003fe4:	4905      	ldr	r1, [pc, #20]	; (8003ffc <L6470_PerformPreparedApplicationCommand+0x24>)
 8003fe6:	4803      	ldr	r0, [pc, #12]	; (8003ff4 <L6470_PerformPreparedApplicationCommand+0x1c>)
 8003fe8:	f000 f80a 	bl	8004000 <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <L6470_PerformPreparedApplicationCommand+0x24>)
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000384 	.word	0x20000384
 8003ff8:	20000394 	.word	0x20000394
 8003ffc:	20000374 	.word	0x20000374

08004000 <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <L6470_DaisyChainCommand+0x7c>)
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e02b      	b.n	800406e <L6470_DaisyChainCommand+0x6e>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 8004016:	2200      	movs	r2, #0
 8004018:	2110      	movs	r1, #16
 800401a:	4819      	ldr	r0, [pc, #100]	; (8004080 <L6470_DaisyChainCommand+0x80>)
 800401c:	f7fd f956 	bl	80012cc <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&hspi1, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	461a      	mov	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1899      	adds	r1, r3, r2
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	441a      	add	r2, r3
 8004034:	230a      	movs	r3, #10
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2304      	movs	r3, #4
 800403a:	4812      	ldr	r0, [pc, #72]	; (8004084 <L6470_DaisyChainCommand+0x84>)
 800403c:	f7fd fe0b 	bl	8001c56 <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 8004040:	2201      	movs	r2, #1
 8004042:	2110      	movs	r1, #16
 8004044:	480e      	ldr	r0, [pc, #56]	; (8004080 <L6470_DaisyChainCommand+0x80>)
 8004046:	f7fd f941 	bl	80012cc <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <L6470_DaisyChainCommand+0x88>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e006      	b.n	8004060 <L6470_DaisyChainCommand+0x60>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004052:	bf00      	nop
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <L6470_DaisyChainCommand+0x88>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <L6470_DaisyChainCommand+0x88>)
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <L6470_DaisyChainCommand+0x88>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b13      	cmp	r3, #19
 8004066:	d9f4      	bls.n	8004052 <L6470_DaisyChainCommand+0x52>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	3301      	adds	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d9d0      	bls.n	8004016 <L6470_DaisyChainCommand+0x16>
  }
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000320 	.word	0x20000320
 8004080:	40020000 	.word	0x40020000
 8004084:	20000520 	.word	0x20000520
 8004088:	200003d6 	.word	0x200003d6

0800408c <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	6039      	str	r1, [r7, #0]
 8004096:	71fb      	strb	r3, [r7, #7]
 8004098:	4613      	mov	r3, r2
 800409a:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80040a0:	2301      	movs	r3, #1
 80040a2:	72fb      	strb	r3, [r7, #11]
 80040a4:	e015      	b.n	80040d2 <L6470_ExtractReturnedData+0x46>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 80040a6:	7afb      	ldrb	r3, [r7, #11]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	461a      	mov	r2, r3
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4413      	add	r3, r2
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	4413      	add	r3, r2
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	79ba      	ldrb	r2, [r7, #6]
 80040ba:	7afb      	ldrb	r3, [r7, #11]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 80040cc:	7afb      	ldrb	r3, [r7, #11]
 80040ce:	3301      	adds	r3, #1
 80040d0:	72fb      	strb	r3, [r7, #11]
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d9e6      	bls.n	80040a6 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 80040d8:	68fb      	ldr	r3, [r7, #12]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	460a      	mov	r2, r1
 80040f2:	71fb      	strb	r3, [r7, #7]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80040fe:	681c      	ldr	r4, [r3, #0]
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2118      	movs	r1, #24
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fb35 	bl	8003774 <L6470_GetParam>
 800410a:	4603      	mov	r3, r0
 800410c:	b29b      	uxth	r3, r3
 800410e:	8023      	strh	r3, [r4, #0]
  
  switch(L6470_StatusRegisterFlagId)
 8004110:	79bb      	ldrb	r3, [r7, #6]
 8004112:	2b0e      	cmp	r3, #14
 8004114:	f200 809a 	bhi.w	800424c <L6470_CheckStatusRegisterFlag+0x164>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <L6470_CheckStatusRegisterFlag+0x38>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	0800415d 	.word	0x0800415d
 8004124:	0800416d 	.word	0x0800416d
 8004128:	0800417d 	.word	0x0800417d
 800412c:	0800418d 	.word	0x0800418d
 8004130:	0800419d 	.word	0x0800419d
 8004134:	080041ad 	.word	0x080041ad
 8004138:	080041bd 	.word	0x080041bd
 800413c:	080041cd 	.word	0x080041cd
 8004140:	080041dd 	.word	0x080041dd
 8004144:	080041ed 	.word	0x080041ed
 8004148:	080041fd 	.word	0x080041fd
 800414c:	0800420d 	.word	0x0800420d
 8004150:	0800421d 	.word	0x0800421d
 8004154:	0800422d 	.word	0x0800422d
 8004158:	0800423d 	.word	0x0800423d
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 800415c:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	73fb      	strb	r3, [r7, #15]
    break;
 800416a:	e06f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 800416c:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	73fb      	strb	r3, [r7, #15]
    break;
 800417a:	e067      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 800417c:	4b36      	ldr	r3, [pc, #216]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	73fb      	strb	r3, [r7, #15]
    break;
 800418a:	e05f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	73fb      	strb	r3, [r7, #15]
    break;
 800419a:	e057      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	73fb      	strb	r3, [r7, #15]
    break;
 80041aa:	e04f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	73fb      	strb	r3, [r7, #15]
    break;
 80041ba:	e047      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	73fb      	strb	r3, [r7, #15]
    break;
 80041ca:	e03f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	73fb      	strb	r3, [r7, #15]
    break;
 80041da:	e037      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	73fb      	strb	r3, [r7, #15]
    break;
 80041ea:	e02f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	73fb      	strb	r3, [r7, #15]
    break;
 80041fa:	e027      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	73fb      	strb	r3, [r7, #15]
    break;
 800420a:	e01f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	73fb      	strb	r3, [r7, #15]
    break;
 800421a:	e017      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 800421c:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	73fb      	strb	r3, [r7, #15]
    break;
 800422a:	e00f      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	73fb      	strb	r3, [r7, #15]
    break;
 800423a:	e007      	b.n	800424c <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <L6470_CheckStatusRegisterFlag+0x170>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	73fb      	strb	r3, [r7, #15]
    break;
 800424a:	bf00      	nop
  }
  
  return state;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	2000009c 	.word	0x2000009c

0800425c <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	edd3 7a05 	vldr	s15, [r3, #20]
 800426c:	eeb0 0a67 	vmov.f32	s0, s15
 8004270:	f7ff f860 	bl	8003334 <Step_s2_2_Acc>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004282:	eeb0 0a67 	vmov.f32	s0, s15
 8004286:	f7ff f87b 	bl	8003380 <Step_s2_2_Dec>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	edd3 7a07 	vldr	s15, [r3, #28]
 8004298:	eeb0 0a67 	vmov.f32	s0, s15
 800429c:	f7ff f896 	bl	80033cc <Step_s_2_MaxSpeed>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80042ae:	eeb0 0a67 	vmov.f32	s0, s15
 80042b2:	f7ff f8b1 	bl	8003418 <Step_s_2_MinSpeed>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	845a      	strh	r2, [r3, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80042c4:	eeb0 0a67 	vmov.f32	s0, s15
 80042c8:	f7ff f8cc 	bl	8003464 <Step_s_2_FsSpd>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	849a      	strh	r2, [r3, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80042da:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8004588 <L6470_Config+0x32c>
 80042de:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80042f4:	793b      	ldrb	r3, [r7, #4]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004304:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8004588 <L6470_Config+0x32c>
 8004308:	ee67 6a87 	vmul.f32	s13, s15, s14
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	ed93 7a00 	vldr	s14, [r3]
 8004312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431a:	edc7 7a01 	vstr	s15, [r7, #4]
 800431e:	793b      	ldrb	r3, [r7, #4]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800432e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8004588 <L6470_Config+0x32c>
 8004332:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	ed93 7a00 	vldr	s14, [r3]
 800433c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004344:	edc7 7a01 	vstr	s15, [r7, #4]
 8004348:	793b      	ldrb	r3, [r7, #4]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004358:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004588 <L6470_Config+0x32c>
 800435c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	ed93 7a00 	vldr	s14, [r3]
 8004366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004372:	793b      	ldrb	r3, [r7, #4]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004382:	eeb0 0a67 	vmov.f32	s0, s15
 8004386:	f7ff f897 	bl	80034b8 <Step_s_2_IntSpeed>
 800438a:	4603      	mov	r3, r0
 800438c:	461a      	mov	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004398:	eeb0 0a67 	vmov.f32	s0, s15
 800439c:	f7ff f8b2 	bl	8003504 <s_Step_2_StSlp>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80043b0:	eeb0 0a67 	vmov.f32	s0, s15
 80043b4:	f7ff f8cc 	bl	8003550 <s_Step_2_FnSlpAcc>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80043c8:	eeb0 0a67 	vmov.f32	s0, s15
 80043cc:	f7ff f8e6 	bl	800359c <s_Step_2_FnSlpDec>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043ec:	eeb0 0a67 	vmov.f32	s0, s15
 80043f0:	f7ff f8fa 	bl	80035e8 <mA_2_OcdTh>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004404:	eeb0 0a67 	vmov.f32	s0, s15
 8004408:	f7ff f93e 	bl	8003688 <mA_2_StallTh>
 800440c:	4603      	mov	r3, r0
 800440e:	461a      	mov	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	86da      	strh	r2, [r3, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	7810      	ldrb	r0, [r2, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	8b92      	ldrh	r2, [r2, #28]
 8004446:	2104      	movs	r1, #4
 8004448:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	7810      	ldrb	r0, [r2, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	8bd2      	ldrh	r2, [r2, #30]
 8004458:	2105      	movs	r1, #5
 800445a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	7810      	ldrb	r0, [r2, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	8c12      	ldrh	r2, [r2, #32]
 800446a:	2106      	movs	r1, #6
 800446c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	7810      	ldrb	r0, [r2, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800447c:	2107      	movs	r1, #7
 800447e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	7810      	ldrb	r0, [r2, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800448e:	2108      	movs	r1, #8
 8004490:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	7810      	ldrb	r0, [r2, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 80044a2:	2109      	movs	r1, #9
 80044a4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	7810      	ldrb	r0, [r2, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80044b6:	210a      	movs	r1, #10
 80044b8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	7810      	ldrb	r0, [r2, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80044ca:	210b      	movs	r1, #11
 80044cc:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	7810      	ldrb	r0, [r2, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 80044de:	210c      	movs	r1, #12
 80044e0:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	7810      	ldrb	r0, [r2, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80044f0:	210d      	movs	r1, #13
 80044f2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	7810      	ldrb	r0, [r2, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004504:	210e      	movs	r1, #14
 8004506:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	7810      	ldrb	r0, [r2, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004518:	210f      	movs	r1, #15
 800451a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	7810      	ldrb	r0, [r2, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800452c:	2110      	movs	r1, #16
 800452e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	7810      	ldrb	r0, [r2, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8004540:	2111      	movs	r1, #17
 8004542:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	7810      	ldrb	r0, [r2, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8004554:	2113      	movs	r1, #19
 8004556:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	7810      	ldrb	r0, [r2, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004568:	2114      	movs	r1, #20
 800456a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	7810      	ldrb	r0, [r2, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800457c:	2115      	movs	r1, #21
 800457e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	e001      	b.n	800458c <L6470_Config+0x330>
 8004588:	43800000 	.word	0x43800000
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	7810      	ldrb	r0, [r2, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004596:	2116      	movs	r1, #22
 8004598:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	7810      	ldrb	r0, [r2, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 80045a8:	2117      	movs	r1, #23
 80045aa:	4798      	blx	r3
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <MX_DMA_Init+0x3c>)
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <MX_DMA_Init+0x3c>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <MX_DMA_Init+0x3c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2100      	movs	r1, #0
 80045da:	2010      	movs	r0, #16
 80045dc:	f7fc f8eb 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80045e0:	2010      	movs	r0, #16
 80045e2:	f7fc f904 	bl	80007ee <HAL_NVIC_EnableIRQ>

}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800

080045f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	4a3b      	ldr	r2, [pc, #236]	; (80046ec <MX_GPIO_Init+0xf8>)
 8004600:	4b3a      	ldr	r3, [pc, #232]	; (80046ec <MX_GPIO_Init+0xf8>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	f043 0304 	orr.w	r3, r3, #4
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b38      	ldr	r3, [pc, #224]	; (80046ec <MX_GPIO_Init+0xf8>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	4a34      	ldr	r2, [pc, #208]	; (80046ec <MX_GPIO_Init+0xf8>)
 800461c:	4b33      	ldr	r3, [pc, #204]	; (80046ec <MX_GPIO_Init+0xf8>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <MX_GPIO_Init+0xf8>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <MX_GPIO_Init+0xf8>)
 8004638:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <MX_GPIO_Init+0xf8>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	6313      	str	r3, [r2, #48]	; 0x30
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <MX_GPIO_Init+0xf8>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L6470_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800464e:	2200      	movs	r2, #0
 8004650:	2130      	movs	r1, #48	; 0x30
 8004652:	4827      	ldr	r0, [pc, #156]	; (80046f0 <MX_GPIO_Init+0xfc>)
 8004654:	f7fc fe3a 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8004658:	2200      	movs	r2, #0
 800465a:	2120      	movs	r1, #32
 800465c:	4825      	ldr	r0, [pc, #148]	; (80046f4 <MX_GPIO_Init+0x100>)
 800465e:	f7fc fe35 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Push_Button_Pin|L6470_BUSY_SYNC_INT_Pin|L6470_Flag_INT_Pin;
 8004662:	f242 0303 	movw	r3, #8195	; 0x2003
 8004666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <MX_GPIO_Init+0x104>)
 800466a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	4619      	mov	r1, r3
 8004676:	4821      	ldr	r0, [pc, #132]	; (80046fc <MX_GPIO_Init+0x108>)
 8004678:	f7fc fc8e 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LED_GREEN_Pin;
 800467c:	2330      	movs	r3, #48	; 0x30
 800467e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004680:	2301      	movs	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	4619      	mov	r1, r3
 8004692:	4817      	ldr	r0, [pc, #92]	; (80046f0 <MX_GPIO_Init+0xfc>)
 8004694:	f7fc fc80 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 8004698:	2320      	movs	r3, #32
 800469a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800469c:	2311      	movs	r3, #17
 800469e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	4619      	mov	r1, r3
 80046ae:	4811      	ldr	r0, [pc, #68]	; (80046f4 <MX_GPIO_Init+0x100>)
 80046b0:	f7fc fc72 	bl	8000f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80046b4:	2200      	movs	r2, #0
 80046b6:	2100      	movs	r1, #0
 80046b8:	2006      	movs	r0, #6
 80046ba:	f7fc f87c 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80046be:	2006      	movs	r0, #6
 80046c0:	f7fc f895 	bl	80007ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2100      	movs	r1, #0
 80046c8:	2007      	movs	r0, #7
 80046ca:	f7fc f874 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80046ce:	2007      	movs	r0, #7
 80046d0:	f7fc f88d 	bl	80007ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80046d4:	2200      	movs	r2, #0
 80046d6:	2100      	movs	r1, #0
 80046d8:	2028      	movs	r0, #40	; 0x28
 80046da:	f7fc f86c 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046de:	2028      	movs	r0, #40	; 0x28
 80046e0:	f7fc f885 	bl	80007ee <HAL_NVIC_EnableIRQ>

}
 80046e4:	bf00      	nop
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40020000 	.word	0x40020000
 80046f4:	40020400 	.word	0x40020400
 80046f8:	10210000 	.word	0x10210000
 80046fc:	40020800 	.word	0x40020800

08004700 <HAL_SYSTICK_Callback>:




void HAL_SYSTICK_Callback(void)
    {
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
    }
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004716:	f7fb fee5 	bl	80004e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800471a:	f000 f8ed 	bl	80048f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800471e:	f7ff ff69 	bl	80045f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004722:	f7ff ff47 	bl	80045b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004726:	f000 fdbd 	bl	80052a4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800472a:	f000 fa73 	bl	8004c14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  Motor_1_Data.motorvoltage=9.0;
 800472e:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <main+0x198>)
 8004730:	4a5e      	ldr	r2, [pc, #376]	; (80048ac <main+0x19c>)
 8004732:	601a      	str	r2, [r3, #0]
  Motor_1_Data.fullstepsperrevolution=200;
 8004734:	4b5c      	ldr	r3, [pc, #368]	; (80048a8 <main+0x198>)
 8004736:	4a5e      	ldr	r2, [pc, #376]	; (80048b0 <main+0x1a0>)
 8004738:	605a      	str	r2, [r3, #4]
  Motor_1_Data.phasecurrent=1.5;
 800473a:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <main+0x198>)
 800473c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004740:	609a      	str	r2, [r3, #8]
  Motor_1_Data.phasevoltage=3.0;
 8004742:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <main+0x198>)
 8004744:	4a5b      	ldr	r2, [pc, #364]	; (80048b4 <main+0x1a4>)
 8004746:	60da      	str	r2, [r3, #12]
  Motor_1_Data.speed=1000.0;
 8004748:	4b57      	ldr	r3, [pc, #348]	; (80048a8 <main+0x198>)
 800474a:	4a5b      	ldr	r2, [pc, #364]	; (80048b8 <main+0x1a8>)
 800474c:	611a      	str	r2, [r3, #16]
  Motor_1_Data.acc=200.0;
 800474e:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <main+0x198>)
 8004750:	4a57      	ldr	r2, [pc, #348]	; (80048b0 <main+0x1a0>)
 8004752:	615a      	str	r2, [r3, #20]
  Motor_1_Data.dec=200.0;
 8004754:	4b54      	ldr	r3, [pc, #336]	; (80048a8 <main+0x198>)
 8004756:	4a56      	ldr	r2, [pc, #344]	; (80048b0 <main+0x1a0>)
 8004758:	619a      	str	r2, [r3, #24]
  Motor_1_Data.maxspeed=1000.0;
 800475a:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <main+0x198>)
 800475c:	4a56      	ldr	r2, [pc, #344]	; (80048b8 <main+0x1a8>)
 800475e:	61da      	str	r2, [r3, #28]
  Motor_1_Data.minspeed=0.0;
 8004760:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <main+0x198>)
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	621a      	str	r2, [r3, #32]
  Motor_1_Data.fsspd=602.7;
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <main+0x198>)
 800476a:	4a54      	ldr	r2, [pc, #336]	; (80048bc <main+0x1ac>)
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
  Motor_1_Data.kvalhold=3.06;
 800476e:	4b4e      	ldr	r3, [pc, #312]	; (80048a8 <main+0x198>)
 8004770:	4a53      	ldr	r2, [pc, #332]	; (80048c0 <main+0x1b0>)
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
  Motor_1_Data.kvalrun=3.06;
 8004774:	4b4c      	ldr	r3, [pc, #304]	; (80048a8 <main+0x198>)
 8004776:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <main+0x1b0>)
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c
  Motor_1_Data.kvalacc=3.06;
 800477a:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <main+0x198>)
 800477c:	4a50      	ldr	r2, [pc, #320]	; (80048c0 <main+0x1b0>)
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  Motor_1_Data.kvaldec=3.06;
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <main+0x198>)
 8004782:	4a4f      	ldr	r2, [pc, #316]	; (80048c0 <main+0x1b0>)
 8004784:	635a      	str	r2, [r3, #52]	; 0x34
  Motor_1_Data.intspeed=61.52;
 8004786:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <main+0x198>)
 8004788:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <main+0x1b4>)
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
  Motor_1_Data.stslp=392.1569e-6;
 800478c:	4b46      	ldr	r3, [pc, #280]	; (80048a8 <main+0x198>)
 800478e:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <main+0x1b8>)
 8004790:	63da      	str	r2, [r3, #60]	; 0x3c
  Motor_1_Data.fnslpacc=643.1372e-6;
 8004792:	4b45      	ldr	r3, [pc, #276]	; (80048a8 <main+0x198>)
 8004794:	4a4d      	ldr	r2, [pc, #308]	; (80048cc <main+0x1bc>)
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
  Motor_1_Data.fnslpdec=643.1372e-6;
 8004798:	4b43      	ldr	r3, [pc, #268]	; (80048a8 <main+0x198>)
 800479a:	4a4c      	ldr	r2, [pc, #304]	; (80048cc <main+0x1bc>)
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
  Motor_1_Data.kterm=0;
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <main+0x198>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  Motor_1_Data.ocdth=1*1500*1.00;
 80047a6:	4b40      	ldr	r3, [pc, #256]	; (80048a8 <main+0x198>)
 80047a8:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <main+0x1c0>)
 80047aa:	64da      	str	r2, [r3, #76]	; 0x4c
  Motor_1_Data.stallth=650*1.00;
 80047ac:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <main+0x198>)
 80047ae:	4a49      	ldr	r2, [pc, #292]	; (80048d4 <main+0x1c4>)
 80047b0:	651a      	str	r2, [r3, #80]	; 0x50
  Motor_1_Data.step_sel=MICROSTEP_1_128;
 80047b2:	4b3d      	ldr	r3, [pc, #244]	; (80048a8 <main+0x198>)
 80047b4:	2207      	movs	r2, #7
 80047b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  Motor_1_Data.alarmen=0xFF;
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <main+0x198>)
 80047bc:	22ff      	movs	r2, #255	; 0xff
 80047be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  Motor_1_Data.config=0x2E88;
 80047c2:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <main+0x198>)
 80047c4:	f642 6288 	movw	r2, #11912	; 0x2e88
 80047c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

  L6470_DISABLE();
 80047cc:	2200      	movs	r2, #0
 80047ce:	2120      	movs	r1, #32
 80047d0:	4841      	ldr	r0, [pc, #260]	; (80048d8 <main+0x1c8>)
 80047d2:	f7fc fd7b 	bl	80012cc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80047d6:	200a      	movs	r0, #10
 80047d8:	f7fb fef6 	bl	80005c8 <HAL_Delay>
  L6470_ENABLE();
 80047dc:	2201      	movs	r2, #1
 80047de:	2120      	movs	r1, #32
 80047e0:	483d      	ldr	r0, [pc, #244]	; (80048d8 <main+0x1c8>)
 80047e2:	f7fc fd73 	bl	80012cc <HAL_GPIO_WritePin>

  L6470_ResetDevice(0);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7ff f974 	bl	8003ad4 <L6470_ResetDevice>
  L6470_GetStatus(0);
 80047ec:	2000      	movs	r0, #0
 80047ee:	f7ff fa1b 	bl	8003c28 <L6470_GetStatus>

  L6470_ResetDevice(1);
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7ff f96e 	bl	8003ad4 <L6470_ResetDevice>
  L6470_GetStatus(1);
 80047f8:	2001      	movs	r0, #1
 80047fa:	f7ff fa15 	bl	8003c28 <L6470_GetStatus>

  L6470_ResetDevice(2);
 80047fe:	2002      	movs	r0, #2
 8004800:	f7ff f968 	bl	8003ad4 <L6470_ResetDevice>
  L6470_GetStatus(2);
 8004804:	2002      	movs	r0, #2
 8004806:	f7ff fa0f 	bl	8003c28 <L6470_GetStatus>

  L6470_ResetDevice(3);
 800480a:	2003      	movs	r0, #3
 800480c:	f7ff f962 	bl	8003ad4 <L6470_ResetDevice>
  L6470_GetStatus(3);
 8004810:	2003      	movs	r0, #3
 8004812:	f7ff fa09 	bl	8003c28 <L6470_GetStatus>



  Motor_1_Handler.DaisyChainPosition=0;
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <main+0x1cc>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
  Motor_1_Handler.Command=&L6470Command;
 800481c:	4b2f      	ldr	r3, [pc, #188]	; (80048dc <main+0x1cc>)
 800481e:	4a30      	ldr	r2, [pc, #192]	; (80048e0 <main+0x1d0>)
 8004820:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_1_Handler,&Motor_1_Data);
 8004822:	4921      	ldr	r1, [pc, #132]	; (80048a8 <main+0x198>)
 8004824:	482d      	ldr	r0, [pc, #180]	; (80048dc <main+0x1cc>)
 8004826:	f7ff fd19 	bl	800425c <L6470_Config>


  Motor_2_Handler.DaisyChainPosition=1;
 800482a:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <main+0x1d4>)
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
  Motor_2_Handler.Command=&L6470Command;
 8004830:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <main+0x1d4>)
 8004832:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <main+0x1d0>)
 8004834:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_2_Handler,&Motor_1_Data);
 8004836:	491c      	ldr	r1, [pc, #112]	; (80048a8 <main+0x198>)
 8004838:	482a      	ldr	r0, [pc, #168]	; (80048e4 <main+0x1d4>)
 800483a:	f7ff fd0f 	bl	800425c <L6470_Config>

  Motor_3_Handler.DaisyChainPosition=2;
 800483e:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <main+0x1d8>)
 8004840:	2202      	movs	r2, #2
 8004842:	701a      	strb	r2, [r3, #0]
  Motor_3_Handler.Command=&L6470Command;
 8004844:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <main+0x1d8>)
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <main+0x1d0>)
 8004848:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_3_Handler,&Motor_1_Data);
 800484a:	4917      	ldr	r1, [pc, #92]	; (80048a8 <main+0x198>)
 800484c:	4826      	ldr	r0, [pc, #152]	; (80048e8 <main+0x1d8>)
 800484e:	f7ff fd05 	bl	800425c <L6470_Config>

  Motor_4_Handler.DaisyChainPosition=3;
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <main+0x1dc>)
 8004854:	2203      	movs	r2, #3
 8004856:	701a      	strb	r2, [r3, #0]
  Motor_4_Handler.Command=&L6470Command;
 8004858:	4b24      	ldr	r3, [pc, #144]	; (80048ec <main+0x1dc>)
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <main+0x1d0>)
 800485c:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_4_Handler,&Motor_1_Data);
 800485e:	4912      	ldr	r1, [pc, #72]	; (80048a8 <main+0x198>)
 8004860:	4822      	ldr	r0, [pc, #136]	; (80048ec <main+0x1dc>)
 8004862:	f7ff fcfb 	bl	800425c <L6470_Config>


  Ring_Buffer_Init(&huart2);
 8004866:	4822      	ldr	r0, [pc, #136]	; (80048f0 <main+0x1e0>)
 8004868:	f000 f91c 	bl	8004aa4 <Ring_Buffer_Init>

	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	UART_Loop();
 800486c:	f000 fb32 	bl	8004ed4 <UART_Loop>

	if (HAL_GPIO_ReadPin(L6470_Flag_INT_GPIO_Port, L6470_Flag_INT_Pin)
 8004870:	2102      	movs	r1, #2
 8004872:	4820      	ldr	r0, [pc, #128]	; (80048f4 <main+0x1e4>)
 8004874:	f7fc fd12 	bl	800129c <HAL_GPIO_ReadPin>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f6      	bne.n	800486c <main+0x15c>
		== GPIO_PIN_RESET)
	    {
	    uint16_t status_register_0 = L6470_GetStatus(0);
 800487e:	2000      	movs	r0, #0
 8004880:	f7ff f9d2 	bl	8003c28 <L6470_GetStatus>
 8004884:	4603      	mov	r3, r0
 8004886:	80fb      	strh	r3, [r7, #6]
	    uint16_t status_register_1 = L6470_GetStatus(1);
 8004888:	2001      	movs	r0, #1
 800488a:	f7ff f9cd 	bl	8003c28 <L6470_GetStatus>
 800488e:	4603      	mov	r3, r0
 8004890:	80bb      	strh	r3, [r7, #4]
	    uint16_t status_register_2 = L6470_GetStatus(2);
 8004892:	2002      	movs	r0, #2
 8004894:	f7ff f9c8 	bl	8003c28 <L6470_GetStatus>
 8004898:	4603      	mov	r3, r0
 800489a:	807b      	strh	r3, [r7, #2]
	    uint16_t status_register_3 = L6470_GetStatus(3);
 800489c:	2003      	movs	r0, #3
 800489e:	f7ff f9c3 	bl	8003c28 <L6470_GetStatus>
 80048a2:	4603      	mov	r3, r0
 80048a4:	803b      	strh	r3, [r7, #0]
	{
 80048a6:	e7e1      	b.n	800486c <main+0x15c>
 80048a8:	200003d8 	.word	0x200003d8
 80048ac:	41100000 	.word	0x41100000
 80048b0:	43480000 	.word	0x43480000
 80048b4:	40400000 	.word	0x40400000
 80048b8:	447a0000 	.word	0x447a0000
 80048bc:	4416accd 	.word	0x4416accd
 80048c0:	4043d70a 	.word	0x4043d70a
 80048c4:	4276147b 	.word	0x4276147b
 80048c8:	39cd9a68 	.word	0x39cd9a68
 80048cc:	3a289835 	.word	0x3a289835
 80048d0:	44bb8000 	.word	0x44bb8000
 80048d4:	44228000 	.word	0x44228000
 80048d8:	40020400 	.word	0x40020400
 80048dc:	200004e4 	.word	0x200004e4
 80048e0:	20000008 	.word	0x20000008
 80048e4:	200004a8 	.word	0x200004a8
 80048e8:	20000430 	.word	0x20000430
 80048ec:	2000046c 	.word	0x2000046c
 80048f0:	200005d8 	.word	0x200005d8
 80048f4:	40020800 	.word	0x40020800

080048f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b094      	sub	sp, #80	; 0x50
 80048fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <SystemClock_Config+0xe0>)
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <SystemClock_Config+0xe0>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <SystemClock_Config+0xe0>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <SystemClock_Config+0xe4>)
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <SystemClock_Config+0xe4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <SystemClock_Config+0xe4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800493a:	2302      	movs	r3, #2
 800493c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800493e:	2301      	movs	r3, #1
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004942:	2310      	movs	r3, #16
 8004944:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004946:	2302      	movs	r3, #2
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800494a:	2300      	movs	r3, #0
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800494e:	2308      	movs	r3, #8
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8004952:	2354      	movs	r3, #84	; 0x54
 8004954:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004956:	2302      	movs	r3, #2
 8004958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800495a:	2307      	movs	r3, #7
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800495e:	f107 0320 	add.w	r3, r7, #32
 8004962:	4618      	mov	r0, r3
 8004964:	f7fc fce4 	bl	8001330 <HAL_RCC_OscConfig>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800496e:	21f6      	movs	r1, #246	; 0xf6
 8004970:	481b      	ldr	r0, [pc, #108]	; (80049e0 <SystemClock_Config+0xe8>)
 8004972:	f000 f890 	bl	8004a96 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004976:	230f      	movs	r3, #15
 8004978:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800497a:	2302      	movs	r3, #2
 800497c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004986:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc ff0e 	bl	80017b4 <HAL_RCC_ClockConfig>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800499e:	f44f 7182 	mov.w	r1, #260	; 0x104
 80049a2:	480f      	ldr	r0, [pc, #60]	; (80049e0 <SystemClock_Config+0xe8>)
 80049a4:	f000 f877 	bl	8004a96 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80049a8:	f7fd f8be 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <SystemClock_Config+0xec>)
 80049b0:	fba3 2302 	umull	r2, r3, r3, r2
 80049b4:	099b      	lsrs	r3, r3, #6
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fb ff27 	bl	800080a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80049bc:	2004      	movs	r0, #4
 80049be:	f7fb ff31 	bl	8000824 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ca:	f7fb fef4 	bl	80007b6 <HAL_NVIC_SetPriority>
}
 80049ce:	bf00      	nop
 80049d0:	3750      	adds	r7, #80	; 0x50
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40007000 	.word	0x40007000
 80049e0:	08005610 	.word	0x08005610
 80049e4:	10624dd3 	.word	0x10624dd3

080049e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
	    L6470_HardStop(3);
	    }

	}
    */
    if (GPIO_Pin == L6470_Flag_INT_Pin)
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d14a      	bne.n	8004a8e <HAL_GPIO_EXTI_Callback+0xa6>
	{
	uint16_t status_register_0 = L6470_GetStatus(0);
 80049f8:	2000      	movs	r0, #0
 80049fa:	f7ff f915 	bl	8003c28 <L6470_GetStatus>
 80049fe:	4603      	mov	r3, r0
 8004a00:	82bb      	strh	r3, [r7, #20]
	uint16_t status_register_1 = L6470_GetStatus(1);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f7ff f910 	bl	8003c28 <L6470_GetStatus>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	827b      	strh	r3, [r7, #18]
	uint16_t status_register_2 = L6470_GetStatus(2);
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	f7ff f90b 	bl	8003c28 <L6470_GetStatus>
 8004a12:	4603      	mov	r3, r0
 8004a14:	823b      	strh	r3, [r7, #16]
	uint16_t status_register_3 = L6470_GetStatus(3);
 8004a16:	2003      	movs	r0, #3
 8004a18:	f7ff f906 	bl	8003c28 <L6470_GetStatus>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	81fb      	strh	r3, [r7, #14]

	uint8_t perform_action = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]

	if ((status_register_0 & STATUS_SW_EVN))
 8004a24:	8abb      	ldrh	r3, [r7, #20]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d006      	beq.n	8004a3c <HAL_GPIO_EXTI_Callback+0x54>
	    {
	    perform_action = 1;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(0, L6470_ACT_RST_ID, L6470_DIR_REV_ID);
 8004a32:	2200      	movs	r2, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7ff f9ee 	bl	8003e18 <L6470_PrepareReleaseSW>
	    }
	if ((status_register_1 & STATUS_SW_EVN))
 8004a3c:	8a7b      	ldrh	r3, [r7, #18]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_GPIO_EXTI_Callback+0x6c>
	    {
	    perform_action = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(1, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7ff f9e2 	bl	8003e18 <L6470_PrepareReleaseSW>
	    }
	if ((status_register_2 & STATUS_SW_EVN))
 8004a54:	8a3b      	ldrh	r3, [r7, #16]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_EXTI_Callback+0x84>
	    {
	    perform_action = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(2, L6470_ACT_RST_ID, L6470_DIR_REV_ID);
 8004a62:	2200      	movs	r2, #0
 8004a64:	2100      	movs	r1, #0
 8004a66:	2002      	movs	r0, #2
 8004a68:	f7ff f9d6 	bl	8003e18 <L6470_PrepareReleaseSW>
	    }
	if ((status_register_3 & STATUS_SW_EVN))
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <HAL_GPIO_EXTI_Callback+0x9c>
	    {
	    perform_action = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(3, L6470_ACT_RST_ID, L6470_DIR_REV_ID);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2003      	movs	r0, #3
 8004a80:	f7ff f9ca 	bl	8003e18 <L6470_PrepareReleaseSW>
	    }

	if (perform_action)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_GPIO_EXTI_Callback+0xa6>
	    {
	    L6470_PerformPreparedApplicationCommand();
 8004a8a:	f7ff faa5 	bl	8003fd8 <L6470_PerformPreparedApplicationCommand>
	    }

	}

    }
 8004a8e:	bf00      	nop
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8004aa0:	e7fe      	b.n	8004aa0 <_Error_Handler+0xa>
	...

08004aa4 <Ring_Buffer_Init>:
static uint32_t Read_PTR;

#define WRITE_PTR (uint32_t)( BUFFER_SIZE - (huart->hdmarx->Instance->NDTR))

void Ring_Buffer_Init(UART_HandleTypeDef *_huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	huart = _huart;
 8004aac:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <Ring_Buffer_Init+0x38>)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6013      	str	r3, [r2, #0]
	huart->hdmarx->Instance->NDTR = BUFFER_SIZE;
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <Ring_Buffer_Init+0x38>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	605a      	str	r2, [r3, #4]
	Read_PTR = 0;
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <Ring_Buffer_Init+0x3c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, RX_DMA_Buffer, BUFFER_SIZE);
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <Ring_Buffer_Init+0x38>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2240      	movs	r2, #64	; 0x40
 8004aca:	4906      	ldr	r1, [pc, #24]	; (8004ae4 <Ring_Buffer_Init+0x40>)
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fd fbcd 	bl	800226c <HAL_UART_Receive_DMA>

}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000364 	.word	0x20000364
 8004ae0:	20000368 	.word	0x20000368
 8004ae4:	20000324 	.word	0x20000324

08004ae8 <Ring_Buffer_Get_Char>:

	return (Read_PTR == WRITE_PTR)?1:0;
}

uint8_t Ring_Buffer_Get_Char(uint8_t* data)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Read_PTR)
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <Ring_Buffer_Get_Char+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <Ring_Buffer_Get_Char+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d101      	bne.n	8004b0a <Ring_Buffer_Get_Char+0x22>
	{
		return 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e012      	b.n	8004b30 <Ring_Buffer_Get_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Read_PTR];
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <Ring_Buffer_Get_Char+0x58>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <Ring_Buffer_Get_Char+0x5c>)
 8004b10:	5cd2      	ldrb	r2, [r2, r3]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	701a      	strb	r2, [r3, #0]

		Read_PTR++;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <Ring_Buffer_Get_Char+0x58>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <Ring_Buffer_Get_Char+0x58>)
 8004b1e:	6013      	str	r3, [r2, #0]

		if (Read_PTR == BUFFER_SIZE)
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <Ring_Buffer_Get_Char+0x58>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d102      	bne.n	8004b2e <Ring_Buffer_Get_Char+0x46>
		{
			Read_PTR = 0;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <Ring_Buffer_Get_Char+0x58>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
		}

		return 1;
 8004b2e:	2301      	movs	r3, #1
	}
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000364 	.word	0x20000364
 8004b40:	20000368 	.word	0x20000368
 8004b44:	20000324 	.word	0x20000324

08004b48 <Ring_Buffer_Check_Char>:


static uint32_t Check_PTR = 0;

uint8_t Ring_Buffer_Check_Char(uint8_t* data)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Check_PTR)
 8004b50:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <Ring_Buffer_Check_Char+0x54>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <Ring_Buffer_Check_Char+0x58>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d101      	bne.n	8004b6a <Ring_Buffer_Check_Char+0x22>
	{
		return 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e012      	b.n	8004b90 <Ring_Buffer_Check_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Check_PTR];
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <Ring_Buffer_Check_Char+0x58>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <Ring_Buffer_Check_Char+0x5c>)
 8004b70:	5cd2      	ldrb	r2, [r2, r3]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	701a      	strb	r2, [r3, #0]

		Check_PTR++;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <Ring_Buffer_Check_Char+0x58>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <Ring_Buffer_Check_Char+0x58>)
 8004b7e:	6013      	str	r3, [r2, #0]

		if (Check_PTR == BUFFER_SIZE)
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <Ring_Buffer_Check_Char+0x58>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d102      	bne.n	8004b8e <Ring_Buffer_Check_Char+0x46>
		{
		    Check_PTR = 0;
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <Ring_Buffer_Check_Char+0x58>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
		}

		return 1;
 8004b8e:	2301      	movs	r3, #1
	}
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000364 	.word	0x20000364
 8004ba0:	2000036c 	.word	0x2000036c
 8004ba4:	20000324 	.word	0x20000324

08004ba8 <Ring_Buffer_Check_Count>:


uint8_t Ring_Buffer_Check_Count(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
	if (WRITE_PTR >= Check_PTR)
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <Ring_Buffer_Check_Count+0x64>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <Ring_Buffer_Check_Count+0x68>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d30f      	bcc.n	8004be2 <Ring_Buffer_Check_Count+0x3a>
	{
		return (WRITE_PTR - Check_PTR);
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <Ring_Buffer_Check_Count+0x64>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	425b      	negs	r3, r3
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <Ring_Buffer_Check_Count+0x68>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3340      	adds	r3, #64	; 0x40
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e00e      	b.n	8004c00 <Ring_Buffer_Check_Count+0x58>
	}
	return (BUFFER_SIZE - (Check_PTR - WRITE_PTR));
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <Ring_Buffer_Check_Count+0x64>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <Ring_Buffer_Check_Count+0x68>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	b2db      	uxtb	r3, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000364 	.word	0x20000364
 8004c10:	2000036c 	.word	0x2000036c

08004c14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c1a:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <MX_SPI1_Init+0x6c>)
 8004c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c2c:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c34:	2202      	movs	r2, #2
 8004c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c48:	2218      	movs	r2, #24
 8004c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c60:	220a      	movs	r2, #10
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c64:	4805      	ldr	r0, [pc, #20]	; (8004c7c <MX_SPI1_Init+0x68>)
 8004c66:	f7fc ff93 	bl	8001b90 <HAL_SPI_Init>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004c70:	2145      	movs	r1, #69	; 0x45
 8004c72:	4804      	ldr	r0, [pc, #16]	; (8004c84 <MX_SPI1_Init+0x70>)
 8004c74:	f7ff ff0f 	bl	8004a96 <_Error_Handler>
  }

}
 8004c78:	bf00      	nop
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000520 	.word	0x20000520
 8004c80:	40013000 	.word	0x40013000
 8004c84:	08005620 	.word	0x08005620

08004c88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <HAL_SPI_MspInit+0x78>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d12d      	bne.n	8004cf6 <HAL_SPI_MspInit+0x6e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <HAL_SPI_MspInit+0x7c>)
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <HAL_SPI_MspInit+0x7c>)
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8004caa:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <HAL_SPI_MspInit+0x7c>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cb6:	23c0      	movs	r3, #192	; 0xc0
 8004cb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cc6:	2305      	movs	r3, #5
 8004cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cca:	f107 030c 	add.w	r3, r7, #12
 8004cce:	4619      	mov	r1, r3
 8004cd0:	480d      	ldr	r0, [pc, #52]	; (8004d08 <HAL_SPI_MspInit+0x80>)
 8004cd2:	f7fc f961 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ce6:	2305      	movs	r3, #5
 8004ce8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cea:	f107 030c 	add.w	r3, r7, #12
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4806      	ldr	r0, [pc, #24]	; (8004d0c <HAL_SPI_MspInit+0x84>)
 8004cf2:	f7fc f951 	bl	8000f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40013000 	.word	0x40013000
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40020000 	.word	0x40020000
 8004d0c:	40020400 	.word	0x40020400

08004d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <HAL_MspInit+0xa0>)
 8004d1c:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <HAL_MspInit+0xa0>)
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d24:	6453      	str	r3, [r2, #68]	; 0x44
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <HAL_MspInit+0xa0>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <HAL_MspInit+0xa0>)
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_MspInit+0xa0>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_MspInit+0xa0>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004d4e:	2007      	movs	r0, #7
 8004d50:	f7fb fd26 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004d54:	2200      	movs	r2, #0
 8004d56:	2100      	movs	r1, #0
 8004d58:	f06f 000b 	mvn.w	r0, #11
 8004d5c:	f7fb fd2b 	bl	80007b6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	f06f 000a 	mvn.w	r0, #10
 8004d68:	f7fb fd25 	bl	80007b6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2100      	movs	r1, #0
 8004d70:	f06f 0009 	mvn.w	r0, #9
 8004d74:	f7fb fd1f 	bl	80007b6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	f06f 0004 	mvn.w	r0, #4
 8004d80:	f7fb fd19 	bl	80007b6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004d84:	2200      	movs	r2, #0
 8004d86:	2100      	movs	r1, #0
 8004d88:	f06f 0003 	mvn.w	r0, #3
 8004d8c:	f7fb fd13 	bl	80007b6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2100      	movs	r1, #0
 8004d94:	f06f 0001 	mvn.w	r0, #1
 8004d98:	f7fb fd0d 	bl	80007b6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004da4:	f7fb fd07 	bl	80007b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800

08004db4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc6:	e7fe      	b.n	8004dc6 <HardFault_Handler+0x4>

08004dc8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dcc:	e7fe      	b.n	8004dcc <MemManage_Handler+0x4>

08004dce <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd2:	e7fe      	b.n	8004dd2 <BusFault_Handler+0x4>

08004dd4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dd8:	e7fe      	b.n	8004dd8 <UsageFault_Handler+0x4>

08004dda <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e08:	f7fb fbbe 	bl	8000588 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004e0c:	f7fb fd26 	bl	800085c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f7fc fa71 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004e26:	2002      	movs	r0, #2
 8004e28:	f7fc fa6a 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e34:	4802      	ldr	r0, [pc, #8]	; (8004e40 <DMA1_Stream5_IRQHandler+0x10>)
 8004e36:	f7fb fe47 	bl	8000ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000578 	.word	0x20000578

08004e44 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e48:	4802      	ldr	r0, [pc, #8]	; (8004e54 <USART2_IRQHandler+0x10>)
 8004e4a:	f7fd fa8f 	bl	800236c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200005d8 	.word	0x200005d8

08004e58 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004e5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e60:	f7fc fa4e 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e64:	bf00      	nop
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <SystemInit+0x60>)
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <SystemInit+0x60>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <SystemInit+0x64>)
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <SystemInit+0x64>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <SystemInit+0x64>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ecc <SystemInit+0x64>)
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <SystemInit+0x64>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <SystemInit+0x64>)
 8004ea0:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <SystemInit+0x68>)
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ea4:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <SystemInit+0x64>)
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <SystemInit+0x64>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <SystemInit+0x64>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004eb6:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <SystemInit+0x60>)
 8004eb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ebc:	609a      	str	r2, [r3, #8]
#endif
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000ed00 	.word	0xe000ed00
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	24003010 	.word	0x24003010

08004ed4 <UART_Loop>:
#define G_CODE_INDEX 4

extern UART_HandleTypeDef huart2;

void UART_Loop()
    {
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b093      	sub	sp, #76	; 0x4c
 8004ed8:	af00      	add	r7, sp, #0

    uint8_t str_to_int[15] ={0};
 8004eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	609a      	str	r2, [r3, #8]
 8004ee6:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t cmd_rcv_flag[NO_OF_INDEX] ={0}; // command received for this axis
 8004eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	711a      	strb	r2, [r3, #4]
    uint8_t arg_rcv_flag[NO_OF_INDEX] ={0}; // argument received for this axis
 8004ef4:	f107 0320 	add.w	r3, r7, #32
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	711a      	strb	r2, [r3, #4]
    uint8_t motor_dir[4] ={0};
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
    uint8_t code_id = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t rx_digit_cnt = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint8_t rx_byte = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	76fb      	strb	r3, [r7, #27]
    uint8_t command_valid = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint32_t rx_value[5] ={0}; // x,y,z,m and gcode
 8004f18:	1d3b      	adds	r3, r7, #4
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	611a      	str	r2, [r3, #16]

    if (Ring_Buffer_Check_Count() > 0)
 8004f26:	f7ff fe3f 	bl	8004ba8 <Ring_Buffer_Check_Count>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 81ad 	beq.w	800528c <UART_Loop+0x3b8>
	{

	uint8_t check_char ;
	Ring_Buffer_Check_Char(&check_char);
 8004f32:	1cfb      	adds	r3, r7, #3
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fe07 	bl	8004b48 <Ring_Buffer_Check_Char>

	if (check_char == '\n') // complete command received
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	2b0a      	cmp	r3, #10
 8004f3e:	f040 81a5 	bne.w	800528c <UART_Loop+0x3b8>

	    {

	    uint8_t while_loop_timeout_1 = 128; //equal to ring buffer size
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	    while (rx_byte != '\r' && --while_loop_timeout_1)
 8004f48:	e0db      	b.n	8005102 <UART_Loop+0x22e>
		{

		SCAN_AXIS:

		Ring_Buffer_Get_Char(&rx_byte);
 8004f4a:	f107 031b 	add.w	r3, r7, #27
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fdca 	bl	8004ae8 <Ring_Buffer_Get_Char>

		if (rx_byte == 'X' || rx_byte == 'x')
 8004f54:	7efb      	ldrb	r3, [r7, #27]
 8004f56:	2b58      	cmp	r3, #88	; 0x58
 8004f58:	d002      	beq.n	8004f60 <UART_Loop+0x8c>
 8004f5a:	7efb      	ldrb	r3, [r7, #27]
 8004f5c:	2b78      	cmp	r3, #120	; 0x78
 8004f5e:	d106      	bne.n	8004f6e <UART_Loop+0x9a>
		    {
		    code_id = X_AXIS_INDEX;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		    cmd_rcv_flag[X_AXIS_INDEX] = 1;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		    goto PARSE_ARGUMENT;
 8004f6c:	e034      	b.n	8004fd8 <UART_Loop+0x104>
		    }
		else if (rx_byte == 'Y' || rx_byte == 'y')
 8004f6e:	7efb      	ldrb	r3, [r7, #27]
 8004f70:	2b59      	cmp	r3, #89	; 0x59
 8004f72:	d002      	beq.n	8004f7a <UART_Loop+0xa6>
 8004f74:	7efb      	ldrb	r3, [r7, #27]
 8004f76:	2b79      	cmp	r3, #121	; 0x79
 8004f78:	d106      	bne.n	8004f88 <UART_Loop+0xb4>
		    {
		    code_id = Y_AXIS_INDEX;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		    cmd_rcv_flag[Y_AXIS_INDEX] = 1;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		    goto PARSE_ARGUMENT;
 8004f86:	e027      	b.n	8004fd8 <UART_Loop+0x104>
		    }
		else if (rx_byte == 'Z' || rx_byte == 'z')
 8004f88:	7efb      	ldrb	r3, [r7, #27]
 8004f8a:	2b5a      	cmp	r3, #90	; 0x5a
 8004f8c:	d002      	beq.n	8004f94 <UART_Loop+0xc0>
 8004f8e:	7efb      	ldrb	r3, [r7, #27]
 8004f90:	2b7a      	cmp	r3, #122	; 0x7a
 8004f92:	d106      	bne.n	8004fa2 <UART_Loop+0xce>
		    {
		    code_id = Z_AXIS_INDEX;
 8004f94:	2302      	movs	r3, #2
 8004f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		    cmd_rcv_flag[Z_AXIS_INDEX] = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		    goto PARSE_ARGUMENT;
 8004fa0:	e01a      	b.n	8004fd8 <UART_Loop+0x104>
		    }
		else if (rx_byte == 'M' || rx_byte == 'm')
 8004fa2:	7efb      	ldrb	r3, [r7, #27]
 8004fa4:	2b4d      	cmp	r3, #77	; 0x4d
 8004fa6:	d002      	beq.n	8004fae <UART_Loop+0xda>
 8004fa8:	7efb      	ldrb	r3, [r7, #27]
 8004faa:	2b6d      	cmp	r3, #109	; 0x6d
 8004fac:	d106      	bne.n	8004fbc <UART_Loop+0xe8>
		    {
		    code_id = M_AXIS_INDEX;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		    cmd_rcv_flag[M_AXIS_INDEX] = 1;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		    goto PARSE_ARGUMENT;
 8004fba:	e00d      	b.n	8004fd8 <UART_Loop+0x104>
		    }
		else if (rx_byte == 'G' || rx_byte == 'g')
 8004fbc:	7efb      	ldrb	r3, [r7, #27]
 8004fbe:	2b47      	cmp	r3, #71	; 0x47
 8004fc0:	d003      	beq.n	8004fca <UART_Loop+0xf6>
 8004fc2:	7efb      	ldrb	r3, [r7, #27]
 8004fc4:	2b67      	cmp	r3, #103	; 0x67
 8004fc6:	f040 809c 	bne.w	8005102 <UART_Loop+0x22e>
		    {
		    code_id = G_CODE_INDEX;
 8004fca:	2304      	movs	r3, #4
 8004fcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		    cmd_rcv_flag[G_CODE_INDEX] = 1;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		    goto PARSE_ARGUMENT;
 8004fd6:	bf00      	nop
		    }

		/**********************************PARSE_ARGUMENT******************************/
		PARSE_ARGUMENT:

		Ring_Buffer_Get_Char(&rx_byte);
 8004fd8:	f107 031b 	add.w	r3, r7, #27
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fd83 	bl	8004ae8 <Ring_Buffer_Get_Char>

		if (rx_byte == ' ') //if space
		    {
		    //rx_byte = Ring_Buffer_Get_Char(); //Ignore space
		    }
		if (rx_byte == '-') //if minus
 8004fe2:	7efb      	ldrb	r3, [r7, #27]
 8004fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8004fe6:	d114      	bne.n	8005012 <UART_Loop+0x13e>
		    {
		    if (code_id == G_CODE_INDEX) // G was detected
 8004fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d103      	bne.n	8004ff8 <UART_Loop+0x124>
			{
			command_valid = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8004ff6:	e00c      	b.n	8005012 <UART_Loop+0x13e>
			}
		    else
			{
			motor_dir[code_id] = L6470_DIR_FWD_ID; // L6470_DIR_REV_ID at reset
 8004ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ffc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005000:	4413      	add	r3, r2
 8005002:	2201      	movs	r2, #1
 8005004:	f803 2c2c 	strb.w	r2, [r3, #-44]
			Ring_Buffer_Get_Char(&rx_byte);
 8005008:	f107 031b 	add.w	r3, r7, #27
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fd6b 	bl	8004ae8 <Ring_Buffer_Get_Char>
			}
		    }

		rx_digit_cnt = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		uint8_t while_loop_timeout_2 = 128; //equal to ring bugger size
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (rx_byte != '\r' && --while_loop_timeout_2)
 800501e:	e064      	b.n	80050ea <UART_Loop+0x216>
		    {

		    if (rx_byte >= '0' && rx_byte <= '9') //if number
 8005020:	7efb      	ldrb	r3, [r7, #27]
 8005022:	2b2f      	cmp	r3, #47	; 0x2f
 8005024:	d90e      	bls.n	8005044 <UART_Loop+0x170>
 8005026:	7efb      	ldrb	r3, [r7, #27]
 8005028:	2b39      	cmp	r3, #57	; 0x39
 800502a:	d80b      	bhi.n	8005044 <UART_Loop+0x170>
			{
			str_to_int[rx_digit_cnt++] = rx_byte;
 800502c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
 8005036:	7efa      	ldrb	r2, [r7, #27]
 8005038:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800503c:	440b      	add	r3, r1
 800503e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8005042:	e028      	b.n	8005096 <UART_Loop+0x1c2>
			}
		    else if (rx_byte == ' ') // space found - scan for next axis
 8005044:	7efb      	ldrb	r3, [r7, #27]
 8005046:	2b20      	cmp	r3, #32
 8005048:	d122      	bne.n	8005090 <UART_Loop+0x1bc>
			{
			str_to_int[rx_digit_cnt++] = '\0'; // close string
 800504a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
 8005054:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005058:	4413      	add	r3, r2
 800505a:	2200      	movs	r2, #0
 800505c:	f803 2c18 	strb.w	r2, [r3, #-24]
			rx_value[code_id] = atoi((char*) str_to_int);
 8005060:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8005064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005068:	4618      	mov	r0, r3
 800506a:	f000 f9e4 	bl	8005436 <atoi>
 800506e:	4603      	mov	r3, r0
 8005070:	461a      	mov	r2, r3
 8005072:	00a3      	lsls	r3, r4, #2
 8005074:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005078:	440b      	add	r3, r1
 800507a:	f843 2c44 	str.w	r2, [r3, #-68]
			arg_rcv_flag[code_id] = 1;
 800507e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005082:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005086:	4413      	add	r3, r2
 8005088:	2201      	movs	r2, #1
 800508a:	f803 2c28 	strb.w	r2, [r3, #-40]
			goto SCAN_AXIS;
 800508e:	e75c      	b.n	8004f4a <UART_Loop+0x76>
			}
		    else
			{
			command_valid = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			}

		    Ring_Buffer_Get_Char(&rx_byte);
 8005096:	f107 031b 	add.w	r3, r7, #27
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fd24 	bl	8004ae8 <Ring_Buffer_Get_Char>

		    if (rx_byte == '\r')
 80050a0:	7efb      	ldrb	r3, [r7, #27]
 80050a2:	2b0d      	cmp	r3, #13
 80050a4:	d121      	bne.n	80050ea <UART_Loop+0x216>
			{
			str_to_int[rx_digit_cnt++] = '\0'; // close string
 80050a6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
 80050b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050b4:	4413      	add	r3, r2
 80050b6:	2200      	movs	r2, #0
 80050b8:	f803 2c18 	strb.w	r2, [r3, #-24]
			rx_value[code_id] = atoi((char*) str_to_int);
 80050bc:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80050c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 f9b6 	bl	8005436 <atoi>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	00a3      	lsls	r3, r4, #2
 80050d0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80050d4:	440b      	add	r3, r1
 80050d6:	f843 2c44 	str.w	r2, [r3, #-68]
			arg_rcv_flag[code_id] = 1;
 80050da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80050e2:	4413      	add	r3, r2
 80050e4:	2201      	movs	r2, #1
 80050e6:	f803 2c28 	strb.w	r2, [r3, #-40]
		while (rx_byte != '\r' && --while_loop_timeout_2)
 80050ea:	7efb      	ldrb	r3, [r7, #27]
 80050ec:	2b0d      	cmp	r3, #13
 80050ee:	d008      	beq.n	8005102 <UART_Loop+0x22e>
 80050f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050f4:	3b01      	subs	r3, #1
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d18e      	bne.n	8005020 <UART_Loop+0x14c>
	    while (rx_byte != '\r' && --while_loop_timeout_1)
 8005102:	7efb      	ldrb	r3, [r7, #27]
 8005104:	2b0d      	cmp	r3, #13
 8005106:	d009      	beq.n	800511c <UART_Loop+0x248>
 8005108:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800510c:	3b01      	subs	r3, #1
 800510e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8005112:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005116:	2b00      	cmp	r3, #0
 8005118:	f47f af17 	bne.w	8004f4a <UART_Loop+0x76>
		}
	    /**********************************PARSE_ARGUMENT******************************/

	    /***********command received without argument**********/

	     uint8_t arg_received = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	     for (uint8_t i = 0; i < NO_OF_INDEX; i++)
 8005122:	2300      	movs	r3, #0
 8005124:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005128:	e01e      	b.n	8005168 <UART_Loop+0x294>
	     {
	     if (cmd_rcv_flag[i])//command received
 800512a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800512e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005132:	4413      	add	r3, r2
 8005134:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <UART_Loop+0x28a>
	     {
	     arg_received++;
 800513c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005140:	3301      	adds	r3, #1
 8005142:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	     if (arg_rcv_flag[i] == 0)//argument not received
 8005146:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800514a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800514e:	4413      	add	r3, r2
 8005150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <UART_Loop+0x28a>
	     {
	     command_valid = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	     for (uint8_t i = 0; i < NO_OF_INDEX; i++)
 800515e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005162:	3301      	adds	r3, #1
 8005164:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005168:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800516c:	2b04      	cmp	r3, #4
 800516e:	d9dc      	bls.n	800512a <UART_Loop+0x256>
	     }
	     }
	     }
	     if(arg_received < 2)//at least two argument  g+arg  x,y,z or m+arg
 8005170:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005174:	2b01      	cmp	r3, #1
 8005176:	d802      	bhi.n	800517e <UART_Loop+0x2aa>
	     {
	     command_valid = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	     }

	    /***********command received without argument**********/

	    if (command_valid == 1)
 800517e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005182:	2b01      	cmp	r3, #1
 8005184:	d17c      	bne.n	8005280 <UART_Loop+0x3ac>
		{

		switch (rx_value[G_CODE_INDEX])
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d004      	beq.n	8005196 <UART_Loop+0x2c2>
 800518c:	2b01      	cmp	r3, #1
 800518e:	d36b      	bcc.n	8005268 <UART_Loop+0x394>
 8005190:	2b1c      	cmp	r3, #28
 8005192:	d02b      	beq.n	80051ec <UART_Loop+0x318>
 8005194:	e06d      	b.n	8005272 <UART_Loop+0x39e>
		    //g code number
		    {
		case 1: //g1
		    {

		    L6470_PrepareMove(X_AXIS_INDEX, motor_dir[X_AXIS_INDEX],
 8005196:	7f3b      	ldrb	r3, [r7, #28]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4619      	mov	r1, r3
 800519c:	2000      	movs	r0, #0
 800519e:	f7fe fdd5 	bl	8003d4c <L6470_PrepareMove>
			    rx_value[X_AXIS_INDEX]);

		    L6470_PrepareMove(Y_AXIS_INDEX, motor_dir[Y_AXIS_INDEX],
 80051a2:	7f7b      	ldrb	r3, [r7, #29]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	4619      	mov	r1, r3
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7fe fdcf 	bl	8003d4c <L6470_PrepareMove>
			    rx_value[Y_AXIS_INDEX]);

		    L6470_PrepareMove(Z_AXIS_INDEX, motor_dir[Z_AXIS_INDEX],
 80051ae:	7fbb      	ldrb	r3, [r7, #30]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4619      	mov	r1, r3
 80051b4:	2002      	movs	r0, #2
 80051b6:	f7fe fdc9 	bl	8003d4c <L6470_PrepareMove>
			    rx_value[Z_AXIS_INDEX]);

		    L6470_PrepareMove(M_AXIS_INDEX, motor_dir[M_AXIS_INDEX],
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4619      	mov	r1, r3
 80051c0:	2003      	movs	r0, #3
 80051c2:	f7fe fdc3 	bl	8003d4c <L6470_PrepareMove>
			    rx_value[M_AXIS_INDEX]);

		    if (cmd_rcv_flag[0] | cmd_rcv_flag[1] | cmd_rcv_flag[2]
 80051c6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80051ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051d6:	4313      	orrs	r3, r2
 80051d8:	b2da      	uxtb	r2, r3
			    | cmd_rcv_flag[3])
 80051da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
		    if (cmd_rcv_flag[0] | cmd_rcv_flag[1] | cmd_rcv_flag[2]
 80051de:	4313      	orrs	r3, r2
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d042      	beq.n	800526c <UART_Loop+0x398>
			{
			L6470_PerformPreparedApplicationCommand();
 80051e6:	f7fe fef7 	bl	8003fd8 <L6470_PerformPreparedApplicationCommand>
			}

		    }
		    break;
 80051ea:	e03f      	b.n	800526c <UART_Loop+0x398>

		    }
		    break;
		case 28: //g28 homing
		    {
		    uint8_t perform_action = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		    if (cmd_rcv_flag[X_AXIS_INDEX])
 80051f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <UART_Loop+0x338>
			{
			perform_action = 1;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			L6470_PrepareGoUntil(X_AXIS_INDEX, L6470_ACT_RST_ID,
 8005200:	4b24      	ldr	r3, [pc, #144]	; (8005294 <UART_Loop+0x3c0>)
 8005202:	2201      	movs	r2, #1
 8005204:	2100      	movs	r1, #0
 8005206:	2000      	movs	r0, #0
 8005208:	f7fe fdea 	bl	8003de0 <L6470_PrepareGoUntil>
				L6470_DIR_FWD_ID, 200000);
			}
		    if (cmd_rcv_flag[Y_AXIS_INDEX])
 800520c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <UART_Loop+0x352>
			{
			perform_action = 1;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			L6470_PrepareGoUntil(Y_AXIS_INDEX, L6470_ACT_RST_ID,
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <UART_Loop+0x3c0>)
 800521c:	2200      	movs	r2, #0
 800521e:	2100      	movs	r1, #0
 8005220:	2001      	movs	r0, #1
 8005222:	f7fe fddd 	bl	8003de0 <L6470_PrepareGoUntil>
				L6470_DIR_REV_ID, 200000);
			}
		    if (cmd_rcv_flag[Z_AXIS_INDEX])
 8005226:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <UART_Loop+0x36c>
			{
			perform_action = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			L6470_PrepareGoUntil(Z_AXIS_INDEX, L6470_ACT_RST_ID,
 8005234:	4b17      	ldr	r3, [pc, #92]	; (8005294 <UART_Loop+0x3c0>)
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	2002      	movs	r0, #2
 800523c:	f7fe fdd0 	bl	8003de0 <L6470_PrepareGoUntil>
				L6470_DIR_REV_ID, 200000);
			}
		    if (cmd_rcv_flag[M_AXIS_INDEX])
 8005240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <UART_Loop+0x386>
			{
			perform_action = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			L6470_PrepareGoUntil(M_AXIS_INDEX, L6470_ACT_RST_ID,
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <UART_Loop+0x3c0>)
 8005250:	2200      	movs	r2, #0
 8005252:	2100      	movs	r1, #0
 8005254:	2003      	movs	r0, #3
 8005256:	f7fe fdc3 	bl	8003de0 <L6470_PrepareGoUntil>
				L6470_DIR_REV_ID, 200000);
			}
		    if (perform_action)
 800525a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <UART_Loop+0x39c>
			{
			L6470_PerformPreparedApplicationCommand();
 8005262:	f7fe feb9 	bl	8003fd8 <L6470_PerformPreparedApplicationCommand>
			}

		    }
		    break;
 8005266:	e003      	b.n	8005270 <UART_Loop+0x39c>
		    break;
 8005268:	bf00      	nop
 800526a:	e002      	b.n	8005272 <UART_Loop+0x39e>
		    break;
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <UART_Loop+0x39e>
		    break;
 8005270:	bf00      	nop
		    {

		    }
		    }

		HAL_UART_Transmit(&huart2, (uint8_t*) "OK\n", 3, 2);
 8005272:	2302      	movs	r3, #2
 8005274:	2203      	movs	r2, #3
 8005276:	4908      	ldr	r1, [pc, #32]	; (8005298 <UART_Loop+0x3c4>)
 8005278:	4808      	ldr	r0, [pc, #32]	; (800529c <UART_Loop+0x3c8>)
 800527a:	f7fc ff5f 	bl	800213c <HAL_UART_Transmit>
			2);
		}

	    }
	}
    }
 800527e:	e005      	b.n	800528c <UART_Loop+0x3b8>
		HAL_UART_Transmit(&huart2, (uint8_t*) "Invalid Command\n", 16,
 8005280:	2302      	movs	r3, #2
 8005282:	2210      	movs	r2, #16
 8005284:	4906      	ldr	r1, [pc, #24]	; (80052a0 <UART_Loop+0x3cc>)
 8005286:	4805      	ldr	r0, [pc, #20]	; (800529c <UART_Loop+0x3c8>)
 8005288:	f7fc ff58 	bl	800213c <HAL_UART_Transmit>
    }
 800528c:	bf00      	nop
 800528e:	374c      	adds	r7, #76	; 0x4c
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}
 8005294:	00030d40 	.word	0x00030d40
 8005298:	08005630 	.word	0x08005630
 800529c:	200005d8 	.word	0x200005d8
 80052a0:	08005634 	.word	0x08005634

080052a4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052aa:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <MX_USART2_UART_Init+0x54>)
 80052ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052be:	2200      	movs	r2, #0
 80052c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052ca:	220c      	movs	r2, #12
 80052cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052da:	4806      	ldr	r0, [pc, #24]	; (80052f4 <MX_USART2_UART_Init+0x50>)
 80052dc:	f7fc fee1 	bl	80020a2 <HAL_UART_Init>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80052e6:	2144      	movs	r1, #68	; 0x44
 80052e8:	4804      	ldr	r0, [pc, #16]	; (80052fc <MX_USART2_UART_Init+0x58>)
 80052ea:	f7ff fbd4 	bl	8004a96 <_Error_Handler>
  }

}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	200005d8 	.word	0x200005d8
 80052f8:	40004400 	.word	0x40004400
 80052fc:	08005648 	.word	0x08005648

08005300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2f      	ldr	r2, [pc, #188]	; (80053cc <HAL_UART_MspInit+0xcc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d157      	bne.n	80053c2 <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <HAL_UART_MspInit+0xd0>)
 8005318:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_UART_MspInit+0xd0>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <HAL_UART_MspInit+0xd0>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800532e:	230c      	movs	r3, #12
 8005330:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005332:	2302      	movs	r3, #2
 8005334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800533e:	2307      	movs	r3, #7
 8005340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005342:	f107 030c 	add.w	r3, r7, #12
 8005346:	4619      	mov	r1, r3
 8005348:	4822      	ldr	r0, [pc, #136]	; (80053d4 <HAL_UART_MspInit+0xd4>)
 800534a:	f7fb fe25 	bl	8000f98 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800534e:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_UART_MspInit+0xdc>)
 8005352:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005354:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800535a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800535c:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005362:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005364:	2200      	movs	r2, #0
 8005366:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 800536a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800536e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005372:	2200      	movs	r2, #0
 8005374:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 800537e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005382:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800538a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 800538e:	2200      	movs	r2, #0
 8005390:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005392:	4811      	ldr	r0, [pc, #68]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 8005394:	f7fb fa68 	bl	8000868 <HAL_DMA_Init>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_UART_MspInit+0xa6>
    {
      _Error_Handler(__FILE__, __LINE__);
 800539e:	216e      	movs	r1, #110	; 0x6e
 80053a0:	480f      	ldr	r0, [pc, #60]	; (80053e0 <HAL_UART_MspInit+0xe0>)
 80053a2:	f7ff fb78 	bl	8004a96 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a0b      	ldr	r2, [pc, #44]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 80053aa:	635a      	str	r2, [r3, #52]	; 0x34
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <HAL_UART_MspInit+0xd8>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	2026      	movs	r0, #38	; 0x26
 80053b8:	f7fb f9fd 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053bc:	2026      	movs	r0, #38	; 0x26
 80053be:	f7fb fa16 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80053c2:	bf00      	nop
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40004400 	.word	0x40004400
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40020000 	.word	0x40020000
 80053d8:	20000578 	.word	0x20000578
 80053dc:	40026088 	.word	0x40026088
 80053e0:	08005648 	.word	0x08005648

080053e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80053e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800541c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053ea:	e003      	b.n	80053f4 <LoopCopyDataInit>

080053ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053f2:	3104      	adds	r1, #4

080053f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053f4:	480b      	ldr	r0, [pc, #44]	; (8005424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053fc:	d3f6      	bcc.n	80053ec <CopyDataInit>
  ldr  r2, =_sbss
 80053fe:	4a0b      	ldr	r2, [pc, #44]	; (800542c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005400:	e002      	b.n	8005408 <LoopFillZerobss>

08005402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005404:	f842 3b04 	str.w	r3, [r2], #4

08005408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800540a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800540c:	d3f9      	bcc.n	8005402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800540e:	f7ff fd2b 	bl	8004e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005412:	f000 f815 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005416:	f7ff f97b 	bl	8004710 <main>
  bx  lr    
 800541a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800541c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8005420:	08005ab4 	.word	0x08005ab4
  ldr  r0, =_sdata
 8005424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005428:	20000304 	.word	0x20000304
  ldr  r2, =_sbss
 800542c:	20000304 	.word	0x20000304
  ldr  r3, = _ebss
 8005430:	20000618 	.word	0x20000618

08005434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005434:	e7fe      	b.n	8005434 <ADC_IRQHandler>

08005436 <atoi>:
 8005436:	220a      	movs	r2, #10
 8005438:	2100      	movs	r1, #0
 800543a:	f000 b8a5 	b.w	8005588 <strtol>
	...

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4e0d      	ldr	r6, [pc, #52]	; (8005478 <__libc_init_array+0x38>)
 8005444:	4c0d      	ldr	r4, [pc, #52]	; (800547c <__libc_init_array+0x3c>)
 8005446:	1ba4      	subs	r4, r4, r6
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	2500      	movs	r5, #0
 800544c:	42a5      	cmp	r5, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	4e0b      	ldr	r6, [pc, #44]	; (8005480 <__libc_init_array+0x40>)
 8005452:	4c0c      	ldr	r4, [pc, #48]	; (8005484 <__libc_init_array+0x44>)
 8005454:	f000 f8d0 	bl	80055f8 <_init>
 8005458:	1ba4      	subs	r4, r4, r6
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	2500      	movs	r5, #0
 800545e:	42a5      	cmp	r5, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005468:	4798      	blx	r3
 800546a:	3501      	adds	r5, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005472:	4798      	blx	r3
 8005474:	3501      	adds	r5, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	08005aac 	.word	0x08005aac
 800547c:	08005aac 	.word	0x08005aac
 8005480:	08005aac 	.word	0x08005aac
 8005484:	08005ab0 	.word	0x08005ab0

08005488 <_strtol_l.isra.0>:
 8005488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	4680      	mov	r8, r0
 800548e:	4689      	mov	r9, r1
 8005490:	4692      	mov	sl, r2
 8005492:	461f      	mov	r7, r3
 8005494:	468b      	mov	fp, r1
 8005496:	465d      	mov	r5, fp
 8005498:	980a      	ldr	r0, [sp, #40]	; 0x28
 800549a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800549e:	f000 f889 	bl	80055b4 <__locale_ctype_ptr_l>
 80054a2:	4420      	add	r0, r4
 80054a4:	7846      	ldrb	r6, [r0, #1]
 80054a6:	f016 0608 	ands.w	r6, r6, #8
 80054aa:	d10b      	bne.n	80054c4 <_strtol_l.isra.0+0x3c>
 80054ac:	2c2d      	cmp	r4, #45	; 0x2d
 80054ae:	d10b      	bne.n	80054c8 <_strtol_l.isra.0+0x40>
 80054b0:	782c      	ldrb	r4, [r5, #0]
 80054b2:	2601      	movs	r6, #1
 80054b4:	f10b 0502 	add.w	r5, fp, #2
 80054b8:	b167      	cbz	r7, 80054d4 <_strtol_l.isra.0+0x4c>
 80054ba:	2f10      	cmp	r7, #16
 80054bc:	d114      	bne.n	80054e8 <_strtol_l.isra.0+0x60>
 80054be:	2c30      	cmp	r4, #48	; 0x30
 80054c0:	d00a      	beq.n	80054d8 <_strtol_l.isra.0+0x50>
 80054c2:	e011      	b.n	80054e8 <_strtol_l.isra.0+0x60>
 80054c4:	46ab      	mov	fp, r5
 80054c6:	e7e6      	b.n	8005496 <_strtol_l.isra.0+0xe>
 80054c8:	2c2b      	cmp	r4, #43	; 0x2b
 80054ca:	bf04      	itt	eq
 80054cc:	782c      	ldrbeq	r4, [r5, #0]
 80054ce:	f10b 0502 	addeq.w	r5, fp, #2
 80054d2:	e7f1      	b.n	80054b8 <_strtol_l.isra.0+0x30>
 80054d4:	2c30      	cmp	r4, #48	; 0x30
 80054d6:	d127      	bne.n	8005528 <_strtol_l.isra.0+0xa0>
 80054d8:	782b      	ldrb	r3, [r5, #0]
 80054da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80054de:	2b58      	cmp	r3, #88	; 0x58
 80054e0:	d14b      	bne.n	800557a <_strtol_l.isra.0+0xf2>
 80054e2:	786c      	ldrb	r4, [r5, #1]
 80054e4:	2710      	movs	r7, #16
 80054e6:	3502      	adds	r5, #2
 80054e8:	2e00      	cmp	r6, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80054f0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80054f4:	2200      	movs	r2, #0
 80054f6:	fbb1 fef7 	udiv	lr, r1, r7
 80054fa:	4610      	mov	r0, r2
 80054fc:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005500:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005504:	2b09      	cmp	r3, #9
 8005506:	d811      	bhi.n	800552c <_strtol_l.isra.0+0xa4>
 8005508:	461c      	mov	r4, r3
 800550a:	42a7      	cmp	r7, r4
 800550c:	dd1d      	ble.n	800554a <_strtol_l.isra.0+0xc2>
 800550e:	1c53      	adds	r3, r2, #1
 8005510:	d007      	beq.n	8005522 <_strtol_l.isra.0+0x9a>
 8005512:	4586      	cmp	lr, r0
 8005514:	d316      	bcc.n	8005544 <_strtol_l.isra.0+0xbc>
 8005516:	d101      	bne.n	800551c <_strtol_l.isra.0+0x94>
 8005518:	45a4      	cmp	ip, r4
 800551a:	db13      	blt.n	8005544 <_strtol_l.isra.0+0xbc>
 800551c:	fb00 4007 	mla	r0, r0, r7, r4
 8005520:	2201      	movs	r2, #1
 8005522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005526:	e7eb      	b.n	8005500 <_strtol_l.isra.0+0x78>
 8005528:	270a      	movs	r7, #10
 800552a:	e7dd      	b.n	80054e8 <_strtol_l.isra.0+0x60>
 800552c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005530:	2b19      	cmp	r3, #25
 8005532:	d801      	bhi.n	8005538 <_strtol_l.isra.0+0xb0>
 8005534:	3c37      	subs	r4, #55	; 0x37
 8005536:	e7e8      	b.n	800550a <_strtol_l.isra.0+0x82>
 8005538:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800553c:	2b19      	cmp	r3, #25
 800553e:	d804      	bhi.n	800554a <_strtol_l.isra.0+0xc2>
 8005540:	3c57      	subs	r4, #87	; 0x57
 8005542:	e7e2      	b.n	800550a <_strtol_l.isra.0+0x82>
 8005544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005548:	e7eb      	b.n	8005522 <_strtol_l.isra.0+0x9a>
 800554a:	1c53      	adds	r3, r2, #1
 800554c:	d108      	bne.n	8005560 <_strtol_l.isra.0+0xd8>
 800554e:	2322      	movs	r3, #34	; 0x22
 8005550:	f8c8 3000 	str.w	r3, [r8]
 8005554:	4608      	mov	r0, r1
 8005556:	f1ba 0f00 	cmp.w	sl, #0
 800555a:	d107      	bne.n	800556c <_strtol_l.isra.0+0xe4>
 800555c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005560:	b106      	cbz	r6, 8005564 <_strtol_l.isra.0+0xdc>
 8005562:	4240      	negs	r0, r0
 8005564:	f1ba 0f00 	cmp.w	sl, #0
 8005568:	d00c      	beq.n	8005584 <_strtol_l.isra.0+0xfc>
 800556a:	b122      	cbz	r2, 8005576 <_strtol_l.isra.0+0xee>
 800556c:	3d01      	subs	r5, #1
 800556e:	f8ca 5000 	str.w	r5, [sl]
 8005572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	464d      	mov	r5, r9
 8005578:	e7f9      	b.n	800556e <_strtol_l.isra.0+0xe6>
 800557a:	2430      	movs	r4, #48	; 0x30
 800557c:	2f00      	cmp	r7, #0
 800557e:	d1b3      	bne.n	80054e8 <_strtol_l.isra.0+0x60>
 8005580:	2708      	movs	r7, #8
 8005582:	e7b1      	b.n	80054e8 <_strtol_l.isra.0+0x60>
 8005584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005588 <strtol>:
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <strtol+0x24>)
 800558a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800558c:	681c      	ldr	r4, [r3, #0]
 800558e:	4d08      	ldr	r5, [pc, #32]	; (80055b0 <strtol+0x28>)
 8005590:	6a23      	ldr	r3, [r4, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf08      	it	eq
 8005596:	462b      	moveq	r3, r5
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4613      	mov	r3, r2
 800559c:	460a      	mov	r2, r1
 800559e:	4601      	mov	r1, r0
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff ff71 	bl	8005488 <_strtol_l.isra.0>
 80055a6:	b003      	add	sp, #12
 80055a8:	bd30      	pop	{r4, r5, pc}
 80055aa:	bf00      	nop
 80055ac:	200000a4 	.word	0x200000a4
 80055b0:	20000198 	.word	0x20000198

080055b4 <__locale_ctype_ptr_l>:
 80055b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80055b8:	4770      	bx	lr

080055ba <__ascii_mbtowc>:
 80055ba:	b082      	sub	sp, #8
 80055bc:	b901      	cbnz	r1, 80055c0 <__ascii_mbtowc+0x6>
 80055be:	a901      	add	r1, sp, #4
 80055c0:	b142      	cbz	r2, 80055d4 <__ascii_mbtowc+0x1a>
 80055c2:	b14b      	cbz	r3, 80055d8 <__ascii_mbtowc+0x1e>
 80055c4:	7813      	ldrb	r3, [r2, #0]
 80055c6:	600b      	str	r3, [r1, #0]
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	1c10      	adds	r0, r2, #0
 80055cc:	bf18      	it	ne
 80055ce:	2001      	movne	r0, #1
 80055d0:	b002      	add	sp, #8
 80055d2:	4770      	bx	lr
 80055d4:	4610      	mov	r0, r2
 80055d6:	e7fb      	b.n	80055d0 <__ascii_mbtowc+0x16>
 80055d8:	f06f 0001 	mvn.w	r0, #1
 80055dc:	e7f8      	b.n	80055d0 <__ascii_mbtowc+0x16>

080055de <__ascii_wctomb>:
 80055de:	b149      	cbz	r1, 80055f4 <__ascii_wctomb+0x16>
 80055e0:	2aff      	cmp	r2, #255	; 0xff
 80055e2:	bf85      	ittet	hi
 80055e4:	238a      	movhi	r3, #138	; 0x8a
 80055e6:	6003      	strhi	r3, [r0, #0]
 80055e8:	700a      	strbls	r2, [r1, #0]
 80055ea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80055ee:	bf98      	it	ls
 80055f0:	2001      	movls	r0, #1
 80055f2:	4770      	bx	lr
 80055f4:	4608      	mov	r0, r1
 80055f6:	4770      	bx	lr

080055f8 <_init>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr

08005604 <_fini>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr
