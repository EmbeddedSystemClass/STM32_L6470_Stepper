
L6470_Control_CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08007a80  08007a80  00017a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000730  20000000  08008210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000077c  20000730  08008940  00020730  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000eac  08008940  00020eac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ddce  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000034b1  00000000  00000000  0003e52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001118  00000000  00000000  000419e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fa0  00000000  00000000  00042af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007dc2  00000000  00000000  00043a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000054f3  00000000  00000000  0004b85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00050d4d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e14  00000000  00000000  00050dcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000730 	.word	0x20000730
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007a68 	.word	0x08007a68

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000734 	.word	0x20000734
 80001d4:	08007a68 	.word	0x08007a68

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f092 0f00 	teq	r2, #0
 80004d2:	bf14      	ite	ne
 80004d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e720      	b.n	800032c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aedc 	beq.w	80002da <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6c1      	b.n	80002da <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b97a 	b.w	8000de8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	468c      	mov	ip, r1
 8000b12:	460d      	mov	r5, r1
 8000b14:	4604      	mov	r4, r0
 8000b16:	9e08      	ldr	r6, [sp, #32]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d151      	bne.n	8000bc0 <__udivmoddi4+0xb4>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4617      	mov	r7, r2
 8000b20:	d96d      	bls.n	8000bfe <__udivmoddi4+0xf2>
 8000b22:	fab2 fe82 	clz	lr, r2
 8000b26:	f1be 0f00 	cmp.w	lr, #0
 8000b2a:	d00b      	beq.n	8000b44 <__udivmoddi4+0x38>
 8000b2c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b30:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b38:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b3c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b40:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b44:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b48:	0c25      	lsrs	r5, r4, #16
 8000b4a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b4e:	fa1f f987 	uxth.w	r9, r7
 8000b52:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b56:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b5a:	fb08 f309 	mul.w	r3, r8, r9
 8000b5e:	42ab      	cmp	r3, r5
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x6c>
 8000b62:	19ed      	adds	r5, r5, r7
 8000b64:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000b68:	f080 8123 	bcs.w	8000db2 <__udivmoddi4+0x2a6>
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	f240 8120 	bls.w	8000db2 <__udivmoddi4+0x2a6>
 8000b72:	f1a8 0802 	sub.w	r8, r8, #2
 8000b76:	443d      	add	r5, r7
 8000b78:	1aed      	subs	r5, r5, r3
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b80:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b88:	fb00 f909 	mul.w	r9, r0, r9
 8000b8c:	45a1      	cmp	r9, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x98>
 8000b90:	19e4      	adds	r4, r4, r7
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	f080 810a 	bcs.w	8000dae <__udivmoddi4+0x2a2>
 8000b9a:	45a1      	cmp	r9, r4
 8000b9c:	f240 8107 	bls.w	8000dae <__udivmoddi4+0x2a2>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	443c      	add	r4, r7
 8000ba4:	eba4 0409 	sub.w	r4, r4, r9
 8000ba8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bac:	2100      	movs	r1, #0
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d061      	beq.n	8000c76 <__udivmoddi4+0x16a>
 8000bb2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6034      	str	r4, [r6, #0]
 8000bba:	6073      	str	r3, [r6, #4]
 8000bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d907      	bls.n	8000bd4 <__udivmoddi4+0xc8>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d054      	beq.n	8000c72 <__udivmoddi4+0x166>
 8000bc8:	2100      	movs	r1, #0
 8000bca:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd4:	fab3 f183 	clz	r1, r3
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	f040 808e 	bne.w	8000cfa <__udivmoddi4+0x1ee>
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xdc>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80fa 	bhi.w	8000ddc <__udivmoddi4+0x2d0>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb65 0503 	sbc.w	r5, r5, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	46ac      	mov	ip, r5
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d03f      	beq.n	8000c76 <__udivmoddi4+0x16a>
 8000bf6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	b912      	cbnz	r2, 8000c06 <__udivmoddi4+0xfa>
 8000c00:	2701      	movs	r7, #1
 8000c02:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c06:	fab7 fe87 	clz	lr, r7
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d134      	bne.n	8000c7a <__udivmoddi4+0x16e>
 8000c10:	1beb      	subs	r3, r5, r7
 8000c12:	0c3a      	lsrs	r2, r7, #16
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	2101      	movs	r1, #1
 8000c1a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c1e:	0c25      	lsrs	r5, r4, #16
 8000c20:	fb02 3318 	mls	r3, r2, r8, r3
 8000c24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c28:	fb0c f308 	mul.w	r3, ip, r8
 8000c2c:	42ab      	cmp	r3, r5
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x134>
 8000c30:	19ed      	adds	r5, r5, r7
 8000c32:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x132>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	f200 80d1 	bhi.w	8000de0 <__udivmoddi4+0x2d4>
 8000c3e:	4680      	mov	r8, r0
 8000c40:	1aed      	subs	r5, r5, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c48:	fb02 5510 	mls	r5, r2, r0, r5
 8000c4c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c50:	fb0c fc00 	mul.w	ip, ip, r0
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x15c>
 8000c58:	19e4      	adds	r4, r4, r7
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x15a>
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	f200 80b8 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	e79d      	b.n	8000bae <__udivmoddi4+0xa2>
 8000c72:	4631      	mov	r1, r6
 8000c74:	4630      	mov	r0, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	f1ce 0420 	rsb	r4, lr, #32
 8000c7e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c82:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c86:	fa20 f804 	lsr.w	r8, r0, r4
 8000c8a:	0c3a      	lsrs	r2, r7, #16
 8000c8c:	fa25 f404 	lsr.w	r4, r5, r4
 8000c90:	ea48 0803 	orr.w	r8, r8, r3
 8000c94:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c98:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c9c:	fb02 4411 	mls	r4, r2, r1, r4
 8000ca0:	fa1f fc87 	uxth.w	ip, r7
 8000ca4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ca8:	fb01 f30c 	mul.w	r3, r1, ip
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x1bc>
 8000cb4:	19ed      	adds	r5, r5, r7
 8000cb6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000cba:	f080 808a 	bcs.w	8000dd2 <__udivmoddi4+0x2c6>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	f240 8087 	bls.w	8000dd2 <__udivmoddi4+0x2c6>
 8000cc4:	3902      	subs	r1, #2
 8000cc6:	443d      	add	r5, r7
 8000cc8:	1aeb      	subs	r3, r5, r3
 8000cca:	fa1f f588 	uxth.w	r5, r8
 8000cce:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cd2:	fb02 3310 	mls	r3, r2, r0, r3
 8000cd6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cda:	fb00 f30c 	mul.w	r3, r0, ip
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x1e6>
 8000ce2:	19ed      	adds	r5, r5, r7
 8000ce4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce8:	d26f      	bcs.n	8000dca <__udivmoddi4+0x2be>
 8000cea:	42ab      	cmp	r3, r5
 8000cec:	d96d      	bls.n	8000dca <__udivmoddi4+0x2be>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	443d      	add	r5, r7
 8000cf2:	1aeb      	subs	r3, r5, r3
 8000cf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf8:	e78f      	b.n	8000c1a <__udivmoddi4+0x10e>
 8000cfa:	f1c1 0720 	rsb	r7, r1, #32
 8000cfe:	fa22 f807 	lsr.w	r8, r2, r7
 8000d02:	408b      	lsls	r3, r1
 8000d04:	fa05 f401 	lsl.w	r4, r5, r1
 8000d08:	ea48 0303 	orr.w	r3, r8, r3
 8000d0c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d10:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d14:	40fd      	lsrs	r5, r7
 8000d16:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d1a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d1e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d22:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d26:	fa1f f883 	uxth.w	r8, r3
 8000d2a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d2e:	fb09 f408 	mul.w	r4, r9, r8
 8000d32:	42ac      	cmp	r4, r5
 8000d34:	fa02 f201 	lsl.w	r2, r2, r1
 8000d38:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x244>
 8000d3e:	18ed      	adds	r5, r5, r3
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d44:	d243      	bcs.n	8000dce <__udivmoddi4+0x2c2>
 8000d46:	42ac      	cmp	r4, r5
 8000d48:	d941      	bls.n	8000dce <__udivmoddi4+0x2c2>
 8000d4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4e:	441d      	add	r5, r3
 8000d50:	1b2d      	subs	r5, r5, r4
 8000d52:	fa1f fe8e 	uxth.w	lr, lr
 8000d56:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d5a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d5e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d62:	fb00 f808 	mul.w	r8, r0, r8
 8000d66:	45a0      	cmp	r8, r4
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x26e>
 8000d6a:	18e4      	adds	r4, r4, r3
 8000d6c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d70:	d229      	bcs.n	8000dc6 <__udivmoddi4+0x2ba>
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	d927      	bls.n	8000dc6 <__udivmoddi4+0x2ba>
 8000d76:	3802      	subs	r0, #2
 8000d78:	441c      	add	r4, r3
 8000d7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7e:	eba4 0408 	sub.w	r4, r4, r8
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	454c      	cmp	r4, r9
 8000d88:	46c6      	mov	lr, r8
 8000d8a:	464d      	mov	r5, r9
 8000d8c:	d315      	bcc.n	8000dba <__udivmoddi4+0x2ae>
 8000d8e:	d012      	beq.n	8000db6 <__udivmoddi4+0x2aa>
 8000d90:	b156      	cbz	r6, 8000da8 <__udivmoddi4+0x29c>
 8000d92:	ebba 030e 	subs.w	r3, sl, lr
 8000d96:	eb64 0405 	sbc.w	r4, r4, r5
 8000d9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	431f      	orrs	r7, r3
 8000da2:	40cc      	lsrs	r4, r1
 8000da4:	6037      	str	r7, [r6, #0]
 8000da6:	6074      	str	r4, [r6, #4]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	4618      	mov	r0, r3
 8000db0:	e6f8      	b.n	8000ba4 <__udivmoddi4+0x98>
 8000db2:	4690      	mov	r8, r2
 8000db4:	e6e0      	b.n	8000b78 <__udivmoddi4+0x6c>
 8000db6:	45c2      	cmp	sl, r8
 8000db8:	d2ea      	bcs.n	8000d90 <__udivmoddi4+0x284>
 8000dba:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dbe:	eb69 0503 	sbc.w	r5, r9, r3
 8000dc2:	3801      	subs	r0, #1
 8000dc4:	e7e4      	b.n	8000d90 <__udivmoddi4+0x284>
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	e7d7      	b.n	8000d7a <__udivmoddi4+0x26e>
 8000dca:	4640      	mov	r0, r8
 8000dcc:	e791      	b.n	8000cf2 <__udivmoddi4+0x1e6>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e7be      	b.n	8000d50 <__udivmoddi4+0x244>
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	e778      	b.n	8000cc8 <__udivmoddi4+0x1bc>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	e745      	b.n	8000c68 <__udivmoddi4+0x15c>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xe6>
 8000de0:	f1a8 0802 	sub.w	r8, r8, #2
 8000de4:	443d      	add	r5, r7
 8000de6:	e72b      	b.n	8000c40 <__udivmoddi4+0x134>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f947 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f005 fc30 	bl	8006684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f95f 	bl	8001112 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6c:	f000 f927 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200000b0 	.word	0x200000b0
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	20000a58 	.word	0x20000a58

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000a58 	.word	0x20000a58

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_Delay+0x40>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3f7      	bcc.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000004 	.word	0x20000004

08000f14 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f82:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <NVIC_EnableIRQ+0x30>)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	f002 021f 	and.w	r2, r2, #31
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da0b      	bge.n	8000fd8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <NVIC_SetPriority+0x4c>)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	3b04      	subs	r3, #4
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd6:	e009      	b.n	8000fec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <NVIC_SetPriority+0x50>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	2201      	movs	r2, #1
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	401a      	ands	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001046:	2101      	movs	r1, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	1e59      	subs	r1, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f7ff ff90 	bl	8000fac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff2f 	bl	8000f14 <NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff44 	bl	8000f5c <NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff37 	bl	8000f78 <NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d106      	bne.n	8001148 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001146:	e005      	b.n	8001154 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001148:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 0304 	bic.w	r3, r3, #4
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001168:	f004 fe90 	bl	8005e8c <HAL_SYSTICK_Callback>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fe9c 	bl	8000eb8 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e099      	b.n	80012c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e00f      	b.n	80011ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fe83 	bl	8000eb8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d908      	bls.n	80011ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e078      	b.n	80012c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e8      	bne.n	80011ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_DMA_Init+0x158>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	2b04      	cmp	r3, #4
 8001226:	d107      	bne.n	8001238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4313      	orrs	r3, r2
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f023 0307 	bic.w	r3, r3, #7
 800124e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	2b04      	cmp	r3, #4
 8001260:	d117      	bne.n	8001292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa99 	bl	80017ac <DMA_CheckFifoParam>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800128e:	2301      	movs	r3, #1
 8001290:	e016      	b.n	80012c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa50 	bl	8001740 <DMA_CalcBaseAndBitshift>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	f010803f 	.word	0xf010803f

080012cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Start_IT+0x26>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e048      	b.n	8001384 <HAL_DMA_Start_IT+0xb8>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d137      	bne.n	8001376 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f9e2 	bl	80016e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	223f      	movs	r2, #63	; 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f042 0216 	orr.w	r2, r2, #22
 800133a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	6952      	ldr	r2, [r2, #20]
 8001346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800134a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	f042 0208 	orr.w	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e005      	b.n	8001382 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800137e:	2302      	movs	r3, #2
 8001380:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001382:	7dfb      	ldrb	r3, [r7, #23]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d004      	beq.n	80013aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00c      	b.n	80013c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2205      	movs	r2, #5
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013dc:	4b92      	ldr	r3, [pc, #584]	; (8001628 <HAL_DMA_IRQHandler+0x258>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a92      	ldr	r2, [pc, #584]	; (800162c <HAL_DMA_IRQHandler+0x25c>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0a9b      	lsrs	r3, r3, #10
 80013e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2208      	movs	r2, #8
 80013fc:	409a      	lsls	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01a      	beq.n	800143c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f022 0204 	bic.w	r2, r2, #4
 8001422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	2208      	movs	r2, #8
 800142a:	409a      	lsls	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2201      	movs	r2, #1
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d012      	beq.n	8001472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2201      	movs	r2, #1
 8001460:	409a      	lsls	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146a:	f043 0202 	orr.w	r2, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2204      	movs	r2, #4
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d012      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a0:	f043 0204 	orr.w	r2, r3, #4
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	2210      	movs	r2, #16
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d043      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d03c      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ca:	2210      	movs	r2, #16
 80014cc:	409a      	lsls	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d018      	beq.n	8001512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d108      	bne.n	8001500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d024      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	4798      	blx	r3
 80014fe:	e01f      	b.n	8001540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01b      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	4798      	blx	r3
 8001510:	e016      	b.n	8001540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d107      	bne.n	8001530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2220      	movs	r2, #32
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 808e 	beq.w	800166e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8086 	beq.w	800166e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2220      	movs	r2, #32
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b05      	cmp	r3, #5
 8001578:	d136      	bne.n	80015e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	f022 0216 	bic.w	r2, r2, #22
 8001588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	6952      	ldr	r2, [r2, #20]
 8001594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <HAL_DMA_IRQHandler+0x1da>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	f022 0208 	bic.w	r2, r2, #8
 80015b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	223f      	movs	r2, #63	; 0x3f
 80015c0:	409a      	lsls	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d07d      	beq.n	80016da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
        }
        return;
 80015e6:	e078      	b.n	80016da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01c      	beq.n	8001630 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d108      	bne.n	8001616 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	2b00      	cmp	r3, #0
 800160a:	d030      	beq.n	800166e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
 8001614:	e02b      	b.n	800166e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	2b00      	cmp	r3, #0
 800161c:	d027      	beq.n	800166e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
 8001626:	e022      	b.n	800166e <HAL_DMA_IRQHandler+0x29e>
 8001628:	200000b0 	.word	0x200000b0
 800162c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	f022 0210 	bic.w	r2, r2, #16
 800164c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001672:	2b00      	cmp	r3, #0
 8001674:	d032      	beq.n	80016dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d022      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2205      	movs	r2, #5
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d807      	bhi.n	80016b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f2      	bne.n	800169a <HAL_DMA_IRQHandler+0x2ca>
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80016b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
 80016d8:	e000      	b.n	80016dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80016da:	bf00      	nop
    }
  }
}
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop

080016e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d108      	bne.n	8001724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001722:	e007      	b.n	8001734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3b10      	subs	r3, #16
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <DMA_CalcBaseAndBitshift+0x68>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d909      	bls.n	8001782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	1d1a      	adds	r2, r3, #4
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58
 8001780:	e007      	b.n	8001792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	aaaaaaab 	.word	0xaaaaaaab
 80017a8:	08007ce8 	.word	0x08007ce8

080017ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11f      	bne.n	8001806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d855      	bhi.n	8001878 <DMA_CheckFifoParam+0xcc>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <DMA_CheckFifoParam+0x28>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080017f7 	.word	0x080017f7
 80017dc:	080017e5 	.word	0x080017e5
 80017e0:	08001879 	.word	0x08001879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d045      	beq.n	800187c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f4:	e042      	b.n	800187c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017fe:	d13f      	bne.n	8001880 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001804:	e03c      	b.n	8001880 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180e:	d121      	bne.n	8001854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d836      	bhi.n	8001884 <DMA_CheckFifoParam+0xd8>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <DMA_CheckFifoParam+0x70>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	0800182d 	.word	0x0800182d
 8001820:	08001833 	.word	0x08001833
 8001824:	0800182d 	.word	0x0800182d
 8001828:	08001845 	.word	0x08001845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
      break;
 8001830:	e02f      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d024      	beq.n	8001888 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001842:	e021      	b.n	8001888 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800184c:	d11e      	bne.n	800188c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001852:	e01b      	b.n	800188c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d902      	bls.n	8001860 <DMA_CheckFifoParam+0xb4>
 800185a:	2b03      	cmp	r3, #3
 800185c:	d003      	beq.n	8001866 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800185e:	e018      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      break;
 8001864:	e015      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00e      	beq.n	8001890 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
      break;
 8001876:	e00b      	b.n	8001890 <DMA_CheckFifoParam+0xe4>
      break;
 8001878:	bf00      	nop
 800187a:	e00a      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 800187c:	bf00      	nop
 800187e:	e008      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 8001880:	bf00      	nop
 8001882:	e006      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 8001884:	bf00      	nop
 8001886:	e004      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 8001888:	bf00      	nop
 800188a:	e002      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;   
 800188c:	bf00      	nop
 800188e:	e000      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 8001890:	bf00      	nop
    }
  } 
  
  return status; 
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e159      	b.n	8001b70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8148 	bne.w	8001b6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x4a>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	69b9      	ldr	r1, [r7, #24]
 800192e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0203 	and.w	r2, r3, #3
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d00b      	beq.n	8001986 <HAL_GPIO_Init+0xe6>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197a:	2b11      	cmp	r3, #17
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b12      	cmp	r3, #18
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a2 	beq.w	8001b6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a2c:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a42:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_GPIO_Init+0x2ec>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x202>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x1fe>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a46      	ldr	r2, [pc, #280]	; (8001b94 <HAL_GPIO_Init+0x2f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <HAL_GPIO_Init+0x2f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x1f6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a44      	ldr	r2, [pc, #272]	; (8001b9c <HAL_GPIO_Init+0x2fc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x1f2>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e008      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab4:	4934      	ldr	r1, [pc, #208]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae6:	4a2e      	ldr	r2, [pc, #184]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3a:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	f67f aea2 	bls.w	80018bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 fbe0 	bl	80063bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e22d      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d075      	beq.n	8001d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	4ba3      	ldr	r3, [pc, #652]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d00c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c32:	4ba0      	ldr	r3, [pc, #640]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4b9d      	ldr	r3, [pc, #628]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4a:	d10b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	4b99      	ldr	r3, [pc, #612]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d05b      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d157      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e208      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4a91      	ldr	r2, [pc, #580]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	4b90      	ldr	r3, [pc, #576]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4a8b      	ldr	r2, [pc, #556]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4a88      	ldr	r2, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	4b87      	ldr	r3, [pc, #540]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xb0>
 8001ca0:	4a84      	ldr	r2, [pc, #528]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4a81      	ldr	r2, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001cae:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f8fa 	bl	8000eb8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f8f6 	bl	8000eb8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1cd      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f8e6 	bl	8000eb8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f8e2 	bl	8000eb8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1b9      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d36:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b5c      	ldr	r3, [pc, #368]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e18d      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4956      	ldr	r1, [pc, #344]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	4b55      	ldr	r3, [pc, #340]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b4f      	ldr	r3, [pc, #316]	; (8001eb8 <HAL_RCC_OscConfig+0x2b0>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f89b 	bl	8000eb8 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff f897 	bl	8000eb8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e16e      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4943      	ldr	r1, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCC_OscConfig+0x2b0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f87a 	bl	8000eb8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f876 	bl	8000eb8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e14d      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d030      	beq.n	8001e54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x2b4>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f85a 	bl	8000eb8 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f856 	bl	8000eb8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e12d      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x200>
 8001e26:	e015      	b.n	8001e54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_OscConfig+0x2b4>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f843 	bl	8000eb8 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f83f 	bl	8000eb8 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e116      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a0 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10f      	bne.n	8001e92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_OscConfig+0x2b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d121      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <HAL_RCC_OscConfig+0x2b8>)
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <HAL_RCC_OscConfig+0x2b8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f805 	bl	8000eb8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e011      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2ce>
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	42470000 	.word	0x42470000
 8001ebc:	42470e80 	.word	0x42470e80
 8001ec0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fff8 	bl	8000eb8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0cf      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x478>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
 8001eea:	4a66      	ldr	r2, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001eec:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	e01c      	b.n	8001f32 <HAL_RCC_OscConfig+0x32a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f00:	4a60      	ldr	r2, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f02:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	4a5d      	ldr	r2, [pc, #372]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x32a>
 8001f1a:	4a5a      	ldr	r2, [pc, #360]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	4a57      	ldr	r2, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f28:	4b56      	ldr	r3, [pc, #344]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d015      	beq.n	8001f66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ffbd 	bl	8000eb8 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe ffb9 	bl	8000eb8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e08e      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RCC_OscConfig+0x33a>
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ffa7 	bl	8000eb8 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe ffa3 	bl	8000eb8 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e078      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4a3b      	ldr	r2, [pc, #236]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d064      	beq.n	8002074 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d05c      	beq.n	8002070 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d141      	bne.n	8002042 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_RCC_OscConfig+0x480>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ff78 	bl	8000eb8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe ff74 	bl	8000eb8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e04b      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fea:	4926      	ldr	r1, [pc, #152]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	019b      	lsls	r3, r3, #6
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	3b01      	subs	r3, #1
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_RCC_OscConfig+0x480>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe ff4d 	bl	8000eb8 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe ff49 	bl	8000eb8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e020      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x41a>
 8002040:	e018      	b.n	8002074 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_OscConfig+0x480>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe ff36 	bl	8000eb8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe ff32 	bl	8000eb8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e009      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_RCC_OscConfig+0x47c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x448>
 800206e:	e001      	b.n	8002074 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40007000 	.word	0x40007000
 8002084:	40023800 	.word	0x40023800
 8002088:	42470060 	.word	0x42470060

0800208c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0ca      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_ClockConfig+0x1b4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 020f 	and.w	r2, r3, #15
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_RCC_ClockConfig+0x1b4>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_ClockConfig+0x1b4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b6      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	4b58      	ldr	r3, [pc, #352]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4a52      	ldr	r2, [pc, #328]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	494f      	ldr	r1, [pc, #316]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 8002106:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d044      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d119      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07d      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b3e      	ldr	r3, [pc, #248]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06d      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e065      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4936      	ldr	r1, [pc, #216]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 0203 	bic.w	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7fe fe9c 	bl	8000eb8 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe fe98 	bl	8000eb8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04d      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_ClockConfig+0x1b4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d90c      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCC_ClockConfig+0x1b4>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCC_ClockConfig+0x1b4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e030      	b.n	8002236 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4918      	ldr	r1, [pc, #96]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fe:	4911      	ldr	r1, [pc, #68]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f81d 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 8002216:	4601      	mov	r1, r0
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	5cd3      	ldrb	r3, [r2, r3]
 8002226:	fa21 f303 	lsr.w	r3, r1, r3
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fdfe 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00
 8002244:	40023800 	.word	0x40023800
 8002248:	08008080 	.word	0x08008080
 800224c:	200000b0 	.word	0x200000b0

08002250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002254:	b08f      	sub	sp, #60	; 0x3c
 8002256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002268:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b04      	cmp	r3, #4
 8002272:	d007      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x34>
 8002274:	2b08      	cmp	r3, #8
 8002276:	d008      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0x3a>
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 80b2 	bne.w	80023e2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800227e:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002282:	e0b1      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002284:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002288:	e0ae      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228a:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d04e      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	f04f 0400 	mov.w	r4, #0
 80022aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	ea01 0103 	and.w	r1, r1, r3
 80022b6:	ea02 0204 	and.w	r2, r2, r4
 80022ba:	460b      	mov	r3, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	0160      	lsls	r0, r4, #5
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24
 80022c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022c4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24
 80022ca:	015b      	lsls	r3, r3, #5
 80022cc:	623b      	str	r3, [r7, #32]
 80022ce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022d2:	1a5b      	subs	r3, r3, r1
 80022d4:	eb64 0402 	sbc.w	r4, r4, r2
 80022d8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80022dc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80022e0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80022e4:	ebb8 0803 	subs.w	r8, r8, r3
 80022e8:	eb69 0904 	sbc.w	r9, r9, r4
 80022ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002304:	eb18 0801 	adds.w	r8, r8, r1
 8002308:	eb49 0902 	adc.w	r9, r9, r2
 800230c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002324:	4640      	mov	r0, r8
 8002326:	4649      	mov	r1, r9
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	461a      	mov	r2, r3
 8002330:	4623      	mov	r3, r4
 8002332:	f7fe fbd3 	bl	8000adc <__aeabi_uldivmod>
 8002336:	4603      	mov	r3, r0
 8002338:	460c      	mov	r4, r1
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
 800233c:	e043      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	f04f 0400 	mov.w	r4, #0
 8002348:	f240 11ff 	movw	r1, #511	; 0x1ff
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	ea01 0103 	and.w	r1, r1, r3
 8002354:	ea02 0204 	and.w	r2, r2, r4
 8002358:	460b      	mov	r3, r1
 800235a:	4614      	mov	r4, r2
 800235c:	0160      	lsls	r0, r4, #5
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	015b      	lsls	r3, r3, #5
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002370:	1a5b      	subs	r3, r3, r1
 8002372:	eb64 0402 	sbc.w	r4, r4, r2
 8002376:	01a6      	lsls	r6, r4, #6
 8002378:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800237c:	019d      	lsls	r5, r3, #6
 800237e:	1aed      	subs	r5, r5, r3
 8002380:	eb66 0604 	sbc.w	r6, r6, r4
 8002384:	00f3      	lsls	r3, r6, #3
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	00eb      	lsls	r3, r5, #3
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002398:	186d      	adds	r5, r5, r1
 800239a:	eb46 0602 	adc.w	r6, r6, r2
 800239e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80023a2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80023a6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80023aa:	4655      	mov	r5, sl
 80023ac:	465e      	mov	r6, fp
 80023ae:	4628      	mov	r0, r5
 80023b0:	4631      	mov	r1, r6
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	f7fe fb8e 	bl	8000adc <__aeabi_uldivmod>
 80023c0:	4603      	mov	r3, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0c1b      	lsrs	r3, r3, #16
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	3301      	adds	r3, #1
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80023d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023e0:	e002      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	373c      	adds	r7, #60	; 0x3c
 80023ee:	46bd      	mov	sp, r7
 80023f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_RCC_GetHCLKFreq+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200000b0 	.word	0x200000b0

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff0 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002420:	4601      	mov	r1, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	08008090 	.word	0x08008090

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffdc 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002448:	4601      	mov	r1, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0b5b      	lsrs	r3, r3, #13
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08008090 	.word	0x08008090

08002468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e055      	b.n	8002526 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f004 f8b1 	bl	80065fc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6851      	ldr	r1, [r2, #4]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68d2      	ldr	r2, [r2, #12]
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6912      	ldr	r2, [r2, #16]
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6952      	ldr	r2, [r2, #20]
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6992      	ldr	r2, [r2, #24]
 80024d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	69d2      	ldr	r2, [r2, #28]
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6a12      	ldr	r2, [r2, #32]
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6992      	ldr	r2, [r2, #24]
 80024f8:	0c12      	lsrs	r2, r2, #16
 80024fa:	f002 0104 	and.w	r1, r2, #4
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	69d2      	ldr	r2, [r2, #28]
 8002510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002514:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b08c      	sub	sp, #48	; 0x30
 8002532:	af02      	add	r7, sp, #8
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002548:	2301      	movs	r3, #1
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x32>
 800255c:	2302      	movs	r3, #2
 800255e:	e181      	b.n	8002864 <HAL_SPI_TransmitReceive+0x336>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002568:	f7fe fca6 	bl	8000eb8 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002574:	b2db      	uxtb	r3, r3
 8002576:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00e      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x74>
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258a:	d106      	bne.n	800259a <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_SPI_TransmitReceive+0x6c>
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b04      	cmp	r3, #4
 8002598:	d003      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80025a0:	e156      	b.n	8002850 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x86>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x86>
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d103      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80025ba:	e149      	b.n	8002850 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d103      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2205      	movs	r2, #5
 80025cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d007      	beq.n	8002624 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800262c:	d171      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x112>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d15d      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	8812      	ldrh	r2, [r2, #0]
 8002648:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3302      	adds	r3, #2
 800264e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265e:	e04d      	b.n	80026fc <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01c      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0x172>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d017      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0x172>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d110      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3302      	adds	r3, #2
 800268c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x1ae>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d111      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3302      	adds	r3, #2
 80026c8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80026d8:	2301      	movs	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e2:	d00b      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x1ce>
 80026e4:	f7fe fbe8 	bl	8000eb8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad2      	subs	r2, r2, r3
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d303      	bcc.n	80026fc <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80026fa:	e0a9      	b.n	8002850 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ac      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x132>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1a7      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x132>
 8002710:	e071      	b.n	80027f6 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x1f6>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d15e      	bne.n	80027e2 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002744:	e04d      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01d      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x25a>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d018      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x25a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b02      	cmp	r3, #2
 8002762:	d111      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f103 020c 	add.w	r2, r3, #12
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c59      	adds	r1, r3, #1
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d017      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x294>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d110      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68d2      	ldr	r2, [r2, #12]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80027be:	2301      	movs	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c8:	d00b      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x2b4>
 80027ca:	f7fe fb75 	bl	8000eb8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad2      	subs	r2, r2, r3
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d303      	bcc.n	80027e2 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80027e0:	e036      	b.n	8002850 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ac      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x218>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1a7      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2201      	movs	r2, #1
 80027fe:	2102      	movs	r1, #2
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f833 	bl	800286c <SPI_WaitFlagStateUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002812:	e01d      	b.n	8002850 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f890 	bl	800293e <SPI_CheckFlag_BSY>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002830:	e00e      	b.n	8002850 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002864:	4618      	mov	r0, r3
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800287a:	e04d      	b.n	8002918 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002882:	d049      	beq.n	8002918 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800288a:	f7fe fb15 	bl	8000eb8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d33e      	bcc.n	8002918 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6852      	ldr	r2, [r2, #4]
 80028a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028a8:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b2:	d111      	bne.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028bc:	d004      	beq.n	80028c8 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d107      	bne.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d110      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80028f0:	400b      	ands	r3, r1
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002902:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e00e      	b.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	401a      	ands	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	d101      	bne.n	800292c <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002928:	2201      	movs	r2, #1
 800292a:	e000      	b.n	800292e <SPI_WaitFlagStateUntilTimeout+0xc2>
 800292c:	2200      	movs	r2, #0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1a3      	bne.n	800287c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ff89 	bl	800286c <SPI_WaitFlagStateUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e000      	b.n	8002972 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e081      	b.n	8002a9e <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f003 ff96 	bl	80068e0 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	6892      	ldr	r2, [r2, #8]
 80029c6:	f022 0207 	bic.w	r2, r2, #7
 80029ca:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4610      	mov	r0, r2
 80029d8:	f000 f89c 	bl	8002b14 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a22:	f023 030c 	bic.w	r3, r3, #12
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	011a      	lsls	r2, r3, #4
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	4313      	orrs	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a60:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002a68:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	4313      	orrs	r3, r2
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_TIM_Encoder_Start+0x16>
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d008      	beq.n	8002acc <HAL_TIM_Encoder_Start+0x26>
 8002aba:	e00f      	b.n	8002adc <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f8a9 	bl	8002c1c <TIM_CCxChannelCmd>
      break; 
 8002aca:	e016      	b.n	8002afa <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f8a1 	bl	8002c1c <TIM_CCxChannelCmd>
      break;
 8002ada:	e00e      	b.n	8002afa <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f899 	bl	8002c1c <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	2104      	movs	r1, #4
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f892 	bl	8002c1c <TIM_CCxChannelCmd>
     break; 
 8002af8:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a35      	ldr	r2, [pc, #212]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00f      	beq.n	8002b50 <TIM_Base_SetConfig+0x3c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b36:	d00b      	beq.n	8002b50 <TIM_Base_SetConfig+0x3c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <TIM_Base_SetConfig+0x3c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a31      	ldr	r2, [pc, #196]	; (8002c08 <TIM_Base_SetConfig+0xf4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d003      	beq.n	8002b50 <TIM_Base_SetConfig+0x3c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <TIM_Base_SetConfig+0xf8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <TIM_Base_SetConfig+0x40>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <TIM_Base_SetConfig+0x42>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01b      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d017      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <TIM_Base_SetConfig+0xf4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00f      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <TIM_Base_SetConfig+0xf8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00b      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <TIM_Base_SetConfig+0xfc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_Base_SetConfig+0x100>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0x98>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <TIM_Base_SetConfig+0x104>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d101      	bne.n	8002bb0 <TIM_Base_SetConfig+0x9c>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <TIM_Base_SetConfig+0x9e>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d103      	bne.n	8002bee <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	615a      	str	r2, [r3, #20]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800

08002c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e032      	b.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	6852      	ldr	r2, [r2, #4]
 8002c94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c98:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	6851      	ldr	r1, [r2, #4]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cba:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	6891      	ldr	r1, [r2, #8]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	6852      	ldr	r2, [r2, #4]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
} 
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e03f      	b.n	8002d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f003 ff32 	bl	8006b7c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d2e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fb87 	bl	8003444 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	6912      	ldr	r2, [r2, #16]
 8002d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	6952      	ldr	r2, [r2, #20]
 8002d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d54:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d64:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d166      	bne.n	8002e70 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_UART_Receive_DMA+0x26>
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e05f      	b.n	8002e72 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Receive_DMA+0x38>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e058      	b.n	8002e72 <HAL_UART_Receive_DMA+0xea>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	88fa      	ldrh	r2, [r7, #6]
 8002dd2:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2222      	movs	r2, #34	; 0x22
 8002dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_UART_Receive_DMA+0xf4>)
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_UART_Receive_DMA+0xf8>)
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_UART_Receive_DMA+0xfc>)
 8002df8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	2200      	movs	r2, #0
 8002e00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	f7fe fa57 	bl	80012cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	6952      	ldr	r2, [r2, #20]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	6952      	ldr	r2, [r2, #20]
 8002e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	080030d1 	.word	0x080030d1
 8002e80:	08003139 	.word	0x08003139
 8002e84:	08003155 	.word	0x08003155

08002e88 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_UART_IRQHandler+0x52>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa3d 	bl	8003352 <UART_Receive_IT>
      return;
 8002ed8:	e0cc      	b.n	8003074 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80ab 	beq.w	8003038 <HAL_UART_IRQHandler+0x1b0>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x70>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80a0 	beq.w	8003038 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_UART_IRQHandler+0x90>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_UART_IRQHandler+0xb0>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	f043 0202 	orr.w	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_UART_IRQHandler+0xd0>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_UART_IRQHandler+0xf0>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d078      	beq.n	8003072 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_UART_IRQHandler+0x112>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f9dc 	bl	8003352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x13a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d031      	beq.n	8003026 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f926 	bl	8003214 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d023      	beq.n	800301e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	6952      	ldr	r2, [r2, #20]
 8002fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe4:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d013      	beq.n	8003016 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_UART_IRQHandler+0x1f4>)
 8002ff4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe f9c6 	bl	800138c <HAL_DMA_Abort_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003010:	4610      	mov	r0, r2
 8003012:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	e00e      	b.n	8003034 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f850 	bl	80030bc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	e00a      	b.n	8003034 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f84c 	bl	80030bc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	e006      	b.n	8003034 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f848 	bl	80030bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003032:	e01e      	b.n	8003072 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	bf00      	nop
    return;
 8003036:	e01c      	b.n	8003072 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_UART_IRQHandler+0x1cc>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f913 	bl	8003278 <UART_Transmit_IT>
    return;
 8003052:	e00f      	b.n	8003074 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_UART_IRQHandler+0x1ec>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f95a 	bl	8003322 <UART_EndTransmit_IT>
    return;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003072:	bf00      	nop
  }
}
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	08003251 	.word	0x08003251

08003080 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d11e      	bne.n	800312a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	68d2      	ldr	r2, [r2, #12]
 80030fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003100:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	6952      	ldr	r2, [r2, #20]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	6952      	ldr	r2, [r2, #20]
 800311c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003120:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ffb2 	bl	8003094 <HAL_UART_RxCpltCallback>
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ffae 	bl	80030a8 <HAL_UART_RxHalfCpltCallback>
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b21      	cmp	r3, #33	; 0x21
 8003186:	d108      	bne.n	800319a <UART_DMAError+0x46>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003194:	68b8      	ldr	r0, [r7, #8]
 8003196:	f000 f827 	bl	80031e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b22      	cmp	r3, #34	; 0x22
 80031ba:	d108      	bne.n	80031ce <UART_DMAError+0x7a>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2200      	movs	r2, #0
 80031c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80031c8:	68b8      	ldr	r0, [r7, #8]
 80031ca:	f000 f823 	bl	8003214 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80031da:	68b8      	ldr	r0, [r7, #8]
 80031dc:	f7ff ff6e 	bl	80030bc <HAL_UART_ErrorCallback>
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	68d2      	ldr	r2, [r2, #12]
 80031fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80031fe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	68d2      	ldr	r2, [r2, #12]
 8003226:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800322a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	6952      	ldr	r2, [r2, #20]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff ff26 	bl	80030bc <HAL_UART_ErrorCallback>
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b21      	cmp	r3, #33	; 0x21
 800328a:	d143      	bne.n	8003314 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003294:	d119      	bne.n	80032ca <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	8812      	ldrh	r2, [r2, #0]
 80032a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a8:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	621a      	str	r2, [r3, #32]
 80032bc:	e00e      	b.n	80032dc <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]
 80032c8:	e008      	b.n	80032dc <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	1c58      	adds	r0, r3, #1
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	6208      	str	r0, [r1, #32]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4619      	mov	r1, r3
 80032ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10f      	bne.n	8003310 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	68d2      	ldr	r2, [r2, #12]
 80032fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	68d2      	ldr	r2, [r2, #12]
 8003334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003338:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fe9c 	bl	8003080 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b22      	cmp	r3, #34	; 0x22
 8003364:	d169      	bne.n	800343a <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d123      	bne.n	80033b8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10e      	bne.n	800339c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
 800339a:	e029      	b.n	80033f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
 80033b6:	e01b      	b.n	80033f0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6291      	str	r1, [r2, #40]	; 0x28
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	6852      	ldr	r2, [r2, #4]
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e00c      	b.n	80033f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6291      	str	r1, [r2, #40]	; 0x28
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4619      	mov	r1, r3
 80033fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003400:	2b00      	cmp	r3, #0
 8003402:	d118      	bne.n	8003436 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	6952      	ldr	r2, [r2, #20]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff fe31 	bl	8003094 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e002      	b.n	800343c <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800345e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003480:	f023 030c 	bic.w	r3, r3, #12
 8003484:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4313      	orrs	r3, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d4:	f040 80e4 	bne.w	80036a0 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4aab      	ldr	r2, [pc, #684]	; (800378c <UART_SetConfig+0x348>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <UART_SetConfig+0xa8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4aaa      	ldr	r2, [pc, #680]	; (8003790 <UART_SetConfig+0x34c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d16c      	bne.n	80035c6 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681c      	ldr	r4, [r3, #0]
 80034f0:	f7fe ffa6 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	4aa2      	ldr	r2, [pc, #648]	; (8003794 <UART_SetConfig+0x350>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	011d      	lsls	r5, r3, #4
 8003514:	f7fe ff94 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003518:	4602      	mov	r2, r0
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009a      	lsls	r2, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fbb2 f6f3 	udiv	r6, r2, r3
 800352e:	f7fe ff87 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003532:	4602      	mov	r2, r0
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a92      	ldr	r2, [pc, #584]	; (8003794 <UART_SetConfig+0x350>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2264      	movs	r2, #100	; 0x64
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	1af3      	subs	r3, r6, r3
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	3332      	adds	r3, #50	; 0x32
 800355c:	4a8d      	ldr	r2, [pc, #564]	; (8003794 <UART_SetConfig+0x350>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800356a:	441d      	add	r5, r3
 800356c:	f7fe ff68 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003570:	4602      	mov	r2, r0
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009a      	lsls	r2, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fbb2 f6f3 	udiv	r6, r2, r3
 8003586:	f7fe ff5b 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 800358a:	4602      	mov	r2, r0
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009a      	lsls	r2, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	4a7c      	ldr	r2, [pc, #496]	; (8003794 <UART_SetConfig+0x350>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2264      	movs	r2, #100	; 0x64
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	1af3      	subs	r3, r6, r3
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	3332      	adds	r3, #50	; 0x32
 80035b4:	4a77      	ldr	r2, [pc, #476]	; (8003794 <UART_SetConfig+0x350>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	442b      	add	r3, r5
 80035c2:	60a3      	str	r3, [r4, #8]
 80035c4:	e154      	b.n	8003870 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681c      	ldr	r4, [r3, #0]
 80035ca:	f7fe ff25 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009a      	lsls	r2, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <UART_SetConfig+0x350>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	011d      	lsls	r5, r3, #4
 80035ee:	f7fe ff13 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fbb2 f6f3 	udiv	r6, r2, r3
 8003608:	f7fe ff06 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 800360c:	4602      	mov	r2, r0
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009a      	lsls	r2, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <UART_SetConfig+0x350>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	2264      	movs	r2, #100	; 0x64
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	1af3      	subs	r3, r6, r3
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	3332      	adds	r3, #50	; 0x32
 8003636:	4a57      	ldr	r2, [pc, #348]	; (8003794 <UART_SetConfig+0x350>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003644:	441d      	add	r5, r3
 8003646:	f7fe fee7 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 800364a:	4602      	mov	r2, r0
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003660:	f7fe feda 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8003664:	4602      	mov	r2, r0
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009a      	lsls	r2, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4a46      	ldr	r2, [pc, #280]	; (8003794 <UART_SetConfig+0x350>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2264      	movs	r2, #100	; 0x64
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	1af3      	subs	r3, r6, r3
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <UART_SetConfig+0x350>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	442b      	add	r3, r5
 800369c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800369e:	e0e7      	b.n	8003870 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a39      	ldr	r2, [pc, #228]	; (800378c <UART_SetConfig+0x348>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <UART_SetConfig+0x270>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a38      	ldr	r2, [pc, #224]	; (8003790 <UART_SetConfig+0x34c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d171      	bne.n	8003798 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681c      	ldr	r4, [r3, #0]
 80036b8:	f7fe fec2 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009a      	lsls	r2, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4a30      	ldr	r2, [pc, #192]	; (8003794 <UART_SetConfig+0x350>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	011d      	lsls	r5, r3, #4
 80036dc:	f7fe feb0 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80036f6:	f7fe fea3 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <UART_SetConfig+0x350>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2264      	movs	r2, #100	; 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	1af3      	subs	r3, r6, r3
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	3332      	adds	r3, #50	; 0x32
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <UART_SetConfig+0x350>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003730:	441d      	add	r5, r3
 8003732:	f7fe fe85 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003736:	4602      	mov	r2, r0
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	fbb2 f6f3 	udiv	r6, r2, r3
 800374c:	f7fe fe78 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003750:	4602      	mov	r2, r0
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009a      	lsls	r2, r3, #2
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <UART_SetConfig+0x350>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2264      	movs	r2, #100	; 0x64
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	1af3      	subs	r3, r6, r3
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	3332      	adds	r3, #50	; 0x32
 800377a:	4a06      	ldr	r2, [pc, #24]	; (8003794 <UART_SetConfig+0x350>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	442b      	add	r3, r5
 8003788:	60a3      	str	r3, [r4, #8]
 800378a:	e071      	b.n	8003870 <UART_SetConfig+0x42c>
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681c      	ldr	r4, [r3, #0]
 800379c:	f7fe fe3c 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <UART_SetConfig+0x434>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	011d      	lsls	r5, r3, #4
 80037c0:	f7fe fe2a 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80037da:	f7fe fe1d 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 80037de:	4602      	mov	r2, r0
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009a      	lsls	r2, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <UART_SetConfig+0x434>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2264      	movs	r2, #100	; 0x64
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	1af3      	subs	r3, r6, r3
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	3332      	adds	r3, #50	; 0x32
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <UART_SetConfig+0x434>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003814:	441d      	add	r5, r3
 8003816:	f7fe fdff 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 800381a:	4602      	mov	r2, r0
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009a      	lsls	r2, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003830:	f7fe fdf2 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8003834:	4602      	mov	r2, r0
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009a      	lsls	r2, r3, #2
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <UART_SetConfig+0x434>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2264      	movs	r2, #100	; 0x64
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	1af3      	subs	r3, r6, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a06      	ldr	r2, [pc, #24]	; (8003878 <UART_SetConfig+0x434>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	442b      	add	r3, r5
 800386c:	60a3      	str	r3, [r4, #8]
}
 800386e:	e7ff      	b.n	8003870 <UART_SetConfig+0x42c>
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003878:	51eb851f 	.word	0x51eb851f

0800387c <str_to_int>:
char new_line[] = "\r\n";



uint8_t str_to_int(const char *str, uint32_t* steps, uint8_t* direction) //return if success
    {
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
    const char* str_copy = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
    uint8_t xreturn = 1;
 800388c:	2301      	movs	r3, #1
 800388e:	74fb      	strb	r3, [r7, #19]
    str_copy = str;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	617b      	str	r3, [r7, #20]

    if(*str_copy == '-')
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b2d      	cmp	r3, #45	; 0x2d
 800389a:	d108      	bne.n	80038ae <str_to_int+0x32>
	{
	str_copy++;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3301      	adds	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
	str++;//skip sign
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
	*direction = 1; //reverse direction
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
	}
    if(*str_copy  == '\0' || *str_copy == ' ')//first char is null or space
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <str_to_int+0x42>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d10f      	bne.n	80038de <str_to_int+0x62>
	{
	xreturn = 0;//not number
 80038be:	2300      	movs	r3, #0
 80038c0:	74fb      	strb	r3, [r7, #19]
	}
    while(*str_copy  != '\0' && *str_copy != ' ')
 80038c2:	e00c      	b.n	80038de <str_to_int+0x62>
	{
	if(*str_copy < '0' || *str_copy > '9')
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b2f      	cmp	r3, #47	; 0x2f
 80038ca:	d903      	bls.n	80038d4 <str_to_int+0x58>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b39      	cmp	r3, #57	; 0x39
 80038d2:	d901      	bls.n	80038d8 <str_to_int+0x5c>
	    {
	    xreturn = 0;//not number
 80038d4:	2300      	movs	r3, #0
 80038d6:	74fb      	strb	r3, [r7, #19]
	    }
	str_copy++;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
    while(*str_copy  != '\0' && *str_copy != ' ')
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <str_to_int+0x72>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d1ea      	bne.n	80038c4 <str_to_int+0x48>
	}
    if(xreturn)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <str_to_int+0x86>
	{
	*steps = atoi(str);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f003 f9dc 	bl	8006cb2 <atoi>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	601a      	str	r2, [r3, #0]
	}
    return xreturn;
 8003902:	7cfb      	ldrb	r3, [r7, #19]
    }
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <G28_callback>:


/*************************************************************************/
 BaseType_t G28_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
     const char* invalid_parameter = "Invalid parameter ";
 8003918:	4bbe      	ldr	r3, [pc, #760]	; (8003c14 <G28_callback+0x308>)
 800391a:	61fb      	str	r3, [r7, #28]
     const char* pcParameter;
     BaseType_t xParameterStringLength;
     UBaseType_t uxParameterNumber = 1;
 800391c:	2301      	movs	r3, #1
 800391e:	84fb      	strh	r3, [r7, #38]	; 0x26
     uint8_t cmd_rcv_flag[NO_OF_INDEX] ={0}; // command received for this axis
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
     uint8_t is_command_valid = 1;  //reset if any param is invalid
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     uint8_t param_received = 0; //set if at least one param is valid
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      write buffer length is adequate, so does not check for buffer overflows. */
     (void) pcCommandString;
     (void) xWriteBufferLen;

     // to make sure pcWriteBuffer is always null terminated.
     memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	2100      	movs	r1, #0
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f003 fc15 	bl	8007164 <memset>

     sprintf(pcWriteBuffer, "G28 Ok:\r\n");
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	49b6      	ldr	r1, [pc, #728]	; (8003c18 <G28_callback+0x30c>)
 800393e:	461a      	mov	r2, r3
 8003940:	460b      	mov	r3, r1
 8003942:	cb03      	ldmia	r3!, {r0, r1}
 8003944:	6010      	str	r0, [r2, #0]
 8003946:	6051      	str	r1, [r2, #4]
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	8113      	strh	r3, [r2, #8]

     do
 	{
 	/* Obtain the parameter string. */
 	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800394c:	f107 0216 	add.w	r2, r7, #22
 8003950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fd55 	bl	8004404 <FreeRTOS_CLIGetParameter>
 800395a:	61b8      	str	r0, [r7, #24]
 	uxParameterNumber, /* Return the next parameter. */
 	&xParameterStringLength /* Store the parameter string length. */
 	);

 	if (pcParameter != NULL)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 81a1 	beq.w	8003ca6 <G28_callback+0x39a>
 	    {

 	    uxParameterNumber++;
 8003964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003966:	3301      	adds	r3, #1
 8003968:	84fb      	strh	r3, [r7, #38]	; 0x26

 	    switch (*pcParameter)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	3b4d      	subs	r3, #77	; 0x4d
 8003970:	2b2d      	cmp	r3, #45	; 0x2d
 8003972:	f200 8179 	bhi.w	8003c68 <G28_callback+0x35c>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <G28_callback+0x70>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	08003bc7 	.word	0x08003bc7
 8003980:	08003c69 	.word	0x08003c69
 8003984:	08003c69 	.word	0x08003c69
 8003988:	08003c69 	.word	0x08003c69
 800398c:	08003c69 	.word	0x08003c69
 8003990:	08003c69 	.word	0x08003c69
 8003994:	08003c69 	.word	0x08003c69
 8003998:	08003c69 	.word	0x08003c69
 800399c:	08003c69 	.word	0x08003c69
 80039a0:	08003c69 	.word	0x08003c69
 80039a4:	08003c69 	.word	0x08003c69
 80039a8:	08003a35 	.word	0x08003a35
 80039ac:	08003abb 	.word	0x08003abb
 80039b0:	08003b41 	.word	0x08003b41
 80039b4:	08003c69 	.word	0x08003c69
 80039b8:	08003c69 	.word	0x08003c69
 80039bc:	08003c69 	.word	0x08003c69
 80039c0:	08003c69 	.word	0x08003c69
 80039c4:	08003c69 	.word	0x08003c69
 80039c8:	08003c69 	.word	0x08003c69
 80039cc:	08003c69 	.word	0x08003c69
 80039d0:	08003c69 	.word	0x08003c69
 80039d4:	08003c69 	.word	0x08003c69
 80039d8:	08003c69 	.word	0x08003c69
 80039dc:	08003c69 	.word	0x08003c69
 80039e0:	08003c69 	.word	0x08003c69
 80039e4:	08003c69 	.word	0x08003c69
 80039e8:	08003c69 	.word	0x08003c69
 80039ec:	08003c69 	.word	0x08003c69
 80039f0:	08003c69 	.word	0x08003c69
 80039f4:	08003c69 	.word	0x08003c69
 80039f8:	08003c69 	.word	0x08003c69
 80039fc:	08003bc7 	.word	0x08003bc7
 8003a00:	08003c69 	.word	0x08003c69
 8003a04:	08003c69 	.word	0x08003c69
 8003a08:	08003c69 	.word	0x08003c69
 8003a0c:	08003c69 	.word	0x08003c69
 8003a10:	08003c69 	.word	0x08003c69
 8003a14:	08003c69 	.word	0x08003c69
 8003a18:	08003c69 	.word	0x08003c69
 8003a1c:	08003c69 	.word	0x08003c69
 8003a20:	08003c69 	.word	0x08003c69
 8003a24:	08003c69 	.word	0x08003c69
 8003a28:	08003a35 	.word	0x08003a35
 8003a2c:	08003abb 	.word	0x08003abb
 8003a30:	08003b41 	.word	0x08003b41
 		{

 	    case 'x':
 	    case 'X':
 		{
 		if (*(pcParameter+1) == ' ' || *(pcParameter+1) == '\0')
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3301      	adds	r3, #1
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d004      	beq.n	8003a48 <G28_callback+0x13c>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	3301      	adds	r3, #1
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11c      	bne.n	8003a82 <G28_callback+0x176>
 		    {
 		    //success
 		    cmd_rcv_flag[X_AXIS_INDEX] = 1;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	743b      	strb	r3, [r7, #16]
 		    param_received = 1;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 		    strncat(pcWriteBuffer, "X Home",strlen("X Home"));
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f7fc fbc0 	bl	80001d8 <strlen>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <G28_callback+0x310>)
 8003a62:	6810      	ldr	r0, [r2, #0]
 8003a64:	6018      	str	r0, [r3, #0]
 8003a66:	8891      	ldrh	r1, [r2, #4]
 8003a68:	7992      	ldrb	r2, [r2, #6]
 8003a6a:	8099      	strh	r1, [r3, #4]
 8003a6c:	719a      	strb	r2, [r3, #6]
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003a6e:	486c      	ldr	r0, [pc, #432]	; (8003c20 <G28_callback+0x314>)
 8003a70:	f7fc fbb2 	bl	80001d8 <strlen>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	4969      	ldr	r1, [pc, #420]	; (8003c20 <G28_callback+0x314>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f003 fb9e 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 		    }

 		}
 		break;
 8003a80:	e138      	b.n	8003cf4 <G28_callback+0x3e8>
 		    is_command_valid = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 		    strncat(pcWriteBuffer, invalid_parameter, strlen(invalid_parameter));
 8003a88:	69f8      	ldr	r0, [r7, #28]
 8003a8a:	f7fc fba5 	bl	80001d8 <strlen>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f003 fb91 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8003a9a:	8afb      	ldrh	r3, [r7, #22]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f003 fb8b 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003aa6:	485e      	ldr	r0, [pc, #376]	; (8003c20 <G28_callback+0x314>)
 8003aa8:	f7fc fb96 	bl	80001d8 <strlen>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	495b      	ldr	r1, [pc, #364]	; (8003c20 <G28_callback+0x314>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f003 fb82 	bl	80071bc <strncat>
 		break;
 8003ab8:	e11c      	b.n	8003cf4 <G28_callback+0x3e8>

 	    case 'y':
 	    case 'Y':
 		{
 		if (*(pcParameter+1) == ' ' || *(pcParameter+1) == '\0')
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3301      	adds	r3, #1
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d004      	beq.n	8003ace <G28_callback+0x1c2>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11c      	bne.n	8003b08 <G28_callback+0x1fc>
 		    {
 		    // string to int success
 		    cmd_rcv_flag[Y_AXIS_INDEX] = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	747b      	strb	r3, [r7, #17]
 		    param_received = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 		    strncat(pcWriteBuffer, "Y Home",strlen("Y Home"));
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f7fc fb7d 	bl	80001d8 <strlen>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a4f      	ldr	r2, [pc, #316]	; (8003c24 <G28_callback+0x318>)
 8003ae8:	6810      	ldr	r0, [r2, #0]
 8003aea:	6018      	str	r0, [r3, #0]
 8003aec:	8891      	ldrh	r1, [r2, #4]
 8003aee:	7992      	ldrb	r2, [r2, #6]
 8003af0:	8099      	strh	r1, [r3, #4]
 8003af2:	719a      	strb	r2, [r3, #6]
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003af4:	484a      	ldr	r0, [pc, #296]	; (8003c20 <G28_callback+0x314>)
 8003af6:	f7fc fb6f 	bl	80001d8 <strlen>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4948      	ldr	r1, [pc, #288]	; (8003c20 <G28_callback+0x314>)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f003 fb5b 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 		    }
 		}
 		break;
 8003b06:	e0f5      	b.n	8003cf4 <G28_callback+0x3e8>
 		    is_command_valid = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8003b0e:	69f8      	ldr	r0, [r7, #28]
 8003b10:	f7fc fb62 	bl	80001d8 <strlen>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	69f9      	ldr	r1, [r7, #28]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f003 fb4e 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8003b20:	8afb      	ldrh	r3, [r7, #22]
 8003b22:	461a      	mov	r2, r3
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f003 fb48 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003b2c:	483c      	ldr	r0, [pc, #240]	; (8003c20 <G28_callback+0x314>)
 8003b2e:	f7fc fb53 	bl	80001d8 <strlen>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	493a      	ldr	r1, [pc, #232]	; (8003c20 <G28_callback+0x314>)
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f003 fb3f 	bl	80071bc <strncat>
 		break;
 8003b3e:	e0d9      	b.n	8003cf4 <G28_callback+0x3e8>

 	    case 'z':
 	    case 'Z':
 		{
 		if (*(pcParameter+1) == ' ' || *(pcParameter+1) == '\0')
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	3301      	adds	r3, #1
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d004      	beq.n	8003b54 <G28_callback+0x248>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11c      	bne.n	8003b8e <G28_callback+0x282>
 		    {
 		    // success
 		    cmd_rcv_flag[Z_AXIS_INDEX] = 1;
 8003b54:	2301      	movs	r3, #1
 8003b56:	74bb      	strb	r3, [r7, #18]
 		    param_received = 1;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 		    strncat(pcWriteBuffer, "Z Home",strlen("Z Home"));
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7fc fb3a 	bl	80001d8 <strlen>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a2e      	ldr	r2, [pc, #184]	; (8003c28 <G28_callback+0x31c>)
 8003b6e:	6810      	ldr	r0, [r2, #0]
 8003b70:	6018      	str	r0, [r3, #0]
 8003b72:	8891      	ldrh	r1, [r2, #4]
 8003b74:	7992      	ldrb	r2, [r2, #6]
 8003b76:	8099      	strh	r1, [r3, #4]
 8003b78:	719a      	strb	r2, [r3, #6]
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003b7a:	4829      	ldr	r0, [pc, #164]	; (8003c20 <G28_callback+0x314>)
 8003b7c:	f7fc fb2c 	bl	80001d8 <strlen>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4926      	ldr	r1, [pc, #152]	; (8003c20 <G28_callback+0x314>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f003 fb18 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 		    }
 		}
 		break;
 8003b8c:	e0b2      	b.n	8003cf4 <G28_callback+0x3e8>
 		    is_command_valid = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8003b94:	69f8      	ldr	r0, [r7, #28]
 8003b96:	f7fc fb1f 	bl	80001d8 <strlen>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	69f9      	ldr	r1, [r7, #28]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f003 fb0b 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8003ba6:	8afb      	ldrh	r3, [r7, #22]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	69b9      	ldr	r1, [r7, #24]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f003 fb05 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003bb2:	481b      	ldr	r0, [pc, #108]	; (8003c20 <G28_callback+0x314>)
 8003bb4:	f7fc fb10 	bl	80001d8 <strlen>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4918      	ldr	r1, [pc, #96]	; (8003c20 <G28_callback+0x314>)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f003 fafc 	bl	80071bc <strncat>
 		break;
 8003bc4:	e096      	b.n	8003cf4 <G28_callback+0x3e8>

 	    case 'm':
 	    case 'M':
 		{
 		if (*(pcParameter+1) == ' ' || *(pcParameter+1) == '\0')
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d004      	beq.n	8003bda <G28_callback+0x2ce>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d12a      	bne.n	8003c30 <G28_callback+0x324>
 		    {
 		    // success
 		    cmd_rcv_flag[M_AXIS_INDEX] = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	74fb      	strb	r3, [r7, #19]
 		    param_received = 1;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 		    strncat(pcWriteBuffer, "M Home",strlen("M Home"));
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7fc faf7 	bl	80001d8 <strlen>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <G28_callback+0x320>)
 8003bf4:	6810      	ldr	r0, [r2, #0]
 8003bf6:	6018      	str	r0, [r3, #0]
 8003bf8:	8891      	ldrh	r1, [r2, #4]
 8003bfa:	7992      	ldrb	r2, [r2, #6]
 8003bfc:	8099      	strh	r1, [r3, #4]
 8003bfe:	719a      	strb	r2, [r3, #6]
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003c00:	4807      	ldr	r0, [pc, #28]	; (8003c20 <G28_callback+0x314>)
 8003c02:	f7fc fae9 	bl	80001d8 <strlen>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4905      	ldr	r1, [pc, #20]	; (8003c20 <G28_callback+0x314>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f003 fad5 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 		    }
 		}
 		break;
 8003c12:	e06f      	b.n	8003cf4 <G28_callback+0x3e8>
 8003c14:	08007a80 	.word	0x08007a80
 8003c18:	08007a94 	.word	0x08007a94
 8003c1c:	08007aa0 	.word	0x08007aa0
 8003c20:	20000008 	.word	0x20000008
 8003c24:	08007aa8 	.word	0x08007aa8
 8003c28:	08007ab0 	.word	0x08007ab0
 8003c2c:	08007ab8 	.word	0x08007ab8
 		    is_command_valid = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8003c36:	69f8      	ldr	r0, [r7, #28]
 8003c38:	f7fc face 	bl	80001d8 <strlen>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f003 faba 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8003c48:	8afb      	ldrh	r3, [r7, #22]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f003 fab4 	bl	80071bc <strncat>
 		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003c54:	484c      	ldr	r0, [pc, #304]	; (8003d88 <G28_callback+0x47c>)
 8003c56:	f7fc fabf 	bl	80001d8 <strlen>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	494a      	ldr	r1, [pc, #296]	; (8003d88 <G28_callback+0x47c>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f003 faab 	bl	80071bc <strncat>
 		break;
 8003c66:	e045      	b.n	8003cf4 <G28_callback+0x3e8>

 	    default:
 		{
 		//invalid parameter(s)
 		param_received = 1; //received but invalid
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 		is_command_valid = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 		strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8003c74:	69f8      	ldr	r0, [r7, #28]
 8003c76:	f7fc faaf 	bl	80001d8 <strlen>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f003 fa9b 	bl	80071bc <strncat>
 		strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8003c86:	8afb      	ldrh	r3, [r7, #22]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f003 fa95 	bl	80071bc <strncat>
 		strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003c92:	483d      	ldr	r0, [pc, #244]	; (8003d88 <G28_callback+0x47c>)
 8003c94:	f7fc faa0 	bl	80001d8 <strlen>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	493a      	ldr	r1, [pc, #232]	; (8003d88 <G28_callback+0x47c>)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f003 fa8c 	bl	80071bc <strncat>
 8003ca4:	e026      	b.n	8003cf4 <G28_callback+0x3e8>
 		}

 		}
 	    }
 	else if(param_received == 0 && is_command_valid == 1) //zero param entered
 8003ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d122      	bne.n	8003cf4 <G28_callback+0x3e8>
 8003cae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d11e      	bne.n	8003cf4 <G28_callback+0x3e8>
 	    {
 		is_command_valid = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 		strncat(pcWriteBuffer, "Parameter Not Entered",strlen("Parameter Not Entered"));
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7fc fa8b 	bl	80001d8 <strlen>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a30      	ldr	r2, [pc, #192]	; (8003d8c <G28_callback+0x480>)
 8003ccc:	461d      	mov	r5, r3
 8003cce:	4614      	mov	r4, r2
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	6028      	str	r0, [r5, #0]
 8003cd4:	6069      	str	r1, [r5, #4]
 8003cd6:	60aa      	str	r2, [r5, #8]
 8003cd8:	60eb      	str	r3, [r5, #12]
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	6128      	str	r0, [r5, #16]
 8003cde:	88a3      	ldrh	r3, [r4, #4]
 8003ce0:	82ab      	strh	r3, [r5, #20]
 		strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003ce2:	4829      	ldr	r0, [pc, #164]	; (8003d88 <G28_callback+0x47c>)
 8003ce4:	f7fc fa78 	bl	80001d8 <strlen>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	4926      	ldr	r1, [pc, #152]	; (8003d88 <G28_callback+0x47c>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f003 fa64 	bl	80071bc <strncat>
 	    }


 	}
     while (pcParameter != NULL);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f ae28 	bne.w	800394c <G28_callback+0x40>

     /*Execute command*/

     if (is_command_valid == 1 && param_received == 1)
 8003cfc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d13c      	bne.n	8003d7e <G28_callback+0x472>
 8003d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d138      	bne.n	8003d7e <G28_callback+0x472>
 	{

	    uint8_t perform_action = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    if (cmd_rcv_flag[X_AXIS_INDEX])
 8003d12:	7c3b      	ldrb	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <G28_callback+0x41e>
		{
		perform_action = 1;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		L6470_PrepareGoUntil(X_AXIS_INDEX, L6470_ACT_RST_ID,
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <G28_callback+0x484>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	2100      	movs	r1, #0
 8003d24:	2000      	movs	r0, #0
 8003d26:	f001 fc21 	bl	800556c <L6470_PrepareGoUntil>
			L6470_DIR_FWD_ID, 200000);
		}
	    if (cmd_rcv_flag[Y_AXIS_INDEX])
 8003d2a:	7c7b      	ldrb	r3, [r7, #17]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <G28_callback+0x436>
		{
		perform_action = 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		L6470_PrepareGoUntil(Y_AXIS_INDEX, L6470_ACT_RST_ID,
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <G28_callback+0x484>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f001 fc15 	bl	800556c <L6470_PrepareGoUntil>
			L6470_DIR_REV_ID, 200000);
		}
	    if (cmd_rcv_flag[Z_AXIS_INDEX])
 8003d42:	7cbb      	ldrb	r3, [r7, #18]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <G28_callback+0x44e>
		{
		perform_action = 1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		L6470_PrepareGoUntil(Z_AXIS_INDEX, L6470_ACT_RST_ID,
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <G28_callback+0x484>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	2100      	movs	r1, #0
 8003d54:	2002      	movs	r0, #2
 8003d56:	f001 fc09 	bl	800556c <L6470_PrepareGoUntil>
			L6470_DIR_REV_ID, 200000);
		}
	    if (cmd_rcv_flag[M_AXIS_INDEX])
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <G28_callback+0x466>
		{
		perform_action = 1;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		L6470_PrepareGoUntil(M_AXIS_INDEX, L6470_ACT_RST_ID,
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <G28_callback+0x484>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2003      	movs	r0, #3
 8003d6e:	f001 fbfd 	bl	800556c <L6470_PrepareGoUntil>
			L6470_DIR_REV_ID, 200000);
		}
	    if (perform_action)
 8003d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <G28_callback+0x472>
		{
		L6470_PerformPreparedApplicationCommand();
 8003d7a:	f001 fcf3 	bl	8005764 <L6470_PerformPreparedApplicationCommand>
		}

 	}

     return pdFALSE;
 8003d7e:	2300      	movs	r3, #0
    }
 8003d80:	4618      	mov	r0, r3
 8003d82:	3728      	adds	r7, #40	; 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bdb0      	pop	{r4, r5, r7, pc}
 8003d88:	20000008 	.word	0x20000008
 8003d8c:	08007ac0 	.word	0x08007ac0
 8003d90:	00030d40 	.word	0x00030d40

08003d94 <G1_callback>:

/*************************************************************************/

BaseType_t G1_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "G1 OK\r\n" );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <G1_callback+0x28>)
 8003da4:	461a      	mov	r2, r3
 8003da6:	460b      	mov	r3, r1
 8003da8:	cb03      	ldmia	r3!, {r0, r1}
 8003daa:	6010      	str	r0, [r2, #0]
 8003dac:	6051      	str	r1, [r2, #4]
    return pdFALSE;
 8003dae:	2300      	movs	r3, #0
    }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	08007af8 	.word	0x08007af8

08003dc0 <G0_callback>:


/*************************************************************************/

BaseType_t G0_callback(char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString)
    {
 8003dc0:	b5b0      	push	{r4, r5, r7, lr}
 8003dc2:	b08e      	sub	sp, #56	; 0x38
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

    const char* invalid_parameter = "Invalid parameter ";
 8003dcc:	4bba      	ldr	r3, [pc, #744]	; (80040b8 <G0_callback+0x2f8>)
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
    const char* pcParameter;
    BaseType_t xParameterStringLength;
    UBaseType_t uxParameterNumber = 1;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint32_t motor_steps[NO_OF_MOTORS] = {0};
 8003dd4:	f107 0318 	add.w	r3, r7, #24
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
    uint8_t  motor_direction[NO_OF_MOTORS] = {0};
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
    uint8_t is_command_valid = 1;  //reset if any param is invalid
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t param_received = 0; //set if at least one param is valid
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
     write buffer length is adequate, so does not check for buffer overflows. */
    (void) pcCommandString;
    (void) xWriteBufferLen;

    // to make sure pcWriteBuffer is always null terminated.
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	2100      	movs	r1, #0
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f003 f9b4 	bl	8007164 <memset>

    sprintf(pcWriteBuffer, "G0 Ok:\r\n");
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	49af      	ldr	r1, [pc, #700]	; (80040bc <G0_callback+0x2fc>)
 8003e00:	461a      	mov	r2, r3
 8003e02:	460b      	mov	r3, r1
 8003e04:	cb03      	ldmia	r3!, {r0, r1}
 8003e06:	6010      	str	r0, [r2, #0]
 8003e08:	6051      	str	r1, [r2, #4]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	7213      	strb	r3, [r2, #8]

    do
	{
	/* Obtain the parameter string. */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8003e0e:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8003e12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 faf4 	bl	8004404 <FreeRTOS_CLIGetParameter>
 8003e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
	uxParameterNumber, /* Return the next parameter. */
	&xParameterStringLength /* Store the parameter string length. */
	);

	if (pcParameter != NULL)
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 81bf 	beq.w	80041a4 <G0_callback+0x3e4>
	    {

	    uxParameterNumber++;
 8003e26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e28:	3301      	adds	r3, #1
 8003e2a:	86fb      	strh	r3, [r7, #54]	; 0x36

	    switch (*pcParameter)
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	3b4d      	subs	r3, #77	; 0x4d
 8003e32:	2b2d      	cmp	r3, #45	; 0x2d
 8003e34:	f200 8197 	bhi.w	8004166 <G0_callback+0x3a6>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <G0_callback+0x80>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	080040d1 	.word	0x080040d1
 8003e44:	08004167 	.word	0x08004167
 8003e48:	08004167 	.word	0x08004167
 8003e4c:	08004167 	.word	0x08004167
 8003e50:	08004167 	.word	0x08004167
 8003e54:	08004167 	.word	0x08004167
 8003e58:	08004167 	.word	0x08004167
 8003e5c:	08004167 	.word	0x08004167
 8003e60:	08004167 	.word	0x08004167
 8003e64:	08004167 	.word	0x08004167
 8003e68:	08004167 	.word	0x08004167
 8003e6c:	08003ef9 	.word	0x08003ef9
 8003e70:	08003f8b 	.word	0x08003f8b
 8003e74:	08004021 	.word	0x08004021
 8003e78:	08004167 	.word	0x08004167
 8003e7c:	08004167 	.word	0x08004167
 8003e80:	08004167 	.word	0x08004167
 8003e84:	08004167 	.word	0x08004167
 8003e88:	08004167 	.word	0x08004167
 8003e8c:	08004167 	.word	0x08004167
 8003e90:	08004167 	.word	0x08004167
 8003e94:	08004167 	.word	0x08004167
 8003e98:	08004167 	.word	0x08004167
 8003e9c:	08004167 	.word	0x08004167
 8003ea0:	08004167 	.word	0x08004167
 8003ea4:	08004167 	.word	0x08004167
 8003ea8:	08004167 	.word	0x08004167
 8003eac:	08004167 	.word	0x08004167
 8003eb0:	08004167 	.word	0x08004167
 8003eb4:	08004167 	.word	0x08004167
 8003eb8:	08004167 	.word	0x08004167
 8003ebc:	08004167 	.word	0x08004167
 8003ec0:	080040d1 	.word	0x080040d1
 8003ec4:	08004167 	.word	0x08004167
 8003ec8:	08004167 	.word	0x08004167
 8003ecc:	08004167 	.word	0x08004167
 8003ed0:	08004167 	.word	0x08004167
 8003ed4:	08004167 	.word	0x08004167
 8003ed8:	08004167 	.word	0x08004167
 8003edc:	08004167 	.word	0x08004167
 8003ee0:	08004167 	.word	0x08004167
 8003ee4:	08004167 	.word	0x08004167
 8003ee8:	08004167 	.word	0x08004167
 8003eec:	08003ef9 	.word	0x08003ef9
 8003ef0:	08003f8b 	.word	0x08003f8b
 8003ef4:	08004021 	.word	0x08004021
		{

	    case 'x':
	    case 'X':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[X_AXIS_INDEX], &motor_direction[X_AXIS_INDEX]) == 1)
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efa:	3301      	adds	r3, #1
 8003efc:	f107 0214 	add.w	r2, r7, #20
 8003f00:	f107 0118 	add.w	r1, r7, #24
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fcb9 	bl	800387c <str_to_int>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d120      	bne.n	8003f52 <G0_callback+0x192>
		    {
		    // string to int success
		    param_received = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "X=",2);
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7fc f95e 	bl	80001d8 <strlen>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	4a66      	ldr	r2, [pc, #408]	; (80040c0 <G0_callback+0x300>)
 8003f26:	8811      	ldrh	r1, [r2, #0]
 8003f28:	7892      	ldrb	r2, [r2, #2]
 8003f2a:	8019      	strh	r1, [r3, #0]
 8003f2c:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	3301      	adds	r3, #1
 8003f32:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003f34:	3a01      	subs	r2, #1
 8003f36:	4619      	mov	r1, r3
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f003 f93f 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003f3e:	4861      	ldr	r0, [pc, #388]	; (80040c4 <G0_callback+0x304>)
 8003f40:	f7fc f94a 	bl	80001d8 <strlen>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	495e      	ldr	r1, [pc, #376]	; (80040c4 <G0_callback+0x304>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f003 f936 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
		    }

		}
		break;
 8003f50:	e14f      	b.n	80041f2 <G0_callback+0x432>
		    is_command_valid = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter, strlen(invalid_parameter));
 8003f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f5a:	f7fc f93d 	bl	80001d8 <strlen>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f003 f929 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8003f6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f003 f923 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003f76:	4853      	ldr	r0, [pc, #332]	; (80040c4 <G0_callback+0x304>)
 8003f78:	f7fc f92e 	bl	80001d8 <strlen>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4950      	ldr	r1, [pc, #320]	; (80040c4 <G0_callback+0x304>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f003 f91a 	bl	80071bc <strncat>
		break;
 8003f88:	e133      	b.n	80041f2 <G0_callback+0x432>

	    case 'y':
	    case 'Y':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[Y_AXIS_INDEX], &motor_direction[Y_AXIS_INDEX]) == 1)
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	1c58      	adds	r0, r3, #1
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	f107 0318 	add.w	r3, r7, #24
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f7ff fc6e 	bl	800387c <str_to_int>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d120      	bne.n	8003fe8 <G0_callback+0x228>
		    {
		    // string to int success
		    param_received = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "Y=",2);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f7fc f913 	bl	80001d8 <strlen>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a43      	ldr	r2, [pc, #268]	; (80040c8 <G0_callback+0x308>)
 8003fbc:	8811      	ldrh	r1, [r2, #0]
 8003fbe:	7892      	ldrb	r2, [r2, #2]
 8003fc0:	8019      	strh	r1, [r3, #0]
 8003fc2:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f003 f8f4 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8003fd4:	483b      	ldr	r0, [pc, #236]	; (80040c4 <G0_callback+0x304>)
 8003fd6:	f7fc f8ff 	bl	80001d8 <strlen>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4939      	ldr	r1, [pc, #228]	; (80040c4 <G0_callback+0x304>)
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f003 f8eb 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
		    }
		}
		break;
 8003fe6:	e104      	b.n	80041f2 <G0_callback+0x432>
		    is_command_valid = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8003fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ff0:	f7fc f8f2 	bl	80001d8 <strlen>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f003 f8de 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8004000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004002:	461a      	mov	r2, r3
 8004004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f003 f8d8 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 800400c:	482d      	ldr	r0, [pc, #180]	; (80040c4 <G0_callback+0x304>)
 800400e:	f7fc f8e3 	bl	80001d8 <strlen>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	492b      	ldr	r1, [pc, #172]	; (80040c4 <G0_callback+0x304>)
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f003 f8cf 	bl	80071bc <strncat>
		break;
 800401e:	e0e8      	b.n	80041f2 <G0_callback+0x432>

	    case 'z':
	    case 'Z':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[Z_AXIS_INDEX], &motor_direction[Z_AXIS_INDEX]) == 1)
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	1c58      	adds	r0, r3, #1
 8004024:	f107 0314 	add.w	r3, r7, #20
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	f107 0318 	add.w	r3, r7, #24
 800402e:	3308      	adds	r3, #8
 8004030:	4619      	mov	r1, r3
 8004032:	f7ff fc23 	bl	800387c <str_to_int>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d120      	bne.n	800407e <G0_callback+0x2be>
		    {
		    // success
		    param_received = 1;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "Z=",2);
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7fc f8c8 	bl	80001d8 <strlen>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <G0_callback+0x30c>)
 8004052:	8811      	ldrh	r1, [r2, #0]
 8004054:	7892      	ldrb	r2, [r2, #2]
 8004056:	8019      	strh	r1, [r3, #0]
 8004058:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	3301      	adds	r3, #1
 800405e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004060:	3a01      	subs	r2, #1
 8004062:	4619      	mov	r1, r3
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f003 f8a9 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 800406a:	4816      	ldr	r0, [pc, #88]	; (80040c4 <G0_callback+0x304>)
 800406c:	f7fc f8b4 	bl	80001d8 <strlen>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	4913      	ldr	r1, [pc, #76]	; (80040c4 <G0_callback+0x304>)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f003 f8a0 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
		    }
		}
		break;
 800407c:	e0b9      	b.n	80041f2 <G0_callback+0x432>
		    is_command_valid = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8004084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004086:	f7fc f8a7 	bl	80001d8 <strlen>
 800408a:	4603      	mov	r3, r0
 800408c:	461a      	mov	r2, r3
 800408e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f003 f893 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8004096:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004098:	461a      	mov	r2, r3
 800409a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f003 f88d 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 80040a2:	4808      	ldr	r0, [pc, #32]	; (80040c4 <G0_callback+0x304>)
 80040a4:	f7fc f898 	bl	80001d8 <strlen>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	4905      	ldr	r1, [pc, #20]	; (80040c4 <G0_callback+0x304>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f003 f884 	bl	80071bc <strncat>
		break;
 80040b4:	e09d      	b.n	80041f2 <G0_callback+0x432>
 80040b6:	bf00      	nop
 80040b8:	08007a80 	.word	0x08007a80
 80040bc:	08007b1c 	.word	0x08007b1c
 80040c0:	08007b28 	.word	0x08007b28
 80040c4:	20000008 	.word	0x20000008
 80040c8:	08007b2c 	.word	0x08007b2c
 80040cc:	08007b30 	.word	0x08007b30

	    case 'm':
	    case 'M':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[M_AXIS_INDEX], &motor_direction[M_AXIS_INDEX]) == 1)
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	1c58      	adds	r0, r3, #1
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	1cda      	adds	r2, r3, #3
 80040da:	f107 0318 	add.w	r3, r7, #24
 80040de:	330c      	adds	r3, #12
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7ff fbcb 	bl	800387c <str_to_int>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d120      	bne.n	800412e <G0_callback+0x36e>
		    {
		    // success
		    param_received = 1;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "M=",2);
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7fc f870 	bl	80001d8 <strlen>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	4a51      	ldr	r2, [pc, #324]	; (8004248 <G0_callback+0x488>)
 8004102:	8811      	ldrh	r1, [r2, #0]
 8004104:	7892      	ldrb	r2, [r2, #2]
 8004106:	8019      	strh	r1, [r3, #0]
 8004108:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	3301      	adds	r3, #1
 800410e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004110:	3a01      	subs	r2, #1
 8004112:	4619      	mov	r1, r3
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f003 f851 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 800411a:	484c      	ldr	r0, [pc, #304]	; (800424c <G0_callback+0x48c>)
 800411c:	f7fc f85c 	bl	80001d8 <strlen>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	4949      	ldr	r1, [pc, #292]	; (800424c <G0_callback+0x48c>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f003 f848 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
		    }
		}
		break;
 800412c:	e061      	b.n	80041f2 <G0_callback+0x432>
		    is_command_valid = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8004134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004136:	f7fc f84f 	bl	80001d8 <strlen>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f003 f83b 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8004146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004148:	461a      	mov	r2, r3
 800414a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f003 f835 	bl	80071bc <strncat>
		    strncat(pcWriteBuffer, new_line, strlen(new_line));
 8004152:	483e      	ldr	r0, [pc, #248]	; (800424c <G0_callback+0x48c>)
 8004154:	f7fc f840 	bl	80001d8 <strlen>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	493b      	ldr	r1, [pc, #236]	; (800424c <G0_callback+0x48c>)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f003 f82c 	bl	80071bc <strncat>
		break;
 8004164:	e045      	b.n	80041f2 <G0_callback+0x432>

	    default:
		{
		//invalid parameter(s)
		param_received = 1; //received but invalid
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		is_command_valid = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8004172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004174:	f7fc f830 	bl	80001d8 <strlen>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f003 f81c 	bl	80071bc <strncat>
		strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8004184:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004186:	461a      	mov	r2, r3
 8004188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f003 f816 	bl	80071bc <strncat>
		strncat(pcWriteBuffer, new_line, strlen(new_line));
 8004190:	482e      	ldr	r0, [pc, #184]	; (800424c <G0_callback+0x48c>)
 8004192:	f7fc f821 	bl	80001d8 <strlen>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	492c      	ldr	r1, [pc, #176]	; (800424c <G0_callback+0x48c>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f003 f80d 	bl	80071bc <strncat>
 80041a2:	e026      	b.n	80041f2 <G0_callback+0x432>
		}

		}
	    }
	else if(param_received == 0 && is_command_valid == 1) //zero param entered
 80041a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d122      	bne.n	80041f2 <G0_callback+0x432>
 80041ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d11e      	bne.n	80041f2 <G0_callback+0x432>
	    {
		is_command_valid = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		strncat(pcWriteBuffer, "Parameter Not Entered",strlen("Parameter Not Entered"));
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7fc f80c 	bl	80001d8 <strlen>
 80041c0:	4603      	mov	r3, r0
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	4a21      	ldr	r2, [pc, #132]	; (8004250 <G0_callback+0x490>)
 80041ca:	461d      	mov	r5, r3
 80041cc:	4614      	mov	r4, r2
 80041ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041d0:	6028      	str	r0, [r5, #0]
 80041d2:	6069      	str	r1, [r5, #4]
 80041d4:	60aa      	str	r2, [r5, #8]
 80041d6:	60eb      	str	r3, [r5, #12]
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	6128      	str	r0, [r5, #16]
 80041dc:	88a3      	ldrh	r3, [r4, #4]
 80041de:	82ab      	strh	r3, [r5, #20]
		strncat(pcWriteBuffer, new_line, strlen(new_line));
 80041e0:	481a      	ldr	r0, [pc, #104]	; (800424c <G0_callback+0x48c>)
 80041e2:	f7fb fff9 	bl	80001d8 <strlen>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	4918      	ldr	r1, [pc, #96]	; (800424c <G0_callback+0x48c>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f002 ffe5 	bl	80071bc <strncat>
	    }


	}
    while (pcParameter != NULL);
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f ae0a 	bne.w	8003e0e <G0_callback+0x4e>

    /*Execute command*/

    if (is_command_valid == 1 && param_received == 1)
 80041fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d11d      	bne.n	800423e <G0_callback+0x47e>
 8004202:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004206:	2b01      	cmp	r3, #1
 8004208:	d119      	bne.n	800423e <G0_callback+0x47e>
	{

	L6470_PrepareMove(X_AXIS_INDEX, motor_direction[X_AXIS_INDEX],
 800420a:	7d3b      	ldrb	r3, [r7, #20]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4619      	mov	r1, r3
 8004210:	2000      	movs	r0, #0
 8004212:	f001 f961 	bl	80054d8 <L6470_PrepareMove>
		motor_steps[X_AXIS_INDEX]);

	L6470_PrepareMove(Y_AXIS_INDEX, motor_direction[Y_AXIS_INDEX],
 8004216:	7d7b      	ldrb	r3, [r7, #21]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	4619      	mov	r1, r3
 800421c:	2001      	movs	r0, #1
 800421e:	f001 f95b 	bl	80054d8 <L6470_PrepareMove>
		motor_steps[Y_AXIS_INDEX]);

	L6470_PrepareMove(Z_AXIS_INDEX, motor_direction[Z_AXIS_INDEX],
 8004222:	7dbb      	ldrb	r3, [r7, #22]
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	4619      	mov	r1, r3
 8004228:	2002      	movs	r0, #2
 800422a:	f001 f955 	bl	80054d8 <L6470_PrepareMove>
		motor_steps[Z_AXIS_INDEX]);

	L6470_PrepareMove(M_AXIS_INDEX, motor_direction[M_AXIS_INDEX],
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	4619      	mov	r1, r3
 8004234:	2003      	movs	r0, #3
 8004236:	f001 f94f 	bl	80054d8 <L6470_PrepareMove>
		motor_steps[M_AXIS_INDEX]);

	L6470_PerformPreparedApplicationCommand();
 800423a:	f001 fa93 	bl	8005764 <L6470_PerformPreparedApplicationCommand>

	}

    return pdFALSE;
 800423e:	2300      	movs	r3, #0

    }
 8004240:	4618      	mov	r0, r3
 8004242:	3738      	adds	r7, #56	; 0x38
 8004244:	46bd      	mov	sp, r7
 8004246:	bdb0      	pop	{r4, r5, r7, pc}
 8004248:	08007b34 	.word	0x08007b34
 800424c:	20000008 	.word	0x20000008
 8004250:	08007ac0 	.word	0x08007ac0

08004254 <CLI_Commands_Register>:
    };
/*************************************************************************/


void CLI_Commands_Register()
    {
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
    FreeRTOS_CLIRegisterCommand(&G28_defination);
 8004258:	4809      	ldr	r0, [pc, #36]	; (8004280 <CLI_Commands_Register+0x2c>)
 800425a:	f000 f81d 	bl	8004298 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&g28_defination);
 800425e:	4809      	ldr	r0, [pc, #36]	; (8004284 <CLI_Commands_Register+0x30>)
 8004260:	f000 f81a 	bl	8004298 <FreeRTOS_CLIRegisterCommand>

    FreeRTOS_CLIRegisterCommand(&G1_defination);
 8004264:	4808      	ldr	r0, [pc, #32]	; (8004288 <CLI_Commands_Register+0x34>)
 8004266:	f000 f817 	bl	8004298 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&g1_defination);
 800426a:	4808      	ldr	r0, [pc, #32]	; (800428c <CLI_Commands_Register+0x38>)
 800426c:	f000 f814 	bl	8004298 <FreeRTOS_CLIRegisterCommand>


    FreeRTOS_CLIRegisterCommand(&G0_defination);
 8004270:	4807      	ldr	r0, [pc, #28]	; (8004290 <CLI_Commands_Register+0x3c>)
 8004272:	f000 f811 	bl	8004298 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&g0_defination);
 8004276:	4807      	ldr	r0, [pc, #28]	; (8004294 <CLI_Commands_Register+0x40>)
 8004278:	f000 f80e 	bl	8004298 <FreeRTOS_CLIRegisterCommand>
    }
 800427c:	bf00      	nop
 800427e:	bd80      	pop	{r7, pc}
 8004280:	08007cf0 	.word	0x08007cf0
 8004284:	08007d00 	.word	0x08007d00
 8004288:	08007d10 	.word	0x08007d10
 800428c:	08007d20 	.word	0x08007d20
 8004290:	08007d30 	.word	0x08007d30
 8004294:	08007d40 	.word	0x08007d40

08004298 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand(const CLI_Command_Definition_t * const pxCommandToRegister)
    {
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
    static CLI_Definition_List_Item_t *pxLastCommandInList =  &xRegisteredCommands;
    CLI_Definition_List_Item_t *pxNewListItem;
    BaseType_t xReturn = pdFAIL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	81fb      	strh	r3, [r7, #14]

    /* Check the parameter is not NULL. */

    /* Create a new list item that will reference the command being registered. */
    pxNewListItem = (CLI_Definition_List_Item_t *)malloc(sizeof(CLI_Definition_List_Item_t));
 80042a4:	2008      	movs	r0, #8
 80042a6:	f002 fd47 	bl	8006d38 <malloc>
 80042aa:	4603      	mov	r3, r0
 80042ac:	60bb      	str	r3, [r7, #8]

    if (pxNewListItem != NULL)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <FreeRTOS_CLIRegisterCommand+0x3a>
	{
	    {
	    /* Reference the command being registered from the newly created
	     list item. */
	    pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]

	    /* The new list item will get added to the end of the list, so
	     pxNext has nowhere to point. */
	    pxNewListItem->pxNext = NULL;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	605a      	str	r2, [r3, #4]

	    /* Add the newly created list item to the end of the already existing
	     list. */
	    pxLastCommandInList->pxNext = pxNewListItem;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <FreeRTOS_CLIRegisterCommand+0x44>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]

	    /* Set the end of list marker to the new list item. */
	    pxLastCommandInList = pxNewListItem;
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <FreeRTOS_CLIRegisterCommand+0x44>)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6013      	str	r3, [r2, #0]
	    }

	xReturn = pdPASS;
 80042ce:	2301      	movs	r3, #1
 80042d0:	81fb      	strh	r3, [r7, #14]
	}

    return xReturn;
 80042d2:	89fb      	ldrh	r3, [r7, #14]
    }
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000014 	.word	0x20000014

080042e0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	83fb      	strh	r3, [r7, #30]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80042f0:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d141      	bne.n	800437c <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80042f8:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 80042fa:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <FreeRTOS_CLIProcessCommand+0x104>)
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e037      	b.n	8004370 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8004300:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 800430a:	69b8      	ldr	r0, [r7, #24]
 800430c:	f7fb ff64 	bl	80001d8 <strlen>
 8004310:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b20      	cmp	r3, #32
 800431c:	d005      	beq.n	800432a <FreeRTOS_CLIProcessCommand+0x4a>
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	4413      	add	r3, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11d      	bne.n	8004366 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f002 ff58 	bl	80071e4 <strncmp>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	db18      	blt.n	800437a <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f8e5 	bl	8004518 <prvGetNumberOfParameters>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d00c      	beq.n	800437a <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8004360:	2300      	movs	r3, #0
 8004362:	83fb      	strh	r3, [r7, #30]
						}
					}

					break;
 8004364:	e009      	b.n	800437a <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1c3      	bne.n	8004300 <FreeRTOS_CLIProcessCommand+0x20>
 8004378:	e000      	b.n	800437c <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 800437a:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800437c:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <FreeRTOS_CLIProcessCommand+0xbc>
 8004384:	8bfb      	ldrh	r3, [r7, #30]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n", xWriteBufferLen );
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4916      	ldr	r1, [pc, #88]	; (80043e8 <FreeRTOS_CLIProcessCommand+0x108>)
 800438e:	68b8      	ldr	r0, [r7, #8]
 8004390:	f002 ff3a 	bl	8007208 <strncpy>
		pxCommand = NULL;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e01b      	b.n	80043d4 <FreeRTOS_CLIProcessCommand+0xf4>
	}
	else if( pxCommand != NULL )
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d010      	beq.n	80043c6 <FreeRTOS_CLIProcessCommand+0xe6>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	68b8      	ldr	r0, [r7, #8]
 80043b2:	4798      	blx	r3
 80043b4:	4603      	mov	r3, r0
 80043b6:	83fb      	strh	r3, [r7, #30]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80043b8:	8bfb      	ldrh	r3, [r7, #30]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <FreeRTOS_CLIProcessCommand+0xf4>
		{
			pxCommand = NULL;
 80043be:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <FreeRTOS_CLIProcessCommand+0x100>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e006      	b.n	80043d4 <FreeRTOS_CLIProcessCommand+0xf4>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n", xWriteBufferLen );
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	4908      	ldr	r1, [pc, #32]	; (80043ec <FreeRTOS_CLIProcessCommand+0x10c>)
 80043ca:	68b8      	ldr	r0, [r7, #8]
 80043cc:	f002 ff1c 	bl	8007208 <strncpy>
		xReturn = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	83fb      	strh	r3, [r7, #30]
	}

	return xReturn;
 80043d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	2000094c 	.word	0x2000094c
 80043e4:	2000000c 	.word	0x2000000c
 80043e8:	08007b88 	.word	0x08007b88
 80043ec:	08007be0 	.word	0x08007be0

080043f0 <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 80043f4:	4b02      	ldr	r3, [pc, #8]	; (8004400 <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	2000074c 	.word	0x2000074c

08004404 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	460b      	mov	r3, r1
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	817b      	strh	r3, [r7, #10]
UBaseType_t uxParametersFound = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	82fb      	strh	r3, [r7, #22]
const char *pcReturn = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	801a      	strh	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8004420:	e03c      	b.n	800449c <FreeRTOS_CLIGetParameter+0x98>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <FreeRTOS_CLIGetParameter+0x3c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b20      	cmp	r3, #32
 8004436:	d1f4      	bne.n	8004422 <FreeRTOS_CLIGetParameter+0x1e>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8004438:	e002      	b.n	8004440 <FreeRTOS_CLIGetParameter+0x3c>
		{
			pcCommandString++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <FreeRTOS_CLIGetParameter+0x4c>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b20      	cmp	r3, #32
 800444e:	d0f4      	beq.n	800443a <FreeRTOS_CLIGetParameter+0x36>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d026      	beq.n	80044a6 <FreeRTOS_CLIGetParameter+0xa2>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8004458:	8afb      	ldrh	r3, [r7, #22]
 800445a:	3301      	adds	r3, #1
 800445c:	82fb      	strh	r3, [r7, #22]

			if( uxParametersFound == uxWantedParameter )
 800445e:	8afa      	ldrh	r2, [r7, #22]
 8004460:	897b      	ldrh	r3, [r7, #10]
 8004462:	429a      	cmp	r2, r3
 8004464:	d11a      	bne.n	800449c <FreeRTOS_CLIGetParameter+0x98>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800446a:	e008      	b.n	800447e <FreeRTOS_CLIGetParameter+0x7a>
				{
					( *pxParameterStringLength )++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	801a      	strh	r2, [r3, #0]
					pcCommandString++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3301      	adds	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <FreeRTOS_CLIGetParameter+0x8a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b20      	cmp	r3, #32
 800448c:	d1ee      	bne.n	800446c <FreeRTOS_CLIGetParameter+0x68>
				}

				if( *pxParameterStringLength == 0 )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <FreeRTOS_CLIGetParameter+0xa6>
				{
					pcReturn = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
				}

				break;
 800449a:	e006      	b.n	80044aa <FreeRTOS_CLIGetParameter+0xa6>
	while( uxParametersFound < uxWantedParameter )
 800449c:	8afa      	ldrh	r2, [r7, #22]
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d3c1      	bcc.n	8004428 <FreeRTOS_CLIGetParameter+0x24>
 80044a4:	e002      	b.n	80044ac <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <FreeRTOS_CLIGetParameter+0xa8>
				break;
 80044aa:	bf00      	nop
		}
	}

	return pcReturn;
 80044ac:	693b      	ldr	r3, [r7, #16]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <prvHelpCommand+0x54>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <prvHelpCommand+0x54>)
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <prvHelpCommand+0x58>)
 80044d4:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80044d6:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <prvHelpCommand+0x54>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4619      	mov	r1, r3
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f002 fe90 	bl	8007208 <strncpy>
	pxCommand = pxCommand->pxNext;
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <prvHelpCommand+0x54>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <prvHelpCommand+0x54>)
 80044f0:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <prvHelpCommand+0x54>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	82fb      	strh	r3, [r7, #22]
 80044fe:	e001      	b.n	8004504 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	82fb      	strh	r3, [r7, #22]
	}

	return xReturn;
 8004504:	8afb      	ldrh	r3, [r7, #22]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000950 	.word	0x20000950
 8004514:	2000000c 	.word	0x2000000c

08004518 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	81bb      	strh	r3, [r7, #12]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8004528:	e014      	b.n	8004554 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b20      	cmp	r3, #32
 8004530:	d10b      	bne.n	800454a <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8004532:	89bb      	ldrh	r3, [r7, #12]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d00a      	beq.n	800454e <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8004538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	3301      	adds	r3, #1
 8004540:	b2db      	uxtb	r3, r3
 8004542:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	81bb      	strh	r3, [r7, #12]
 8004548:	e001      	b.n	800454e <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800454a:	2300      	movs	r3, #0
 800454c:	81bb      	strh	r3, [r7, #12]
		}

		pcCommandString++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3301      	adds	r3, #1
 8004552:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800455c:	89bb      	ldrh	r3, [r7, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 8004562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	e01a      	b.n	80045c2 <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	2200      	movs	r2, #0
 80045a2:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	2200      	movs	r2, #0
 80045ba:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3301      	adds	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d9e1      	bls.n	800458c <L6470_ResetAppCmdPkg+0xe>
  }
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	4603      	mov	r3, r0
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	4613      	mov	r3, r2
 80045e4:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4413      	add	r3, r2
 80045ee:	7bba      	ldrb	r2, [r7, #14]
 80045f0:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4413      	add	r3, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4413      	add	r3, r2
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4413      	add	r3, r2
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	60da      	str	r2, [r3, #12]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af02      	add	r7, sp, #8
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	4603      	mov	r3, r0
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	4613      	mov	r3, r2
 8004634:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <L6470_PrepareAppCmdPkg+0x44>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <L6470_PrepareAppCmdPkg+0x44>)
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8004644:	68b8      	ldr	r0, [r7, #8]
 8004646:	f7ff ff9a 	bl	800457e <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800464a:	7bba      	ldrb	r2, [r7, #14]
 800464c:	7bf8      	ldrb	r0, [r7, #15]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	f7ff ffbb 	bl	80045d4 <L6470_FillAppCmdPkg>
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000954 	.word	0x20000954

0800466c <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 800466c:	b490      	push	{r4, r7}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800467a:	2300      	movs	r3, #0
 800467c:	73bb      	strb	r3, [r7, #14]
 800467e:	e013      	b.n	80046a8 <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	e00a      	b.n	800469c <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8004686:	7b7b      	ldrb	r3, [r7, #13]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	737a      	strb	r2, [r7, #13]
 800468c:	461a      	mov	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	3301      	adds	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d9f1      	bls.n	8004686 <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 80046a2:	7bbb      	ldrb	r3, [r7, #14]
 80046a4:	3301      	adds	r3, #1
 80046a6:	73bb      	strb	r3, [r7, #14]
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d9e8      	bls.n	8004680 <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	e1f7      	b.n	8004aa4 <L6470_PrepareDaisyChainCommand+0x438>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	441a      	add	r2, r3
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	440b      	add	r3, r1
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	49b3      	ldr	r1, [pc, #716]	; (8004994 <L6470_PrepareDaisyChainCommand+0x328>)
 80046c8:	4603      	mov	r3, r0
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a1b      	subs	r3, r3, r0
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	440b      	add	r3, r1
 80046d2:	330c      	adds	r3, #12
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b12      	cmp	r3, #18
 80046e4:	f200 81db 	bhi.w	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <L6470_PrepareDaisyChainCommand+0x84>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004a9f 	.word	0x08004a9f
 80046f4:	0800473d 	.word	0x0800473d
 80046f8:	080047c5 	.word	0x080047c5
 80046fc:	080047f3 	.word	0x080047f3
 8004700:	0800485b 	.word	0x0800485b
 8004704:	08004889 	.word	0x08004889
 8004708:	080048f1 	.word	0x080048f1
 800470c:	0800492d 	.word	0x0800492d
 8004710:	080049a1 	.word	0x080049a1
 8004714:	08004a3d 	.word	0x08004a3d
 8004718:	08004a9f 	.word	0x08004a9f
 800471c:	08004a9f 	.word	0x08004a9f
 8004720:	08004a9f 	.word	0x08004a9f
 8004724:	08004a9f 	.word	0x08004a9f
 8004728:	08004a9f 	.word	0x08004a9f
 800472c:	08004a9f 	.word	0x08004a9f
 8004730:	08004a9f 	.word	0x08004a9f
 8004734:	08004a9f 	.word	0x08004a9f
 8004738:	08004a9f 	.word	0x08004a9f
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	18d1      	adds	r1, r2, r3
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	4413      	add	r3, r2
 8004748:	7818      	ldrb	r0, [r3, #0]
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4c90      	ldr	r4, [pc, #576]	; (8004998 <L6470_PrepareDaisyChainCommand+0x32c>)
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4423      	add	r3, r4
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	4303      	orrs	r3, r0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	700b      	strb	r3, [r1, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	4989      	ldr	r1, [pc, #548]	; (8004998 <L6470_PrepareDaisyChainCommand+0x32c>)
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	330e      	adds	r3, #14
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8004784:	2301      	movs	r3, #1
 8004786:	73bb      	strb	r3, [r7, #14]
 8004788:	e016      	b.n	80047b8 <L6470_PrepareDaisyChainCommand+0x14c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800478a:	7bbb      	ldrb	r3, [r7, #14]
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	4413      	add	r3, r2
 8004792:	461a      	mov	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4413      	add	r3, r2
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	0112      	lsls	r2, r2, #4
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	440a      	add	r2, r1
 80047a0:	6891      	ldr	r1, [r2, #8]
 80047a2:	7b38      	ldrb	r0, [r7, #12]
 80047a4:	7bba      	ldrb	r2, [r7, #14]
 80047a6:	1a82      	subs	r2, r0, r2
 80047a8:	00d2      	lsls	r2, r2, #3
 80047aa:	fa21 f202 	lsr.w	r2, r1, r2
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 80047b2:	7bbb      	ldrb	r3, [r7, #14]
 80047b4:	3301      	adds	r3, #1
 80047b6:	73bb      	strb	r3, [r7, #14]
 80047b8:	7bba      	ldrb	r2, [r7, #14]
 80047ba:	7b3b      	ldrb	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	429a      	cmp	r2, r3
 80047c0:	dbe3      	blt.n	800478a <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 80047c2:	e16c      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	18d1      	adds	r1, r2, r3
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	7818      	ldrb	r0, [r3, #0]
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4c6e      	ldr	r4, [pc, #440]	; (8004998 <L6470_PrepareDaisyChainCommand+0x32c>)
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4423      	add	r3, r4
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	4303      	orrs	r3, r0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	700b      	strb	r3, [r1, #0]
      break;
 80047f0:	e155      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	18d1      	adds	r1, r2, r3
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	7818      	ldrb	r0, [r3, #0]
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4c64      	ldr	r4, [pc, #400]	; (800499c <L6470_PrepareDaisyChainCommand+0x330>)
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	4423      	add	r3, r4
 8004814:	3308      	adds	r3, #8
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4303      	orrs	r3, r0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800481e:	2301      	movs	r3, #1
 8004820:	73bb      	strb	r3, [r7, #14]
 8004822:	e016      	b.n	8004852 <L6470_PrepareDaisyChainCommand+0x1e6>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 8004824:	7bbb      	ldrb	r3, [r7, #14]
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	4413      	add	r3, r2
 800482c:	461a      	mov	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4413      	add	r3, r2
 8004832:	7bfa      	ldrb	r2, [r7, #15]
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	440a      	add	r2, r1
 800483a:	6891      	ldr	r1, [r2, #8]
 800483c:	7bba      	ldrb	r2, [r7, #14]
 800483e:	f1c2 0203 	rsb	r2, r2, #3
 8004842:	00d2      	lsls	r2, r2, #3
 8004844:	fa21 f202 	lsr.w	r2, r1, r2
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	3301      	adds	r3, #1
 8004850:	73bb      	strb	r3, [r7, #14]
 8004852:	7bbb      	ldrb	r3, [r7, #14]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d9e5      	bls.n	8004824 <L6470_PrepareDaisyChainCommand+0x1b8>
      }
      break;
 8004858:	e121      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	18d1      	adds	r1, r2, r3
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4413      	add	r3, r2
 8004866:	7818      	ldrb	r0, [r3, #0]
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4c4a      	ldr	r4, [pc, #296]	; (800499c <L6470_PrepareDaisyChainCommand+0x330>)
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	4423      	add	r3, r4
 800487c:	3308      	adds	r3, #8
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4303      	orrs	r3, r0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	700b      	strb	r3, [r1, #0]
      break;
 8004886:	e10a      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	18d1      	adds	r1, r2, r3
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	4413      	add	r3, r2
 8004894:	7818      	ldrb	r0, [r3, #0]
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	4c3e      	ldr	r4, [pc, #248]	; (800499c <L6470_PrepareDaisyChainCommand+0x330>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	4423      	add	r3, r4
 80048aa:	3308      	adds	r3, #8
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4303      	orrs	r3, r0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80048b4:	2301      	movs	r3, #1
 80048b6:	73bb      	strb	r3, [r7, #14]
 80048b8:	e016      	b.n	80048e8 <L6470_PrepareDaisyChainCommand+0x27c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80048ba:	7bbb      	ldrb	r3, [r7, #14]
 80048bc:	009a      	lsls	r2, r3, #2
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	4413      	add	r3, r2
 80048c2:	461a      	mov	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	440a      	add	r2, r1
 80048d0:	6891      	ldr	r1, [r2, #8]
 80048d2:	7bba      	ldrb	r2, [r7, #14]
 80048d4:	f1c2 0203 	rsb	r2, r2, #3
 80048d8:	00d2      	lsls	r2, r2, #3
 80048da:	fa21 f202 	lsr.w	r2, r1, r2
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80048e2:	7bbb      	ldrb	r3, [r7, #14]
 80048e4:	3301      	adds	r3, #1
 80048e6:	73bb      	strb	r3, [r7, #14]
 80048e8:	7bbb      	ldrb	r3, [r7, #14]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d9e5      	bls.n	80048ba <L6470_PrepareDaisyChainCommand+0x24e>
      }      
      break;
 80048ee:	e0d6      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80048f0:	2301      	movs	r3, #1
 80048f2:	73bb      	strb	r3, [r7, #14]
 80048f4:	e016      	b.n	8004924 <L6470_PrepareDaisyChainCommand+0x2b8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	009a      	lsls	r2, r3, #2
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	4413      	add	r3, r2
 80048fe:	461a      	mov	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4413      	add	r3, r2
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	440a      	add	r2, r1
 800490c:	6851      	ldr	r1, [r2, #4]
 800490e:	7bba      	ldrb	r2, [r7, #14]
 8004910:	f1c2 0203 	rsb	r2, r2, #3
 8004914:	00d2      	lsls	r2, r2, #3
 8004916:	fa21 f202 	lsr.w	r2, r1, r2
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	3301      	adds	r3, #1
 8004922:	73bb      	strb	r3, [r7, #14]
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d9e5      	bls.n	80048f6 <L6470_PrepareDaisyChainCommand+0x28a>
      }
      break;
 800492a:	e0b8      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	18d1      	adds	r1, r2, r3
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4413      	add	r3, r2
 8004938:	7818      	ldrb	r0, [r3, #0]
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4c15      	ldr	r4, [pc, #84]	; (800499c <L6470_PrepareDaisyChainCommand+0x330>)
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	4423      	add	r3, r4
 800494e:	3308      	adds	r3, #8
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	4303      	orrs	r3, r0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004958:	2301      	movs	r3, #1
 800495a:	73bb      	strb	r3, [r7, #14]
 800495c:	e016      	b.n	800498c <L6470_PrepareDaisyChainCommand+0x320>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800495e:	7bbb      	ldrb	r3, [r7, #14]
 8004960:	009a      	lsls	r2, r3, #2
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	4413      	add	r3, r2
 8004966:	461a      	mov	r2, r3
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4413      	add	r3, r2
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	440a      	add	r2, r1
 8004974:	6891      	ldr	r1, [r2, #8]
 8004976:	7bba      	ldrb	r2, [r7, #14]
 8004978:	f1c2 0203 	rsb	r2, r2, #3
 800497c:	00d2      	lsls	r2, r2, #3
 800497e:	fa21 f202 	lsr.w	r2, r1, r2
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	3301      	adds	r3, #1
 800498a:	73bb      	strb	r3, [r7, #14]
 800498c:	7bbb      	ldrb	r3, [r7, #14]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d9e5      	bls.n	800495e <L6470_PrepareDaisyChainCommand+0x2f2>
      }
      break;
 8004992:	e084      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
 8004994:	08007f54 	.word	0x08007f54
 8004998:	08007d60 	.word	0x08007d60
 800499c:	08008060 	.word	0x08008060
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	18d1      	adds	r1, r2, r3
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	4413      	add	r3, r2
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	b258      	sxtb	r0, r3
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4413      	add	r3, r2
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4c3f      	ldr	r4, [pc, #252]	; (8004ab8 <L6470_PrepareDaisyChainCommand+0x44c>)
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	4423      	add	r3, r4
 80049c4:	3304      	adds	r3, #4
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	4303      	orrs	r3, r0
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	18d1      	adds	r1, r2, r3
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	4413      	add	r3, r2
 80049e0:	7818      	ldrb	r0, [r3, #0]
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	4c33      	ldr	r4, [pc, #204]	; (8004abc <L6470_PrepareDaisyChainCommand+0x450>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	4423      	add	r3, r4
 80049f6:	3308      	adds	r3, #8
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	4303      	orrs	r3, r0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004a00:	2301      	movs	r3, #1
 8004a02:	73bb      	strb	r3, [r7, #14]
 8004a04:	e016      	b.n	8004a34 <L6470_PrepareDaisyChainCommand+0x3c8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 8004a06:	7bbb      	ldrb	r3, [r7, #14]
 8004a08:	009a      	lsls	r2, r3, #2
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	4413      	add	r3, r2
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	68d1      	ldr	r1, [r2, #12]
 8004a1e:	7bba      	ldrb	r2, [r7, #14]
 8004a20:	f1c2 0203 	rsb	r2, r2, #3
 8004a24:	00d2      	lsls	r2, r2, #3
 8004a26:	fa21 f202 	lsr.w	r2, r1, r2
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	3301      	adds	r3, #1
 8004a32:	73bb      	strb	r3, [r7, #14]
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d9e5      	bls.n	8004a06 <L6470_PrepareDaisyChainCommand+0x39a>
      }
      break;
 8004a3a:	e030      	b.n	8004a9e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	18d1      	adds	r1, r2, r3
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	4413      	add	r3, r2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b258      	sxtb	r0, r3
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4c18      	ldr	r4, [pc, #96]	; (8004ab8 <L6470_PrepareDaisyChainCommand+0x44c>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	4423      	add	r3, r4
 8004a60:	3304      	adds	r3, #4
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	4303      	orrs	r3, r0
 8004a6a:	b25b      	sxtb	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	18d1      	adds	r1, r2, r3
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	7818      	ldrb	r0, [r3, #0]
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	4c0c      	ldr	r4, [pc, #48]	; (8004abc <L6470_PrepareDaisyChainCommand+0x450>)
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	4423      	add	r3, r4
 8004a92:	3308      	adds	r3, #8
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	4303      	orrs	r3, r0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	700b      	strb	r3, [r1, #0]
      break;
 8004a9c:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	f67f ae04 	bls.w	80046b4 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc90      	pop	{r4, r7}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	08008074 	.word	0x08008074
 8004abc:	08008060 	.word	0x08008060

08004ac0 <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 8004aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ace:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b04 <Step_s2_2_Acc+0x44>
 8004ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	d80c      	bhi.n	8004af6 <Step_s2_2_Acc+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004adc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ae0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004b08 <Step_s2_2_Acc+0x48>
 8004ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aec:	edc7 7a00 	vstr	s15, [r7]
 8004af0:	883b      	ldrh	r3, [r7, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	e000      	b.n	8004af8 <Step_s2_2_Acc+0x38>
  else
    return 0;   // Warning
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	4768c671 	.word	0x4768c671
 8004b08:	4168d4fe 	.word	0x4168d4fe

08004b0c <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b50 <Step_s2_2_Dec+0x44>
 8004b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b26:	d80c      	bhi.n	8004b42 <Step_s2_2_Dec+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004b28:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b2c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004b54 <Step_s2_2_Dec+0x48>
 8004b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b38:	edc7 7a00 	vstr	s15, [r7]
 8004b3c:	883b      	ldrh	r3, [r7, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	e000      	b.n	8004b44 <Step_s2_2_Dec+0x38>
  else
    return 0;   // Warning
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	4768c671 	.word	0x4768c671
 8004b54:	4168d4fe 	.word	0x4168d4fe

08004b58 <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b66:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b9c <Step_s_2_MaxSpeed+0x44>
 8004b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b72:	d80c      	bhi.n	8004b8e <Step_s_2_MaxSpeed+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 8004b74:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b78:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004ba0 <Step_s_2_MaxSpeed+0x48>
 8004b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b84:	edc7 7a00 	vstr	s15, [r7]
 8004b88:	883b      	ldrh	r3, [r7, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	e000      	b.n	8004b90 <Step_s_2_MaxSpeed+0x38>
  else
    return 0;   // Warning
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	4673e702 	.word	0x4673e702
 8004ba0:	4174240b 	.word	0x4174240b

08004ba4 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 8004bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bb2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004be8 <Step_s_2_MinSpeed+0x44>
 8004bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	d80c      	bhi.n	8004bda <Step_s_2_MinSpeed+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 8004bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bc4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004bec <Step_s_2_MinSpeed+0x48>
 8004bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	edc7 7a00 	vstr	s15, [r7]
 8004bd4:	883b      	ldrh	r3, [r7, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	e000      	b.n	8004bdc <Step_s_2_MinSpeed+0x38>
  else
    return 0;   // Warning
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	447414bf 	.word	0x447414bf
 8004bec:	3e742401 	.word	0x3e742401

08004bf0 <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004bfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bfe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004c3c <Step_s_2_FsSpd+0x4c>
 8004c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d810      	bhi.n	8004c2e <Step_s_2_FsSpd+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004c0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c10:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004c40 <Step_s_2_FsSpd+0x50>
 8004c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c24:	edc7 7a00 	vstr	s15, [r7]
 8004c28:	883b      	ldrh	r3, [r7, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	e000      	b.n	8004c30 <Step_s_2_FsSpd+0x40>
  else
    return 0;   // Warning
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	4673e180 	.word	0x4673e180
 8004c40:	41740000 	.word	0x41740000

08004c44 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8004c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c52:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004c88 <Step_s_2_IntSpeed+0x44>
 8004c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	d80c      	bhi.n	8004c7a <Step_s_2_IntSpeed+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8004c60:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c64:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004c8c <Step_s_2_IntSpeed+0x48>
 8004c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c70:	edc7 7a00 	vstr	s15, [r7]
 8004c74:	883b      	ldrh	r3, [r7, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	e000      	b.n	8004c7c <Step_s_2_IntSpeed+0x38>
  else
    return 0;   // Warning
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	44742023 	.word	0x44742023
 8004c8c:	3d7423f4 	.word	0x3d7423f4

08004c90 <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c9e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004cd4 <s_Step_2_StSlp+0x44>
 8004ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	d80c      	bhi.n	8004cc6 <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004cac:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cb0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004cd8 <s_Step_2_StSlp+0x48>
 8004cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	edc7 7a00 	vstr	s15, [r7]
 8004cc0:	783b      	ldrb	r3, [r7, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	e000      	b.n	8004cc8 <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	3b8311d9 	.word	0x3b8311d9
 8004cd8:	3783956e 	.word	0x3783956e

08004cdc <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004d20 <s_Step_2_FnSlpAcc+0x44>
 8004cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	d80c      	bhi.n	8004d12 <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004cf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cfc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004d24 <s_Step_2_FnSlpAcc+0x48>
 8004d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d08:	edc7 7a00 	vstr	s15, [r7]
 8004d0c:	783b      	ldrb	r3, [r7, #0]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e000      	b.n	8004d14 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	3b8311d9 	.word	0x3b8311d9
 8004d24:	3783956e 	.word	0x3783956e

08004d28 <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004d32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d36:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004d6c <s_Step_2_FnSlpDec+0x44>
 8004d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	d80c      	bhi.n	8004d5e <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004d44:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d48:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004d70 <s_Step_2_FnSlpDec+0x48>
 8004d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d54:	edc7 7a00 	vstr	s15, [r7]
 8004d58:	783b      	ldrb	r3, [r7, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e000      	b.n	8004d60 <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	3b8311d9 	.word	0x3b8311d9
 8004d70:	3783956e 	.word	0x3783956e

08004d74 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8004d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d82:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e0c <mA_2_OcdTh+0x98>
 8004d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8e:	d836      	bhi.n	8004dfe <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8004d90:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d94:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004e10 <mA_2_OcdTh+0x9c>
 8004d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9c:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8004da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da8:	edc7 7a00 	vstr	s15, [r7]
 8004dac:	783b      	ldrb	r3, [r7, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8004dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d50a      	bpl.n	8004dec <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 8004dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dde:	edc7 7a00 	vstr	s15, [r7]
 8004de2:	783b      	ldrb	r3, [r7, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e009      	b.n	8004e00 <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8004dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8004df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df4:	edc7 7a00 	vstr	s15, [r7]
 8004df8:	783b      	ldrb	r3, [r7, #0]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	e000      	b.n	8004e00 <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	45bb8000 	.word	0x45bb8000
 8004e10:	43bb8000 	.word	0x43bb8000

08004e14 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e22:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004eac <mA_2_StallTh+0x98>
 8004e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	d836      	bhi.n	8004e9e <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 8004e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e34:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004eb0 <mA_2_StallTh+0x9c>
 8004e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e3c:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8004e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e48:	edc7 7a00 	vstr	s15, [r7]
 8004e4c:	783b      	ldrb	r3, [r7, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e58:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e60:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8004e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e74:	d50a      	bpl.n	8004e8c <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 8004e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7e:	edc7 7a00 	vstr	s15, [r7]
 8004e82:	783b      	ldrb	r3, [r7, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e009      	b.n	8004ea0 <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8004e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e94:	edc7 7a00 	vstr	s15, [r7]
 8004e98:	783b      	ldrb	r3, [r7, #0]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e000      	b.n	8004ea0 <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	457a0000 	.word	0x457a0000
 8004eb0:	41fa0000 	.word	0x41fa0000

08004eb4 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	4603      	mov	r3, r0
 8004ebc:	603a      	str	r2, [r7, #0]
 8004ebe:	71fb      	strb	r3, [r7, #7]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004ec4:	79ba      	ldrb	r2, [r7, #6]
 8004ec6:	79f8      	ldrb	r0, [r7, #7]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <L6470_SetParam+0x40>)
 8004ed6:	f7ff fba5 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004eda:	4907      	ldr	r1, [pc, #28]	; (8004ef8 <L6470_SetParam+0x44>)
 8004edc:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <L6470_SetParam+0x40>)
 8004ede:	f7ff fbc5 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004ee2:	4906      	ldr	r1, [pc, #24]	; (8004efc <L6470_SetParam+0x48>)
 8004ee4:	4804      	ldr	r0, [pc, #16]	; (8004ef8 <L6470_SetParam+0x44>)
 8004ee6:	f000 fc51 	bl	800578c <L6470_DaisyChainCommand>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000a7c 	.word	0x20000a7c
 8004ef8:	20000a6c 	.word	0x20000a6c
 8004efc:	20000a5c 	.word	0x20000a5c

08004f00 <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	4603      	mov	r3, r0
 8004f08:	460a      	mov	r2, r1
 8004f0a:	71fb      	strb	r3, [r7, #7]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004f10:	79ba      	ldrb	r2, [r7, #6]
 8004f12:	79f8      	ldrb	r0, [r7, #7]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	2202      	movs	r2, #2
 8004f20:	4910      	ldr	r1, [pc, #64]	; (8004f64 <L6470_GetParam+0x64>)
 8004f22:	f7ff fb7f 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f26:	4910      	ldr	r1, [pc, #64]	; (8004f68 <L6470_GetParam+0x68>)
 8004f28:	480e      	ldr	r0, [pc, #56]	; (8004f64 <L6470_GetParam+0x64>)
 8004f2a:	f7ff fb9f 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f2e:	490f      	ldr	r1, [pc, #60]	; (8004f6c <L6470_GetParam+0x6c>)
 8004f30:	480d      	ldr	r0, [pc, #52]	; (8004f68 <L6470_GetParam+0x68>)
 8004f32:	f000 fc2b 	bl	800578c <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004f36:	79ba      	ldrb	r2, [r7, #6]
 8004f38:	490d      	ldr	r1, [pc, #52]	; (8004f70 <L6470_GetParam+0x70>)
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	330e      	adds	r3, #14
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	4907      	ldr	r1, [pc, #28]	; (8004f6c <L6470_GetParam+0x6c>)
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fc61 	bl	8005818 <L6470_ExtractReturnedData>
 8004f56:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8004f58:	68bb      	ldr	r3, [r7, #8]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000a7c 	.word	0x20000a7c
 8004f68:	20000a6c 	.word	0x20000a6c
 8004f6c:	20000a5c 	.word	0x20000a5c
 8004f70:	08007d60 	.word	0x08007d60

08004f74 <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	603a      	str	r2, [r7, #0]
 8004f7e:	71fb      	strb	r3, [r7, #7]
 8004f80:	460b      	mov	r3, r1
 8004f82:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004f84:	79ba      	ldrb	r2, [r7, #6]
 8004f86:	79f8      	ldrb	r0, [r7, #7]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	2203      	movs	r2, #3
 8004f94:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <L6470_Run+0x40>)
 8004f96:	f7ff fb45 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f9a:	4907      	ldr	r1, [pc, #28]	; (8004fb8 <L6470_Run+0x44>)
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <L6470_Run+0x40>)
 8004f9e:	f7ff fb65 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fa2:	4906      	ldr	r1, [pc, #24]	; (8004fbc <L6470_Run+0x48>)
 8004fa4:	4804      	ldr	r0, [pc, #16]	; (8004fb8 <L6470_Run+0x44>)
 8004fa6:	f000 fbf1 	bl	800578c <L6470_DaisyChainCommand>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000a7c 	.word	0x20000a7c
 8004fb8:	20000a6c 	.word	0x20000a6c
 8004fbc:	20000a5c 	.word	0x20000a5c

08004fc0 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	460a      	mov	r2, r1
 8004fca:	71fb      	strb	r3, [r7, #7]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004fd0:	79ba      	ldrb	r2, [r7, #6]
 8004fd2:	79f8      	ldrb	r0, [r7, #7]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	2204      	movs	r2, #4
 8004fe0:	4907      	ldr	r1, [pc, #28]	; (8005000 <L6470_StepClock+0x40>)
 8004fe2:	f7ff fb1f 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fe6:	4907      	ldr	r1, [pc, #28]	; (8005004 <L6470_StepClock+0x44>)
 8004fe8:	4805      	ldr	r0, [pc, #20]	; (8005000 <L6470_StepClock+0x40>)
 8004fea:	f7ff fb3f 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fee:	4906      	ldr	r1, [pc, #24]	; (8005008 <L6470_StepClock+0x48>)
 8004ff0:	4804      	ldr	r0, [pc, #16]	; (8005004 <L6470_StepClock+0x44>)
 8004ff2:	f000 fbcb 	bl	800578c <L6470_DaisyChainCommand>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000a7c 	.word	0x20000a7c
 8005004:	20000a6c 	.word	0x20000a6c
 8005008:	20000a5c 	.word	0x20000a5c

0800500c <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af02      	add	r7, sp, #8
 8005012:	4603      	mov	r3, r0
 8005014:	603a      	str	r2, [r7, #0]
 8005016:	71fb      	strb	r3, [r7, #7]
 8005018:	460b      	mov	r3, r1
 800501a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 800501c:	79ba      	ldrb	r2, [r7, #6]
 800501e:	79f8      	ldrb	r0, [r7, #7]
 8005020:	2300      	movs	r3, #0
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	2205      	movs	r2, #5
 800502c:	4907      	ldr	r1, [pc, #28]	; (800504c <L6470_Move+0x40>)
 800502e:	f7ff faf9 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005032:	4907      	ldr	r1, [pc, #28]	; (8005050 <L6470_Move+0x44>)
 8005034:	4805      	ldr	r0, [pc, #20]	; (800504c <L6470_Move+0x40>)
 8005036:	f7ff fb19 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800503a:	4906      	ldr	r1, [pc, #24]	; (8005054 <L6470_Move+0x48>)
 800503c:	4804      	ldr	r0, [pc, #16]	; (8005050 <L6470_Move+0x44>)
 800503e:	f000 fba5 	bl	800578c <L6470_DaisyChainCommand>
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000a7c 	.word	0x20000a7c
 8005050:	20000a6c 	.word	0x20000a6c
 8005054:	20000a5c 	.word	0x20000a5c

08005058 <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af02      	add	r7, sp, #8
 800505e:	4603      	mov	r3, r0
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506a:	d211      	bcs.n	8005090 <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 800506c:	79f8      	ldrb	r0, [r7, #7]
 800506e:	2300      	movs	r3, #0
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	2300      	movs	r3, #0
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2206      	movs	r2, #6
 800507a:	4907      	ldr	r1, [pc, #28]	; (8005098 <L6470_GoTo+0x40>)
 800507c:	f7ff fad2 	bl	8004624 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005080:	4906      	ldr	r1, [pc, #24]	; (800509c <L6470_GoTo+0x44>)
 8005082:	4805      	ldr	r0, [pc, #20]	; (8005098 <L6470_GoTo+0x40>)
 8005084:	f7ff faf2 	bl	800466c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005088:	4905      	ldr	r1, [pc, #20]	; (80050a0 <L6470_GoTo+0x48>)
 800508a:	4804      	ldr	r0, [pc, #16]	; (800509c <L6470_GoTo+0x44>)
 800508c:	f000 fb7e 	bl	800578c <L6470_DaisyChainCommand>
  }
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000a7c 	.word	0x20000a7c
 800509c:	20000a6c 	.word	0x20000a6c
 80050a0:	20000a5c 	.word	0x20000a5c

080050a4 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	4603      	mov	r3, r0
 80050ac:	603a      	str	r2, [r7, #0]
 80050ae:	71fb      	strb	r3, [r7, #7]
 80050b0:	460b      	mov	r3, r1
 80050b2:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ba:	d212      	bcs.n	80050e2 <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 80050bc:	79ba      	ldrb	r2, [r7, #6]
 80050be:	79f8      	ldrb	r0, [r7, #7]
 80050c0:	2300      	movs	r3, #0
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	2207      	movs	r2, #7
 80050cc:	4907      	ldr	r1, [pc, #28]	; (80050ec <L6470_GoToDir+0x48>)
 80050ce:	f7ff faa9 	bl	8004624 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050d2:	4907      	ldr	r1, [pc, #28]	; (80050f0 <L6470_GoToDir+0x4c>)
 80050d4:	4805      	ldr	r0, [pc, #20]	; (80050ec <L6470_GoToDir+0x48>)
 80050d6:	f7ff fac9 	bl	800466c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050da:	4906      	ldr	r1, [pc, #24]	; (80050f4 <L6470_GoToDir+0x50>)
 80050dc:	4804      	ldr	r0, [pc, #16]	; (80050f0 <L6470_GoToDir+0x4c>)
 80050de:	f000 fb55 	bl	800578c <L6470_DaisyChainCommand>
  }
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000a7c 	.word	0x20000a7c
 80050f0:	20000a6c 	.word	0x20000a6c
 80050f4:	20000a5c 	.word	0x20000a5c

080050f8 <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4603      	mov	r3, r0
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	460b      	mov	r3, r1
 8005106:	71bb      	strb	r3, [r7, #6]
 8005108:	4613      	mov	r3, r2
 800510a:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 800510c:	79b9      	ldrb	r1, [r7, #6]
 800510e:	797b      	ldrb	r3, [r7, #5]
 8005110:	79f8      	ldrb	r0, [r7, #7]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	9201      	str	r2, [sp, #4]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	2208      	movs	r2, #8
 800511c:	4907      	ldr	r1, [pc, #28]	; (800513c <L6470_GoUntil+0x44>)
 800511e:	f7ff fa81 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005122:	4907      	ldr	r1, [pc, #28]	; (8005140 <L6470_GoUntil+0x48>)
 8005124:	4805      	ldr	r0, [pc, #20]	; (800513c <L6470_GoUntil+0x44>)
 8005126:	f7ff faa1 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800512a:	4906      	ldr	r1, [pc, #24]	; (8005144 <L6470_GoUntil+0x4c>)
 800512c:	4804      	ldr	r0, [pc, #16]	; (8005140 <L6470_GoUntil+0x48>)
 800512e:	f000 fb2d 	bl	800578c <L6470_DaisyChainCommand>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000a7c 	.word	0x20000a7c
 8005140:	20000a6c 	.word	0x20000a6c
 8005144:	20000a5c 	.word	0x20000a5c

08005148 <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af02      	add	r7, sp, #8
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
 8005152:	460b      	mov	r3, r1
 8005154:	71bb      	strb	r3, [r7, #6]
 8005156:	4613      	mov	r3, r2
 8005158:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 800515a:	79b9      	ldrb	r1, [r7, #6]
 800515c:	797b      	ldrb	r3, [r7, #5]
 800515e:	79f8      	ldrb	r0, [r7, #7]
 8005160:	2200      	movs	r2, #0
 8005162:	9201      	str	r2, [sp, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	460b      	mov	r3, r1
 8005168:	2209      	movs	r2, #9
 800516a:	4907      	ldr	r1, [pc, #28]	; (8005188 <L6470_ReleaseSW+0x40>)
 800516c:	f7ff fa5a 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005170:	4906      	ldr	r1, [pc, #24]	; (800518c <L6470_ReleaseSW+0x44>)
 8005172:	4805      	ldr	r0, [pc, #20]	; (8005188 <L6470_ReleaseSW+0x40>)
 8005174:	f7ff fa7a 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005178:	4905      	ldr	r1, [pc, #20]	; (8005190 <L6470_ReleaseSW+0x48>)
 800517a:	4804      	ldr	r0, [pc, #16]	; (800518c <L6470_ReleaseSW+0x44>)
 800517c:	f000 fb06 	bl	800578c <L6470_DaisyChainCommand>
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000a7c 	.word	0x20000a7c
 800518c:	20000a6c 	.word	0x20000a6c
 8005190:	20000a5c 	.word	0x20000a5c

08005194 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af02      	add	r7, sp, #8
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 800519e:	79f8      	ldrb	r0, [r7, #7]
 80051a0:	2300      	movs	r3, #0
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	2300      	movs	r3, #0
 80051aa:	220a      	movs	r2, #10
 80051ac:	4907      	ldr	r1, [pc, #28]	; (80051cc <L6470_GoHome+0x38>)
 80051ae:	f7ff fa39 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80051b2:	4907      	ldr	r1, [pc, #28]	; (80051d0 <L6470_GoHome+0x3c>)
 80051b4:	4805      	ldr	r0, [pc, #20]	; (80051cc <L6470_GoHome+0x38>)
 80051b6:	f7ff fa59 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80051ba:	4906      	ldr	r1, [pc, #24]	; (80051d4 <L6470_GoHome+0x40>)
 80051bc:	4804      	ldr	r0, [pc, #16]	; (80051d0 <L6470_GoHome+0x3c>)
 80051be:	f000 fae5 	bl	800578c <L6470_DaisyChainCommand>
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000a7c 	.word	0x20000a7c
 80051d0:	20000a6c 	.word	0x20000a6c
 80051d4:	20000a5c 	.word	0x20000a5c

080051d8 <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af02      	add	r7, sp, #8
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 80051e2:	79f8      	ldrb	r0, [r7, #7]
 80051e4:	2300      	movs	r3, #0
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	220b      	movs	r2, #11
 80051f0:	4907      	ldr	r1, [pc, #28]	; (8005210 <L6470_GoMark+0x38>)
 80051f2:	f7ff fa17 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80051f6:	4907      	ldr	r1, [pc, #28]	; (8005214 <L6470_GoMark+0x3c>)
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <L6470_GoMark+0x38>)
 80051fa:	f7ff fa37 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80051fe:	4906      	ldr	r1, [pc, #24]	; (8005218 <L6470_GoMark+0x40>)
 8005200:	4804      	ldr	r0, [pc, #16]	; (8005214 <L6470_GoMark+0x3c>)
 8005202:	f000 fac3 	bl	800578c <L6470_DaisyChainCommand>
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000a7c 	.word	0x20000a7c
 8005214:	20000a6c 	.word	0x20000a6c
 8005218:	20000a5c 	.word	0x20000a5c

0800521c <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af02      	add	r7, sp, #8
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005226:	79f8      	ldrb	r0, [r7, #7]
 8005228:	2300      	movs	r3, #0
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	2300      	movs	r3, #0
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	220c      	movs	r2, #12
 8005234:	4907      	ldr	r1, [pc, #28]	; (8005254 <L6470_ResetPos+0x38>)
 8005236:	f7ff f9f5 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800523a:	4907      	ldr	r1, [pc, #28]	; (8005258 <L6470_ResetPos+0x3c>)
 800523c:	4805      	ldr	r0, [pc, #20]	; (8005254 <L6470_ResetPos+0x38>)
 800523e:	f7ff fa15 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005242:	4906      	ldr	r1, [pc, #24]	; (800525c <L6470_ResetPos+0x40>)
 8005244:	4804      	ldr	r0, [pc, #16]	; (8005258 <L6470_ResetPos+0x3c>)
 8005246:	f000 faa1 	bl	800578c <L6470_DaisyChainCommand>
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000a7c 	.word	0x20000a7c
 8005258:	20000a6c 	.word	0x20000a6c
 800525c:	20000a5c 	.word	0x20000a5c

08005260 <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af02      	add	r7, sp, #8
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800526a:	79f8      	ldrb	r0, [r7, #7]
 800526c:	2300      	movs	r3, #0
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	2300      	movs	r3, #0
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	220d      	movs	r2, #13
 8005278:	4907      	ldr	r1, [pc, #28]	; (8005298 <L6470_ResetDevice+0x38>)
 800527a:	f7ff f9d3 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800527e:	4907      	ldr	r1, [pc, #28]	; (800529c <L6470_ResetDevice+0x3c>)
 8005280:	4805      	ldr	r0, [pc, #20]	; (8005298 <L6470_ResetDevice+0x38>)
 8005282:	f7ff f9f3 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005286:	4906      	ldr	r1, [pc, #24]	; (80052a0 <L6470_ResetDevice+0x40>)
 8005288:	4804      	ldr	r0, [pc, #16]	; (800529c <L6470_ResetDevice+0x3c>)
 800528a:	f000 fa7f 	bl	800578c <L6470_DaisyChainCommand>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000a7c 	.word	0x20000a7c
 800529c:	20000a6c 	.word	0x20000a6c
 80052a0:	20000a5c 	.word	0x20000a5c

080052a4 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80052ae:	79f8      	ldrb	r0, [r7, #7]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	220e      	movs	r2, #14
 80052bc:	4907      	ldr	r1, [pc, #28]	; (80052dc <L6470_SoftStop+0x38>)
 80052be:	f7ff f9b1 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80052c2:	4907      	ldr	r1, [pc, #28]	; (80052e0 <L6470_SoftStop+0x3c>)
 80052c4:	4805      	ldr	r0, [pc, #20]	; (80052dc <L6470_SoftStop+0x38>)
 80052c6:	f7ff f9d1 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80052ca:	4906      	ldr	r1, [pc, #24]	; (80052e4 <L6470_SoftStop+0x40>)
 80052cc:	4804      	ldr	r0, [pc, #16]	; (80052e0 <L6470_SoftStop+0x3c>)
 80052ce:	f000 fa5d 	bl	800578c <L6470_DaisyChainCommand>
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000a7c 	.word	0x20000a7c
 80052e0:	20000a6c 	.word	0x20000a6c
 80052e4:	20000a5c 	.word	0x20000a5c

080052e8 <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80052f2:	79f8      	ldrb	r0, [r7, #7]
 80052f4:	2300      	movs	r3, #0
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	2300      	movs	r3, #0
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	220f      	movs	r2, #15
 8005300:	4907      	ldr	r1, [pc, #28]	; (8005320 <L6470_HardStop+0x38>)
 8005302:	f7ff f98f 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005306:	4907      	ldr	r1, [pc, #28]	; (8005324 <L6470_HardStop+0x3c>)
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <L6470_HardStop+0x38>)
 800530a:	f7ff f9af 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800530e:	4906      	ldr	r1, [pc, #24]	; (8005328 <L6470_HardStop+0x40>)
 8005310:	4804      	ldr	r0, [pc, #16]	; (8005324 <L6470_HardStop+0x3c>)
 8005312:	f000 fa3b 	bl	800578c <L6470_DaisyChainCommand>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000a7c 	.word	0x20000a7c
 8005324:	20000a6c 	.word	0x20000a6c
 8005328:	20000a5c 	.word	0x20000a5c

0800532c <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af02      	add	r7, sp, #8
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005336:	79f8      	ldrb	r0, [r7, #7]
 8005338:	2300      	movs	r3, #0
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	2300      	movs	r3, #0
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2300      	movs	r3, #0
 8005342:	2210      	movs	r2, #16
 8005344:	4907      	ldr	r1, [pc, #28]	; (8005364 <L6470_SoftHiZ+0x38>)
 8005346:	f7ff f96d 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800534a:	4907      	ldr	r1, [pc, #28]	; (8005368 <L6470_SoftHiZ+0x3c>)
 800534c:	4805      	ldr	r0, [pc, #20]	; (8005364 <L6470_SoftHiZ+0x38>)
 800534e:	f7ff f98d 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005352:	4906      	ldr	r1, [pc, #24]	; (800536c <L6470_SoftHiZ+0x40>)
 8005354:	4804      	ldr	r0, [pc, #16]	; (8005368 <L6470_SoftHiZ+0x3c>)
 8005356:	f000 fa19 	bl	800578c <L6470_DaisyChainCommand>
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000a7c 	.word	0x20000a7c
 8005368:	20000a6c 	.word	0x20000a6c
 800536c:	20000a5c 	.word	0x20000a5c

08005370 <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af02      	add	r7, sp, #8
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 800537a:	79f8      	ldrb	r0, [r7, #7]
 800537c:	2300      	movs	r3, #0
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	2300      	movs	r3, #0
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	2211      	movs	r2, #17
 8005388:	4907      	ldr	r1, [pc, #28]	; (80053a8 <L6470_HardHiZ+0x38>)
 800538a:	f7ff f94b 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800538e:	4907      	ldr	r1, [pc, #28]	; (80053ac <L6470_HardHiZ+0x3c>)
 8005390:	4805      	ldr	r0, [pc, #20]	; (80053a8 <L6470_HardHiZ+0x38>)
 8005392:	f7ff f96b 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005396:	4906      	ldr	r1, [pc, #24]	; (80053b0 <L6470_HardHiZ+0x40>)
 8005398:	4804      	ldr	r0, [pc, #16]	; (80053ac <L6470_HardHiZ+0x3c>)
 800539a:	f000 f9f7 	bl	800578c <L6470_DaisyChainCommand>
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000a7c 	.word	0x20000a7c
 80053ac:	20000a6c 	.word	0x20000a6c
 80053b0:	20000a5c 	.word	0x20000a5c

080053b4 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80053be:	79f8      	ldrb	r0, [r7, #7]
 80053c0:	2300      	movs	r3, #0
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	2300      	movs	r3, #0
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	2212      	movs	r2, #18
 80053cc:	490b      	ldr	r1, [pc, #44]	; (80053fc <L6470_GetStatus+0x48>)
 80053ce:	f7ff f929 	bl	8004624 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80053d2:	490b      	ldr	r1, [pc, #44]	; (8005400 <L6470_GetStatus+0x4c>)
 80053d4:	4809      	ldr	r0, [pc, #36]	; (80053fc <L6470_GetStatus+0x48>)
 80053d6:	f7ff f949 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80053da:	490a      	ldr	r1, [pc, #40]	; (8005404 <L6470_GetStatus+0x50>)
 80053dc:	4808      	ldr	r0, [pc, #32]	; (8005400 <L6470_GetStatus+0x4c>)
 80053de:	f000 f9d5 	bl	800578c <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2202      	movs	r2, #2
 80053e6:	4907      	ldr	r1, [pc, #28]	; (8005404 <L6470_GetStatus+0x50>)
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fa15 	bl	8005818 <L6470_ExtractReturnedData>
 80053ee:	4603      	mov	r3, r0
 80053f0:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 80053f2:	89fb      	ldrh	r3, [r7, #14]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000a7c 	.word	0x20000a7c
 8005400:	20000a6c 	.word	0x20000a6c
 8005404:	20000a5c 	.word	0x20000a5c

08005408 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af02      	add	r7, sp, #8
 800540e:	4603      	mov	r3, r0
 8005410:	603a      	str	r2, [r7, #0]
 8005412:	71fb      	strb	r3, [r7, #7]
 8005414:	460b      	mov	r3, r1
 8005416:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8005418:	79ba      	ldrb	r2, [r7, #6]
 800541a:	79f8      	ldrb	r0, [r7, #7]
 800541c:	2300      	movs	r3, #0
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	2201      	movs	r2, #1
 8005428:	4903      	ldr	r1, [pc, #12]	; (8005438 <L6470_PrepareSetParam+0x30>)
 800542a:	f7ff f8fb 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000a7c 	.word	0x20000a7c

0800543c <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af02      	add	r7, sp, #8
 8005442:	4603      	mov	r3, r0
 8005444:	460a      	mov	r2, r1
 8005446:	71fb      	strb	r3, [r7, #7]
 8005448:	4613      	mov	r3, r2
 800544a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800544c:	79ba      	ldrb	r2, [r7, #6]
 800544e:	79f8      	ldrb	r0, [r7, #7]
 8005450:	2300      	movs	r3, #0
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	2300      	movs	r3, #0
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	2202      	movs	r2, #2
 800545c:	4903      	ldr	r1, [pc, #12]	; (800546c <L6470_PrepareGetParam+0x30>)
 800545e:	f7ff f8e1 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000a7c 	.word	0x20000a7c

08005470 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af02      	add	r7, sp, #8
 8005476:	4603      	mov	r3, r0
 8005478:	603a      	str	r2, [r7, #0]
 800547a:	71fb      	strb	r3, [r7, #7]
 800547c:	460b      	mov	r3, r1
 800547e:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005480:	79ba      	ldrb	r2, [r7, #6]
 8005482:	79f8      	ldrb	r0, [r7, #7]
 8005484:	2300      	movs	r3, #0
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	2203      	movs	r2, #3
 8005490:	4903      	ldr	r1, [pc, #12]	; (80054a0 <L6470_PrepareRun+0x30>)
 8005492:	f7ff f8c7 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000a7c 	.word	0x20000a7c

080054a4 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	4603      	mov	r3, r0
 80054ac:	460a      	mov	r2, r1
 80054ae:	71fb      	strb	r3, [r7, #7]
 80054b0:	4613      	mov	r3, r2
 80054b2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80054b4:	79ba      	ldrb	r2, [r7, #6]
 80054b6:	79f8      	ldrb	r0, [r7, #7]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	2300      	movs	r3, #0
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	2204      	movs	r2, #4
 80054c4:	4903      	ldr	r1, [pc, #12]	; (80054d4 <L6470_PrepareStepClock+0x30>)
 80054c6:	f7ff f8ad 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000a7c 	.word	0x20000a7c

080054d8 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af02      	add	r7, sp, #8
 80054de:	4603      	mov	r3, r0
 80054e0:	603a      	str	r2, [r7, #0]
 80054e2:	71fb      	strb	r3, [r7, #7]
 80054e4:	460b      	mov	r3, r1
 80054e6:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 80054e8:	79ba      	ldrb	r2, [r7, #6]
 80054ea:	79f8      	ldrb	r0, [r7, #7]
 80054ec:	2300      	movs	r3, #0
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	2205      	movs	r2, #5
 80054f8:	4903      	ldr	r1, [pc, #12]	; (8005508 <L6470_PrepareMove+0x30>)
 80054fa:	f7ff f893 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000a7c 	.word	0x20000a7c

0800550c <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af02      	add	r7, sp, #8
 8005512:	4603      	mov	r3, r0
 8005514:	6039      	str	r1, [r7, #0]
 8005516:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8005518:	79f8      	ldrb	r0, [r7, #7]
 800551a:	2300      	movs	r3, #0
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2300      	movs	r3, #0
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2206      	movs	r2, #6
 8005526:	4903      	ldr	r1, [pc, #12]	; (8005534 <L6470_PrepareGoTo+0x28>)
 8005528:	f7ff f87c 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000a7c 	.word	0x20000a7c

08005538 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af02      	add	r7, sp, #8
 800553e:	4603      	mov	r3, r0
 8005540:	603a      	str	r2, [r7, #0]
 8005542:	71fb      	strb	r3, [r7, #7]
 8005544:	460b      	mov	r3, r1
 8005546:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8005548:	79ba      	ldrb	r2, [r7, #6]
 800554a:	79f8      	ldrb	r0, [r7, #7]
 800554c:	2300      	movs	r3, #0
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	2207      	movs	r2, #7
 8005558:	4903      	ldr	r1, [pc, #12]	; (8005568 <L6470_PrepareGoToDir+0x30>)
 800555a:	f7ff f863 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000a7c 	.word	0x20000a7c

0800556c <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af02      	add	r7, sp, #8
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4603      	mov	r3, r0
 8005576:	71fb      	strb	r3, [r7, #7]
 8005578:	460b      	mov	r3, r1
 800557a:	71bb      	strb	r3, [r7, #6]
 800557c:	4613      	mov	r3, r2
 800557e:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8005580:	79b9      	ldrb	r1, [r7, #6]
 8005582:	797b      	ldrb	r3, [r7, #5]
 8005584:	79f8      	ldrb	r0, [r7, #7]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	9201      	str	r2, [sp, #4]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	460b      	mov	r3, r1
 800558e:	2208      	movs	r2, #8
 8005590:	4903      	ldr	r1, [pc, #12]	; (80055a0 <L6470_PrepareGoUntil+0x34>)
 8005592:	f7ff f847 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000a7c 	.word	0x20000a7c

080055a4 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
 80055ae:	460b      	mov	r3, r1
 80055b0:	71bb      	strb	r3, [r7, #6]
 80055b2:	4613      	mov	r3, r2
 80055b4:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80055b6:	79b9      	ldrb	r1, [r7, #6]
 80055b8:	797b      	ldrb	r3, [r7, #5]
 80055ba:	79f8      	ldrb	r0, [r7, #7]
 80055bc:	2200      	movs	r2, #0
 80055be:	9201      	str	r2, [sp, #4]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	460b      	mov	r3, r1
 80055c4:	2209      	movs	r2, #9
 80055c6:	4903      	ldr	r1, [pc, #12]	; (80055d4 <L6470_PrepareReleaseSW+0x30>)
 80055c8:	f7ff f82c 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000a7c 	.word	0x20000a7c

080055d8 <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af02      	add	r7, sp, #8
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 80055e2:	79f8      	ldrb	r0, [r7, #7]
 80055e4:	2300      	movs	r3, #0
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	2300      	movs	r3, #0
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2300      	movs	r3, #0
 80055ee:	220a      	movs	r2, #10
 80055f0:	4903      	ldr	r1, [pc, #12]	; (8005600 <L6470_PrepareGoHome+0x28>)
 80055f2:	f7ff f817 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000a7c 	.word	0x20000a7c

08005604 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af02      	add	r7, sp, #8
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800560e:	79f8      	ldrb	r0, [r7, #7]
 8005610:	2300      	movs	r3, #0
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2300      	movs	r3, #0
 800561a:	220b      	movs	r2, #11
 800561c:	4903      	ldr	r1, [pc, #12]	; (800562c <L6470_PrepareGoMark+0x28>)
 800561e:	f7ff f801 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000a7c 	.word	0x20000a7c

08005630 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af02      	add	r7, sp, #8
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800563a:	79f8      	ldrb	r0, [r7, #7]
 800563c:	2300      	movs	r3, #0
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	220c      	movs	r2, #12
 8005648:	4903      	ldr	r1, [pc, #12]	; (8005658 <L6470_PrepareResetPos+0x28>)
 800564a:	f7fe ffeb 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000a7c 	.word	0x20000a7c

0800565c <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af02      	add	r7, sp, #8
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005666:	79f8      	ldrb	r0, [r7, #7]
 8005668:	2300      	movs	r3, #0
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	2300      	movs	r3, #0
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2300      	movs	r3, #0
 8005672:	220d      	movs	r2, #13
 8005674:	4903      	ldr	r1, [pc, #12]	; (8005684 <L6470_PrepareResetDevice+0x28>)
 8005676:	f7fe ffd5 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000a7c 	.word	0x20000a7c

08005688 <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af02      	add	r7, sp, #8
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 8005692:	79f8      	ldrb	r0, [r7, #7]
 8005694:	2300      	movs	r3, #0
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	220e      	movs	r2, #14
 80056a0:	4903      	ldr	r1, [pc, #12]	; (80056b0 <L6470_PrepareSoftStop+0x28>)
 80056a2:	f7fe ffbf 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000a7c 	.word	0x20000a7c

080056b4 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80056be:	79f8      	ldrb	r0, [r7, #7]
 80056c0:	2300      	movs	r3, #0
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	2300      	movs	r3, #0
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	2300      	movs	r3, #0
 80056ca:	220f      	movs	r2, #15
 80056cc:	4903      	ldr	r1, [pc, #12]	; (80056dc <L6470_PrepareHardStop+0x28>)
 80056ce:	f7fe ffa9 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000a7c 	.word	0x20000a7c

080056e0 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 80056ea:	79f8      	ldrb	r0, [r7, #7]
 80056ec:	2300      	movs	r3, #0
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	2300      	movs	r3, #0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	2210      	movs	r2, #16
 80056f8:	4903      	ldr	r1, [pc, #12]	; (8005708 <L6470_PrepareSoftHiZ+0x28>)
 80056fa:	f7fe ff93 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000a7c 	.word	0x20000a7c

0800570c <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af02      	add	r7, sp, #8
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005716:	79f8      	ldrb	r0, [r7, #7]
 8005718:	2300      	movs	r3, #0
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	2211      	movs	r2, #17
 8005724:	4903      	ldr	r1, [pc, #12]	; (8005734 <L6470_PrepareHardHiZ+0x28>)
 8005726:	f7fe ff7d 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000a7c 	.word	0x20000a7c

08005738 <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af02      	add	r7, sp, #8
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005742:	79f8      	ldrb	r0, [r7, #7]
 8005744:	2300      	movs	r3, #0
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	2300      	movs	r3, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	2212      	movs	r2, #18
 8005750:	4903      	ldr	r1, [pc, #12]	; (8005760 <L6470_PrepareGetStatus+0x28>)
 8005752:	f7fe ff67 	bl	8004624 <L6470_PrepareAppCmdPkg>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000a7c 	.word	0x20000a7c

08005764 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005768:	4905      	ldr	r1, [pc, #20]	; (8005780 <L6470_PerformPreparedApplicationCommand+0x1c>)
 800576a:	4806      	ldr	r0, [pc, #24]	; (8005784 <L6470_PerformPreparedApplicationCommand+0x20>)
 800576c:	f7fe ff7e 	bl	800466c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005770:	4905      	ldr	r1, [pc, #20]	; (8005788 <L6470_PerformPreparedApplicationCommand+0x24>)
 8005772:	4803      	ldr	r0, [pc, #12]	; (8005780 <L6470_PerformPreparedApplicationCommand+0x1c>)
 8005774:	f000 f80a 	bl	800578c <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <L6470_PerformPreparedApplicationCommand+0x24>)
}
 800577a:	4618      	mov	r0, r3
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000a6c 	.word	0x20000a6c
 8005784:	20000a7c 	.word	0x20000a7c
 8005788:	20000a5c 	.word	0x20000a5c

0800578c <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 8005796:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <L6470_DaisyChainCommand+0x7c>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e02b      	b.n	80057fa <L6470_DaisyChainCommand+0x6e>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80057a2:	2200      	movs	r2, #0
 80057a4:	2110      	movs	r1, #16
 80057a6:	4819      	ldr	r0, [pc, #100]	; (800580c <L6470_DaisyChainCommand+0x80>)
 80057a8:	f7fc f9fc 	bl	8001ba4 <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&hspi1, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	1899      	adds	r1, r3, r2
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	461a      	mov	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	441a      	add	r2, r3
 80057c0:	230a      	movs	r3, #10
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2304      	movs	r3, #4
 80057c6:	4812      	ldr	r0, [pc, #72]	; (8005810 <L6470_DaisyChainCommand+0x84>)
 80057c8:	f7fc feb1 	bl	800252e <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 80057cc:	2201      	movs	r2, #1
 80057ce:	2110      	movs	r1, #16
 80057d0:	480e      	ldr	r0, [pc, #56]	; (800580c <L6470_DaisyChainCommand+0x80>)
 80057d2:	f7fc f9e7 	bl	8001ba4 <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <L6470_DaisyChainCommand+0x88>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e006      	b.n	80057ec <L6470_DaisyChainCommand+0x60>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80057de:	bf00      	nop
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <L6470_DaisyChainCommand+0x88>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <L6470_DaisyChainCommand+0x88>)
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <L6470_DaisyChainCommand+0x88>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b13      	cmp	r3, #19
 80057f2:	d9f4      	bls.n	80057de <L6470_DaisyChainCommand+0x52>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	3301      	adds	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d9d0      	bls.n	80057a2 <L6470_DaisyChainCommand+0x16>
  }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000954 	.word	0x20000954
 800580c:	40020000 	.word	0x40020000
 8005810:	20000d68 	.word	0x20000d68
 8005814:	20000abe 	.word	0x20000abe

08005818 <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
 8005824:	4613      	mov	r3, r2
 8005826:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800582c:	2301      	movs	r3, #1
 800582e:	72fb      	strb	r3, [r7, #11]
 8005830:	e015      	b.n	800585e <L6470_ExtractReturnedData+0x46>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005832:	7afb      	ldrb	r3, [r7, #11]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	4413      	add	r3, r2
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4413      	add	r3, r2
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	79ba      	ldrb	r2, [r7, #6]
 8005846:	7afb      	ldrb	r3, [r7, #11]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	461a      	mov	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005858:	7afb      	ldrb	r3, [r7, #11]
 800585a:	3301      	adds	r3, #1
 800585c:	72fb      	strb	r3, [r7, #11]
 800585e:	7afb      	ldrb	r3, [r7, #11]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d9e6      	bls.n	8005832 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	460a      	mov	r2, r1
 800587e:	71fb      	strb	r3, [r7, #7]
 8005880:	4613      	mov	r3, r2
 8005882:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800588a:	681c      	ldr	r4, [r3, #0]
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	2118      	movs	r1, #24
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fb35 	bl	8004f00 <L6470_GetParam>
 8005896:	4603      	mov	r3, r0
 8005898:	b29b      	uxth	r3, r3
 800589a:	8023      	strh	r3, [r4, #0]
  
  switch(L6470_StatusRegisterFlagId)
 800589c:	79bb      	ldrb	r3, [r7, #6]
 800589e:	2b0e      	cmp	r3, #14
 80058a0:	f200 809a 	bhi.w	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <L6470_CheckStatusRegisterFlag+0x38>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058e9 	.word	0x080058e9
 80058b0:	080058f9 	.word	0x080058f9
 80058b4:	08005909 	.word	0x08005909
 80058b8:	08005919 	.word	0x08005919
 80058bc:	08005929 	.word	0x08005929
 80058c0:	08005939 	.word	0x08005939
 80058c4:	08005949 	.word	0x08005949
 80058c8:	08005959 	.word	0x08005959
 80058cc:	08005969 	.word	0x08005969
 80058d0:	08005979 	.word	0x08005979
 80058d4:	08005989 	.word	0x08005989
 80058d8:	08005999 	.word	0x08005999
 80058dc:	080059a9 	.word	0x080059a9
 80058e0:	080059b9 	.word	0x080059b9
 80058e4:	080059c9 	.word	0x080059c9
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	73fb      	strb	r3, [r7, #15]
    break;
 80058f6:	e06f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 80058f8:	4b3a      	ldr	r3, [pc, #232]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	73fb      	strb	r3, [r7, #15]
    break;
 8005906:	e067      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 8005908:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	73fb      	strb	r3, [r7, #15]
    break;
 8005916:	e05f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 8005918:	4b32      	ldr	r3, [pc, #200]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	73fb      	strb	r3, [r7, #15]
    break;
 8005926:	e057      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 8005928:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	73fb      	strb	r3, [r7, #15]
    break;
 8005936:	e04f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 8005938:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005942:	b2db      	uxtb	r3, r3
 8005944:	73fb      	strb	r3, [r7, #15]
    break;
 8005946:	e047      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8005948:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	73fb      	strb	r3, [r7, #15]
    break;
 8005956:	e03f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 8005958:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005962:	b2db      	uxtb	r3, r3
 8005964:	73fb      	strb	r3, [r7, #15]
    break;
 8005966:	e037      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	73fb      	strb	r3, [r7, #15]
    break;
 8005976:	e02f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 8005978:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	73fb      	strb	r3, [r7, #15]
    break;
 8005986:	e027      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	785b      	ldrb	r3, [r3, #1]
 800598e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	73fb      	strb	r3, [r7, #15]
    break;
 8005996:	e01f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 8005998:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	73fb      	strb	r3, [r7, #15]
    break;
 80059a6:	e017      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	73fb      	strb	r3, [r7, #15]
    break;
 80059b6:	e00f      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	73fb      	strb	r3, [r7, #15]
    break;
 80059c6:	e007      	b.n	80059d8 <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <L6470_CheckStatusRegisterFlag+0x170>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	73fb      	strb	r3, [r7, #15]
    break;
 80059d6:	bf00      	nop
  }
  
  return state;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200000ac 	.word	0x200000ac

080059e8 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80059f8:	eeb0 0a67 	vmov.f32	s0, s15
 80059fc:	f7ff f860 	bl	8004ac0 <Step_s2_2_Acc>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a12:	f7ff f87b 	bl	8004b0c <Step_s2_2_Dec>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a24:	eeb0 0a67 	vmov.f32	s0, s15
 8005a28:	f7ff f896 	bl	8004b58 <Step_s_2_MaxSpeed>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a3e:	f7ff f8b1 	bl	8004ba4 <Step_s_2_MinSpeed>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	845a      	strh	r2, [r3, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005a50:	eeb0 0a67 	vmov.f32	s0, s15
 8005a54:	f7ff f8cc 	bl	8004bf0 <Step_s_2_FsSpd>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	849a      	strh	r2, [r3, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005a66:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8005d14 <L6470_Config+0x32c>
 8005a6a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	ed93 7a00 	vldr	s14, [r3]
 8005a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005a80:	793b      	ldrb	r3, [r7, #4]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a90:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8005d14 <L6470_Config+0x32c>
 8005a94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	ed93 7a00 	vldr	s14, [r3]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	edc7 7a01 	vstr	s15, [r7, #4]
 8005aaa:	793b      	ldrb	r3, [r7, #4]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005aba:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005d14 <L6470_Config+0x32c>
 8005abe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	ed93 7a00 	vldr	s14, [r3]
 8005ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad0:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ad4:	793b      	ldrb	r3, [r7, #4]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005ae4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005d14 <L6470_Config+0x32c>
 8005ae8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	ed93 7a00 	vldr	s14, [r3]
 8005af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afa:	edc7 7a01 	vstr	s15, [r7, #4]
 8005afe:	793b      	ldrb	r3, [r7, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b12:	f7ff f897 	bl	8004c44 <Step_s_2_IntSpeed>
 8005b16:	4603      	mov	r3, r0
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005b24:	eeb0 0a67 	vmov.f32	s0, s15
 8005b28:	f7ff f8b2 	bl	8004c90 <s_Step_2_StSlp>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b40:	f7ff f8cc 	bl	8004cdc <s_Step_2_FnSlpAcc>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005b54:	eeb0 0a67 	vmov.f32	s0, s15
 8005b58:	f7ff f8e6 	bl	8004d28 <s_Step_2_FnSlpDec>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005b78:	eeb0 0a67 	vmov.f32	s0, s15
 8005b7c:	f7ff f8fa 	bl	8004d74 <mA_2_OcdTh>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005b90:	eeb0 0a67 	vmov.f32	s0, s15
 8005b94:	f7ff f93e 	bl	8004e14 <mA_2_StallTh>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	7810      	ldrb	r0, [r2, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	8b92      	ldrh	r2, [r2, #28]
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	7810      	ldrb	r0, [r2, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	8bd2      	ldrh	r2, [r2, #30]
 8005be4:	2105      	movs	r1, #5
 8005be6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	7810      	ldrb	r0, [r2, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	8c12      	ldrh	r2, [r2, #32]
 8005bf6:	2106      	movs	r1, #6
 8005bf8:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	7810      	ldrb	r0, [r2, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8005c08:	2107      	movs	r1, #7
 8005c0a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	7810      	ldrb	r0, [r2, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005c1a:	2108      	movs	r1, #8
 8005c1c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	7810      	ldrb	r0, [r2, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8005c2e:	2109      	movs	r1, #9
 8005c30:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	7810      	ldrb	r0, [r2, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8005c42:	210a      	movs	r1, #10
 8005c44:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	7810      	ldrb	r0, [r2, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8005c56:	210b      	movs	r1, #11
 8005c58:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	7810      	ldrb	r0, [r2, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8005c6a:	210c      	movs	r1, #12
 8005c6c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	7810      	ldrb	r0, [r2, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8005c7c:	210d      	movs	r1, #13
 8005c7e:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	7810      	ldrb	r0, [r2, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005c90:	210e      	movs	r1, #14
 8005c92:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	7810      	ldrb	r0, [r2, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005ca4:	210f      	movs	r1, #15
 8005ca6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	7810      	ldrb	r0, [r2, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005cb8:	2110      	movs	r1, #16
 8005cba:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	7810      	ldrb	r0, [r2, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005ccc:	2111      	movs	r1, #17
 8005cce:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	7810      	ldrb	r0, [r2, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8005ce0:	2113      	movs	r1, #19
 8005ce2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	7810      	ldrb	r0, [r2, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005cf4:	2114      	movs	r1, #20
 8005cf6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	7810      	ldrb	r0, [r2, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8005d08:	2115      	movs	r1, #21
 8005d0a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	e001      	b.n	8005d18 <L6470_Config+0x330>
 8005d14:	43800000 	.word	0x43800000
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	7810      	ldrb	r0, [r2, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d22:	2116      	movs	r1, #22
 8005d24:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	7810      	ldrb	r0, [r2, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8005d34:	2117      	movs	r1, #23
 8005d36:	4798      	blx	r3
}
 8005d38:	bf00      	nop
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
 8005d4a:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <MX_DMA_Init+0x3c>)
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <MX_DMA_Init+0x3c>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d54:	6313      	str	r3, [r2, #48]	; 0x30
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <MX_DMA_Init+0x3c>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d5e:	607b      	str	r3, [r7, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	2010      	movs	r0, #16
 8005d68:	f7fb f9a9 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	f7fb f9c2 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023800 	.word	0x40023800

08005d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	4a3b      	ldr	r2, [pc, #236]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005d8c:	4b3a      	ldr	r3, [pc, #232]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30
 8005d96:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	4a34      	ldr	r2, [pc, #208]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005da8:	4b33      	ldr	r3, [pc, #204]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6313      	str	r3, [r2, #48]	; 0x30
 8005db2:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dce:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <MX_GPIO_Init+0xf8>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L6470_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2130      	movs	r1, #48	; 0x30
 8005dde:	4827      	ldr	r0, [pc, #156]	; (8005e7c <MX_GPIO_Init+0xfc>)
 8005de0:	f7fb fee0 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8005de4:	2200      	movs	r2, #0
 8005de6:	2120      	movs	r1, #32
 8005de8:	4825      	ldr	r0, [pc, #148]	; (8005e80 <MX_GPIO_Init+0x100>)
 8005dea:	f7fb fedb 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Push_Button_Pin|L6470_BUSY_SYNC_INT_Pin|L6470_Flag_INT_Pin;
 8005dee:	f242 0303 	movw	r3, #8195	; 0x2003
 8005df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005df4:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <MX_GPIO_Init+0x104>)
 8005df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	4619      	mov	r1, r3
 8005e02:	4821      	ldr	r0, [pc, #132]	; (8005e88 <MX_GPIO_Init+0x108>)
 8005e04:	f7fb fd4c 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LED_GREEN_Pin;
 8005e08:	2330      	movs	r3, #48	; 0x30
 8005e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4817      	ldr	r0, [pc, #92]	; (8005e7c <MX_GPIO_Init+0xfc>)
 8005e20:	f7fb fd3e 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 8005e24:	2320      	movs	r3, #32
 8005e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005e28:	2311      	movs	r3, #17
 8005e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8005e34:	f107 030c 	add.w	r3, r7, #12
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4811      	ldr	r0, [pc, #68]	; (8005e80 <MX_GPIO_Init+0x100>)
 8005e3c:	f7fb fd30 	bl	80018a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	2006      	movs	r0, #6
 8005e46:	f7fb f93a 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005e4a:	2006      	movs	r0, #6
 8005e4c:	f7fb f953 	bl	80010f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005e50:	2200      	movs	r2, #0
 8005e52:	2100      	movs	r1, #0
 8005e54:	2007      	movs	r0, #7
 8005e56:	f7fb f932 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005e5a:	2007      	movs	r0, #7
 8005e5c:	f7fb f94b 	bl	80010f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2028      	movs	r0, #40	; 0x28
 8005e66:	f7fb f92a 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005e6a:	2028      	movs	r0, #40	; 0x28
 8005e6c:	f7fb f943 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 8005e70:	bf00      	nop
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	40020000 	.word	0x40020000
 8005e80:	40020400 	.word	0x40020400
 8005e84:	10210000 	.word	0x10210000
 8005e88:	40020800 	.word	0x40020800

08005e8c <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 0 */


void HAL_SYSTICK_Callback(void)
    {
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
    }
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ea2:	f7fa ffa3 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ea6:	f000 fa11 	bl	80062cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005eaa:	f7ff ff69 	bl	8005d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8005eae:	f7ff ff47 	bl	8005d40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005eb2:	f000 fe35 	bl	8006b20 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8005eb6:	f000 fb67 	bl	8006588 <MX_SPI1_Init>
  MX_TIM2_Init();
 8005eba:	f000 fcc5 	bl	8006848 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Motor_1_Data.motorvoltage=9.0;
 8005ebe:	4b96      	ldr	r3, [pc, #600]	; (8006118 <main+0x27c>)
 8005ec0:	4a96      	ldr	r2, [pc, #600]	; (800611c <main+0x280>)
 8005ec2:	601a      	str	r2, [r3, #0]
  Motor_1_Data.fullstepsperrevolution=200;
 8005ec4:	4b94      	ldr	r3, [pc, #592]	; (8006118 <main+0x27c>)
 8005ec6:	4a96      	ldr	r2, [pc, #600]	; (8006120 <main+0x284>)
 8005ec8:	605a      	str	r2, [r3, #4]
  Motor_1_Data.phasecurrent=1.5;
 8005eca:	4b93      	ldr	r3, [pc, #588]	; (8006118 <main+0x27c>)
 8005ecc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005ed0:	609a      	str	r2, [r3, #8]
  Motor_1_Data.phasevoltage=3.0;
 8005ed2:	4b91      	ldr	r3, [pc, #580]	; (8006118 <main+0x27c>)
 8005ed4:	4a93      	ldr	r2, [pc, #588]	; (8006124 <main+0x288>)
 8005ed6:	60da      	str	r2, [r3, #12]
  Motor_1_Data.speed=100.0;
 8005ed8:	4b8f      	ldr	r3, [pc, #572]	; (8006118 <main+0x27c>)
 8005eda:	4a93      	ldr	r2, [pc, #588]	; (8006128 <main+0x28c>)
 8005edc:	611a      	str	r2, [r3, #16]
  Motor_1_Data.acc=500.0;
 8005ede:	4b8e      	ldr	r3, [pc, #568]	; (8006118 <main+0x27c>)
 8005ee0:	4a92      	ldr	r2, [pc, #584]	; (800612c <main+0x290>)
 8005ee2:	615a      	str	r2, [r3, #20]
  Motor_1_Data.dec=500.0;
 8005ee4:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <main+0x27c>)
 8005ee6:	4a91      	ldr	r2, [pc, #580]	; (800612c <main+0x290>)
 8005ee8:	619a      	str	r2, [r3, #24]
  Motor_1_Data.maxspeed=1000.0;
 8005eea:	4b8b      	ldr	r3, [pc, #556]	; (8006118 <main+0x27c>)
 8005eec:	4a90      	ldr	r2, [pc, #576]	; (8006130 <main+0x294>)
 8005eee:	61da      	str	r2, [r3, #28]
  Motor_1_Data.minspeed=5.0;
 8005ef0:	4b89      	ldr	r3, [pc, #548]	; (8006118 <main+0x27c>)
 8005ef2:	4a90      	ldr	r2, [pc, #576]	; (8006134 <main+0x298>)
 8005ef4:	621a      	str	r2, [r3, #32]
  Motor_1_Data.fsspd=602.7;
 8005ef6:	4b88      	ldr	r3, [pc, #544]	; (8006118 <main+0x27c>)
 8005ef8:	4a8f      	ldr	r2, [pc, #572]	; (8006138 <main+0x29c>)
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
  Motor_1_Data.kvalhold=3.06;
 8005efc:	4b86      	ldr	r3, [pc, #536]	; (8006118 <main+0x27c>)
 8005efe:	4a8f      	ldr	r2, [pc, #572]	; (800613c <main+0x2a0>)
 8005f00:	629a      	str	r2, [r3, #40]	; 0x28
  Motor_1_Data.kvalrun=3.06;
 8005f02:	4b85      	ldr	r3, [pc, #532]	; (8006118 <main+0x27c>)
 8005f04:	4a8d      	ldr	r2, [pc, #564]	; (800613c <main+0x2a0>)
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c
  Motor_1_Data.kvalacc=3.06;
 8005f08:	4b83      	ldr	r3, [pc, #524]	; (8006118 <main+0x27c>)
 8005f0a:	4a8c      	ldr	r2, [pc, #560]	; (800613c <main+0x2a0>)
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
  Motor_1_Data.kvaldec=3.06;
 8005f0e:	4b82      	ldr	r3, [pc, #520]	; (8006118 <main+0x27c>)
 8005f10:	4a8a      	ldr	r2, [pc, #552]	; (800613c <main+0x2a0>)
 8005f12:	635a      	str	r2, [r3, #52]	; 0x34
  Motor_1_Data.intspeed=61.52;
 8005f14:	4b80      	ldr	r3, [pc, #512]	; (8006118 <main+0x27c>)
 8005f16:	4a8a      	ldr	r2, [pc, #552]	; (8006140 <main+0x2a4>)
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
  Motor_1_Data.stslp=392.1569e-6;
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <main+0x27c>)
 8005f1c:	4a89      	ldr	r2, [pc, #548]	; (8006144 <main+0x2a8>)
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  Motor_1_Data.fnslpacc=643.1372e-6;
 8005f20:	4b7d      	ldr	r3, [pc, #500]	; (8006118 <main+0x27c>)
 8005f22:	4a89      	ldr	r2, [pc, #548]	; (8006148 <main+0x2ac>)
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
  Motor_1_Data.fnslpdec=643.1372e-6;
 8005f26:	4b7c      	ldr	r3, [pc, #496]	; (8006118 <main+0x27c>)
 8005f28:	4a87      	ldr	r2, [pc, #540]	; (8006148 <main+0x2ac>)
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
  Motor_1_Data.kterm=0;
 8005f2c:	4b7a      	ldr	r3, [pc, #488]	; (8006118 <main+0x27c>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  Motor_1_Data.ocdth=1*1500*1.00;
 8005f34:	4b78      	ldr	r3, [pc, #480]	; (8006118 <main+0x27c>)
 8005f36:	4a85      	ldr	r2, [pc, #532]	; (800614c <main+0x2b0>)
 8005f38:	64da      	str	r2, [r3, #76]	; 0x4c
  Motor_1_Data.stallth=1000*1.00;
 8005f3a:	4b77      	ldr	r3, [pc, #476]	; (8006118 <main+0x27c>)
 8005f3c:	4a7c      	ldr	r2, [pc, #496]	; (8006130 <main+0x294>)
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50
  Motor_1_Data.step_sel=MICROSTEP_1_128;
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <main+0x27c>)
 8005f42:	2207      	movs	r2, #7
 8005f44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  Motor_1_Data.alarmen=0xFF;
 8005f48:	4b73      	ldr	r3, [pc, #460]	; (8006118 <main+0x27c>)
 8005f4a:	22ff      	movs	r2, #255	; 0xff
 8005f4c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  Motor_1_Data.config=0x2E88;
 8005f50:	4b71      	ldr	r3, [pc, #452]	; (8006118 <main+0x27c>)
 8005f52:	f642 6288 	movw	r2, #11912	; 0x2e88
 8005f56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56


  Motor_X_Data.motorvoltage=9.0;
 8005f5a:	4b7d      	ldr	r3, [pc, #500]	; (8006150 <main+0x2b4>)
 8005f5c:	4a6f      	ldr	r2, [pc, #444]	; (800611c <main+0x280>)
 8005f5e:	601a      	str	r2, [r3, #0]
  Motor_X_Data.fullstepsperrevolution=200;
 8005f60:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <main+0x2b4>)
 8005f62:	4a6f      	ldr	r2, [pc, #444]	; (8006120 <main+0x284>)
 8005f64:	605a      	str	r2, [r3, #4]
  Motor_X_Data.phasecurrent=1.5;
 8005f66:	4b7a      	ldr	r3, [pc, #488]	; (8006150 <main+0x2b4>)
 8005f68:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005f6c:	609a      	str	r2, [r3, #8]
  Motor_X_Data.phasevoltage=3.0;
 8005f6e:	4b78      	ldr	r3, [pc, #480]	; (8006150 <main+0x2b4>)
 8005f70:	4a6c      	ldr	r2, [pc, #432]	; (8006124 <main+0x288>)
 8005f72:	60da      	str	r2, [r3, #12]
  Motor_X_Data.speed=100.0;
 8005f74:	4b76      	ldr	r3, [pc, #472]	; (8006150 <main+0x2b4>)
 8005f76:	4a6c      	ldr	r2, [pc, #432]	; (8006128 <main+0x28c>)
 8005f78:	611a      	str	r2, [r3, #16]
  Motor_X_Data.acc=100.0;
 8005f7a:	4b75      	ldr	r3, [pc, #468]	; (8006150 <main+0x2b4>)
 8005f7c:	4a6a      	ldr	r2, [pc, #424]	; (8006128 <main+0x28c>)
 8005f7e:	615a      	str	r2, [r3, #20]
  Motor_X_Data.dec=50.0;
 8005f80:	4b73      	ldr	r3, [pc, #460]	; (8006150 <main+0x2b4>)
 8005f82:	4a74      	ldr	r2, [pc, #464]	; (8006154 <main+0x2b8>)
 8005f84:	619a      	str	r2, [r3, #24]
  Motor_X_Data.maxspeed=1000.0;
 8005f86:	4b72      	ldr	r3, [pc, #456]	; (8006150 <main+0x2b4>)
 8005f88:	4a69      	ldr	r2, [pc, #420]	; (8006130 <main+0x294>)
 8005f8a:	61da      	str	r2, [r3, #28]
  Motor_X_Data.minspeed=0.0;
 8005f8c:	4b70      	ldr	r3, [pc, #448]	; (8006150 <main+0x2b4>)
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	621a      	str	r2, [r3, #32]
  Motor_X_Data.fsspd=602.7;
 8005f94:	4b6e      	ldr	r3, [pc, #440]	; (8006150 <main+0x2b4>)
 8005f96:	4a68      	ldr	r2, [pc, #416]	; (8006138 <main+0x29c>)
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24
  Motor_X_Data.kvalhold=3.06;
 8005f9a:	4b6d      	ldr	r3, [pc, #436]	; (8006150 <main+0x2b4>)
 8005f9c:	4a67      	ldr	r2, [pc, #412]	; (800613c <main+0x2a0>)
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28
  Motor_X_Data.kvalrun=3.06;
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	; (8006150 <main+0x2b4>)
 8005fa2:	4a66      	ldr	r2, [pc, #408]	; (800613c <main+0x2a0>)
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  Motor_X_Data.kvalacc=3.06;
 8005fa6:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <main+0x2b4>)
 8005fa8:	4a64      	ldr	r2, [pc, #400]	; (800613c <main+0x2a0>)
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
  Motor_X_Data.kvaldec=3.06;
 8005fac:	4b68      	ldr	r3, [pc, #416]	; (8006150 <main+0x2b4>)
 8005fae:	4a63      	ldr	r2, [pc, #396]	; (800613c <main+0x2a0>)
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34
  Motor_X_Data.intspeed=61.52;
 8005fb2:	4b67      	ldr	r3, [pc, #412]	; (8006150 <main+0x2b4>)
 8005fb4:	4a62      	ldr	r2, [pc, #392]	; (8006140 <main+0x2a4>)
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
  Motor_X_Data.stslp=392.1569e-6;
 8005fb8:	4b65      	ldr	r3, [pc, #404]	; (8006150 <main+0x2b4>)
 8005fba:	4a62      	ldr	r2, [pc, #392]	; (8006144 <main+0x2a8>)
 8005fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  Motor_X_Data.fnslpacc=643.1372e-6;
 8005fbe:	4b64      	ldr	r3, [pc, #400]	; (8006150 <main+0x2b4>)
 8005fc0:	4a61      	ldr	r2, [pc, #388]	; (8006148 <main+0x2ac>)
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
  Motor_X_Data.fnslpdec=643.1372e-6;
 8005fc4:	4b62      	ldr	r3, [pc, #392]	; (8006150 <main+0x2b4>)
 8005fc6:	4a60      	ldr	r2, [pc, #384]	; (8006148 <main+0x2ac>)
 8005fc8:	645a      	str	r2, [r3, #68]	; 0x44
  Motor_X_Data.kterm=0;
 8005fca:	4b61      	ldr	r3, [pc, #388]	; (8006150 <main+0x2b4>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  Motor_X_Data.ocdth=1*1500*1.00;
 8005fd2:	4b5f      	ldr	r3, [pc, #380]	; (8006150 <main+0x2b4>)
 8005fd4:	4a5d      	ldr	r2, [pc, #372]	; (800614c <main+0x2b0>)
 8005fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  Motor_X_Data.stallth=1000*1.00;
 8005fd8:	4b5d      	ldr	r3, [pc, #372]	; (8006150 <main+0x2b4>)
 8005fda:	4a55      	ldr	r2, [pc, #340]	; (8006130 <main+0x294>)
 8005fdc:	651a      	str	r2, [r3, #80]	; 0x50
  Motor_X_Data.step_sel=MICROSTEP_1_128;
 8005fde:	4b5c      	ldr	r3, [pc, #368]	; (8006150 <main+0x2b4>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  Motor_X_Data.alarmen=0xFF;
 8005fe6:	4b5a      	ldr	r3, [pc, #360]	; (8006150 <main+0x2b4>)
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  Motor_X_Data.config=0x2E88;
 8005fee:	4b58      	ldr	r3, [pc, #352]	; (8006150 <main+0x2b4>)
 8005ff0:	f642 6288 	movw	r2, #11912	; 0x2e88
 8005ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56


  Motor_Y_Data.motorvoltage=9.0;
 8005ff8:	4b57      	ldr	r3, [pc, #348]	; (8006158 <main+0x2bc>)
 8005ffa:	4a48      	ldr	r2, [pc, #288]	; (800611c <main+0x280>)
 8005ffc:	601a      	str	r2, [r3, #0]
  Motor_Y_Data.fullstepsperrevolution=200;
 8005ffe:	4b56      	ldr	r3, [pc, #344]	; (8006158 <main+0x2bc>)
 8006000:	4a47      	ldr	r2, [pc, #284]	; (8006120 <main+0x284>)
 8006002:	605a      	str	r2, [r3, #4]
  Motor_Y_Data.phasecurrent=1.5;
 8006004:	4b54      	ldr	r3, [pc, #336]	; (8006158 <main+0x2bc>)
 8006006:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800600a:	609a      	str	r2, [r3, #8]
  Motor_Y_Data.phasevoltage=3.0;
 800600c:	4b52      	ldr	r3, [pc, #328]	; (8006158 <main+0x2bc>)
 800600e:	4a45      	ldr	r2, [pc, #276]	; (8006124 <main+0x288>)
 8006010:	60da      	str	r2, [r3, #12]
  Motor_Y_Data.speed=100.0;
 8006012:	4b51      	ldr	r3, [pc, #324]	; (8006158 <main+0x2bc>)
 8006014:	4a44      	ldr	r2, [pc, #272]	; (8006128 <main+0x28c>)
 8006016:	611a      	str	r2, [r3, #16]
  Motor_Y_Data.acc=100.0;
 8006018:	4b4f      	ldr	r3, [pc, #316]	; (8006158 <main+0x2bc>)
 800601a:	4a43      	ldr	r2, [pc, #268]	; (8006128 <main+0x28c>)
 800601c:	615a      	str	r2, [r3, #20]
  Motor_Y_Data.dec=50.0;
 800601e:	4b4e      	ldr	r3, [pc, #312]	; (8006158 <main+0x2bc>)
 8006020:	4a4c      	ldr	r2, [pc, #304]	; (8006154 <main+0x2b8>)
 8006022:	619a      	str	r2, [r3, #24]
  Motor_Y_Data.maxspeed=1000.0;
 8006024:	4b4c      	ldr	r3, [pc, #304]	; (8006158 <main+0x2bc>)
 8006026:	4a42      	ldr	r2, [pc, #264]	; (8006130 <main+0x294>)
 8006028:	61da      	str	r2, [r3, #28]
  Motor_Y_Data.minspeed=0.0;
 800602a:	4b4b      	ldr	r3, [pc, #300]	; (8006158 <main+0x2bc>)
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	621a      	str	r2, [r3, #32]
  Motor_Y_Data.fsspd=602.7;
 8006032:	4b49      	ldr	r3, [pc, #292]	; (8006158 <main+0x2bc>)
 8006034:	4a40      	ldr	r2, [pc, #256]	; (8006138 <main+0x29c>)
 8006036:	625a      	str	r2, [r3, #36]	; 0x24
  Motor_Y_Data.kvalhold=3.06;
 8006038:	4b47      	ldr	r3, [pc, #284]	; (8006158 <main+0x2bc>)
 800603a:	4a40      	ldr	r2, [pc, #256]	; (800613c <main+0x2a0>)
 800603c:	629a      	str	r2, [r3, #40]	; 0x28
  Motor_Y_Data.kvalrun=3.06;
 800603e:	4b46      	ldr	r3, [pc, #280]	; (8006158 <main+0x2bc>)
 8006040:	4a3e      	ldr	r2, [pc, #248]	; (800613c <main+0x2a0>)
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c
  Motor_Y_Data.kvalacc=3.06;
 8006044:	4b44      	ldr	r3, [pc, #272]	; (8006158 <main+0x2bc>)
 8006046:	4a3d      	ldr	r2, [pc, #244]	; (800613c <main+0x2a0>)
 8006048:	631a      	str	r2, [r3, #48]	; 0x30
  Motor_Y_Data.kvaldec=3.06;
 800604a:	4b43      	ldr	r3, [pc, #268]	; (8006158 <main+0x2bc>)
 800604c:	4a3b      	ldr	r2, [pc, #236]	; (800613c <main+0x2a0>)
 800604e:	635a      	str	r2, [r3, #52]	; 0x34
  Motor_Y_Data.intspeed=61.52;
 8006050:	4b41      	ldr	r3, [pc, #260]	; (8006158 <main+0x2bc>)
 8006052:	4a3b      	ldr	r2, [pc, #236]	; (8006140 <main+0x2a4>)
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
  Motor_Y_Data.stslp=392.1569e-6;
 8006056:	4b40      	ldr	r3, [pc, #256]	; (8006158 <main+0x2bc>)
 8006058:	4a3a      	ldr	r2, [pc, #232]	; (8006144 <main+0x2a8>)
 800605a:	63da      	str	r2, [r3, #60]	; 0x3c
  Motor_Y_Data.fnslpacc=643.1372e-6;
 800605c:	4b3e      	ldr	r3, [pc, #248]	; (8006158 <main+0x2bc>)
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <main+0x2ac>)
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
  Motor_Y_Data.fnslpdec=643.1372e-6;
 8006062:	4b3d      	ldr	r3, [pc, #244]	; (8006158 <main+0x2bc>)
 8006064:	4a38      	ldr	r2, [pc, #224]	; (8006148 <main+0x2ac>)
 8006066:	645a      	str	r2, [r3, #68]	; 0x44
  Motor_Y_Data.kterm=0;
 8006068:	4b3b      	ldr	r3, [pc, #236]	; (8006158 <main+0x2bc>)
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  Motor_Y_Data.ocdth=1*1500*1.00;
 8006070:	4b39      	ldr	r3, [pc, #228]	; (8006158 <main+0x2bc>)
 8006072:	4a36      	ldr	r2, [pc, #216]	; (800614c <main+0x2b0>)
 8006074:	64da      	str	r2, [r3, #76]	; 0x4c
  Motor_Y_Data.stallth=1000*1.00;
 8006076:	4b38      	ldr	r3, [pc, #224]	; (8006158 <main+0x2bc>)
 8006078:	4a2d      	ldr	r2, [pc, #180]	; (8006130 <main+0x294>)
 800607a:	651a      	str	r2, [r3, #80]	; 0x50
  Motor_Y_Data.step_sel=MICROSTEP_1_128;
 800607c:	4b36      	ldr	r3, [pc, #216]	; (8006158 <main+0x2bc>)
 800607e:	2207      	movs	r2, #7
 8006080:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  Motor_Y_Data.alarmen=0xFF;
 8006084:	4b34      	ldr	r3, [pc, #208]	; (8006158 <main+0x2bc>)
 8006086:	22ff      	movs	r2, #255	; 0xff
 8006088:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  Motor_Y_Data.config=0x2E88;
 800608c:	4b32      	ldr	r3, [pc, #200]	; (8006158 <main+0x2bc>)
 800608e:	f642 6288 	movw	r2, #11912	; 0x2e88
 8006092:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

  L6470_DISABLE();
 8006096:	2200      	movs	r2, #0
 8006098:	2120      	movs	r1, #32
 800609a:	4830      	ldr	r0, [pc, #192]	; (800615c <main+0x2c0>)
 800609c:	f7fb fd82 	bl	8001ba4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80060a0:	200a      	movs	r0, #10
 80060a2:	f7fa ff15 	bl	8000ed0 <HAL_Delay>
  L6470_ENABLE();
 80060a6:	2201      	movs	r2, #1
 80060a8:	2120      	movs	r1, #32
 80060aa:	482c      	ldr	r0, [pc, #176]	; (800615c <main+0x2c0>)
 80060ac:	f7fb fd7a 	bl	8001ba4 <HAL_GPIO_WritePin>

  L6470_ResetDevice(0);
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7ff f8d5 	bl	8005260 <L6470_ResetDevice>
  L6470_GetStatus(0);
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7ff f97c 	bl	80053b4 <L6470_GetStatus>

  L6470_ResetDevice(1);
 80060bc:	2001      	movs	r0, #1
 80060be:	f7ff f8cf 	bl	8005260 <L6470_ResetDevice>
  L6470_GetStatus(1);
 80060c2:	2001      	movs	r0, #1
 80060c4:	f7ff f976 	bl	80053b4 <L6470_GetStatus>

  L6470_ResetDevice(2);
 80060c8:	2002      	movs	r0, #2
 80060ca:	f7ff f8c9 	bl	8005260 <L6470_ResetDevice>
  L6470_GetStatus(2);
 80060ce:	2002      	movs	r0, #2
 80060d0:	f7ff f970 	bl	80053b4 <L6470_GetStatus>

  L6470_ResetDevice(3);
 80060d4:	2003      	movs	r0, #3
 80060d6:	f7ff f8c3 	bl	8005260 <L6470_ResetDevice>
  L6470_GetStatus(3);
 80060da:	2003      	movs	r0, #3
 80060dc:	f7ff f96a 	bl	80053b4 <L6470_GetStatus>



  Motor_X_Handler.DaisyChainPosition=0;
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <main+0x2c4>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
  Motor_X_Handler.Command=&L6470Command;
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <main+0x2c4>)
 80060e8:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <main+0x2c8>)
 80060ea:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_X_Handler,&Motor_X_Data);
 80060ec:	4918      	ldr	r1, [pc, #96]	; (8006150 <main+0x2b4>)
 80060ee:	481c      	ldr	r0, [pc, #112]	; (8006160 <main+0x2c4>)
 80060f0:	f7ff fc7a 	bl	80059e8 <L6470_Config>


  Motor_Y_Handler.DaisyChainPosition=1;
 80060f4:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <main+0x2cc>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
  Motor_Y_Handler.Command=&L6470Command;
 80060fa:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <main+0x2cc>)
 80060fc:	4a19      	ldr	r2, [pc, #100]	; (8006164 <main+0x2c8>)
 80060fe:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_Y_Handler,&Motor_1_Data);
 8006100:	4905      	ldr	r1, [pc, #20]	; (8006118 <main+0x27c>)
 8006102:	4819      	ldr	r0, [pc, #100]	; (8006168 <main+0x2cc>)
 8006104:	f7ff fc70 	bl	80059e8 <L6470_Config>

  Motor_Z_Handler.DaisyChainPosition=2;
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <main+0x2d0>)
 800610a:	2202      	movs	r2, #2
 800610c:	701a      	strb	r2, [r3, #0]
  Motor_Z_Handler.Command=&L6470Command;
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <main+0x2d0>)
 8006110:	4a14      	ldr	r2, [pc, #80]	; (8006164 <main+0x2c8>)
 8006112:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_Z_Handler,&Motor_1_Data);
 8006114:	4900      	ldr	r1, [pc, #0]	; (8006118 <main+0x27c>)
 8006116:	e02b      	b.n	8006170 <main+0x2d4>
 8006118:	20000ac0 	.word	0x20000ac0
 800611c:	41100000 	.word	0x41100000
 8006120:	43480000 	.word	0x43480000
 8006124:	40400000 	.word	0x40400000
 8006128:	42c80000 	.word	0x42c80000
 800612c:	43fa0000 	.word	0x43fa0000
 8006130:	447a0000 	.word	0x447a0000
 8006134:	40a00000 	.word	0x40a00000
 8006138:	4416accd 	.word	0x4416accd
 800613c:	4043d70a 	.word	0x4043d70a
 8006140:	4276147b 	.word	0x4276147b
 8006144:	39cd9a68 	.word	0x39cd9a68
 8006148:	3a289835 	.word	0x3a289835
 800614c:	44bb8000 	.word	0x44bb8000
 8006150:	20000c40 	.word	0x20000c40
 8006154:	42480000 	.word	0x42480000
 8006158:	20000bac 	.word	0x20000bac
 800615c:	40020400 	.word	0x40020400
 8006160:	20000c98 	.word	0x20000c98
 8006164:	20000018 	.word	0x20000018
 8006168:	20000cd4 	.word	0x20000cd4
 800616c:	20000c04 	.word	0x20000c04
 8006170:	484e      	ldr	r0, [pc, #312]	; (80062ac <main+0x410>)
 8006172:	f7ff fc39 	bl	80059e8 <L6470_Config>

  Motor_M_Handler.DaisyChainPosition=3;
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <main+0x414>)
 8006178:	2203      	movs	r2, #3
 800617a:	701a      	strb	r2, [r3, #0]
  Motor_M_Handler.Command=&L6470Command;
 800617c:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <main+0x414>)
 800617e:	4a4d      	ldr	r2, [pc, #308]	; (80062b4 <main+0x418>)
 8006180:	609a      	str	r2, [r3, #8]
  L6470_Config(&Motor_M_Handler,&Motor_1_Data);
 8006182:	494d      	ldr	r1, [pc, #308]	; (80062b8 <main+0x41c>)
 8006184:	484a      	ldr	r0, [pc, #296]	; (80062b0 <main+0x414>)
 8006186:	f7ff fc2f 	bl	80059e8 <L6470_Config>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800618a:	2100      	movs	r1, #0
 800618c:	484b      	ldr	r0, [pc, #300]	; (80062bc <main+0x420>)
 800618e:	f7fc fc8a 	bl	8002aa6 <HAL_TIM_Encoder_Start>

  Ring_Buffer_Init(&huart2);
 8006192:	484b      	ldr	r0, [pc, #300]	; (80062c0 <main+0x424>)
 8006194:	f000 f970 	bl	8006478 <Ring_Buffer_Init>

  CLI_Commands_Register();
 8006198:	f7fe f85c 	bl	8004254 <CLI_Commands_Register>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */


            UARTCommandConsoleLoop();
 800619c:	f000 fc02 	bl	80069a4 <UARTCommandConsoleLoop>

            char int_to_str[15];

            int16_t encoder_count_x = htim2.Instance->CNT;
 80061a0:	4b46      	ldr	r3, [pc, #280]	; (80062bc <main+0x420>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	82fb      	strh	r3, [r7, #22]
            static int16_t encoder_count_x_prev;

            itoa(encoder_count_x,int_to_str,10);
 80061a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80061ac:	1d39      	adds	r1, r7, #4
 80061ae:	220a      	movs	r2, #10
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fdbf 	bl	8006d34 <itoa>

            static uint32_t time_stamp = 0;

            if(HAL_GetTick() - time_stamp > 10)
 80061b6:	f7fa fe7f 	bl	8000eb8 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	4b41      	ldr	r3, [pc, #260]	; (80062c4 <main+0x428>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b0a      	cmp	r3, #10
 80061c4:	d9ea      	bls.n	800619c <main+0x300>
        	{

            time_stamp = HAL_GetTick() ;
 80061c6:	f7fa fe77 	bl	8000eb8 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4b3d      	ldr	r3, [pc, #244]	; (80062c4 <main+0x428>)
 80061ce:	601a      	str	r2, [r3, #0]

            if(encoder_count_x != encoder_count_x_prev)
 80061d0:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <main+0x42c>)
 80061d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d0de      	beq.n	800619c <main+0x300>

        	{
        	encoder_count_x_prev = encoder_count_x;
 80061de:	4a3a      	ldr	r2, [pc, #232]	; (80062c8 <main+0x42c>)
 80061e0:	8afb      	ldrh	r3, [r7, #22]
 80061e2:	8013      	strh	r3, [r2, #0]
            if(encoder_count_x >=0)
 80061e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	db2b      	blt.n	8006244 <main+0x3a8>
        	{
        	encoder_count_x = encoder_count_x*exp(encoder_count_x);
 80061ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fa f94b 	bl	800048c <__aeabi_i2d>
 80061f6:	4604      	mov	r4, r0
 80061f8:	460d      	mov	r5, r1
 80061fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa f944 	bl	800048c <__aeabi_i2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	ec43 2b10 	vmov	d0, r2, r3
 800620c:	f001 fa20 	bl	8007650 <exp>
 8006210:	ec53 2b10 	vmov	r2, r3, d0
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa f99e 	bl	8000558 <__aeabi_dmul>
 800621c:	4603      	mov	r3, r0
 800621e:	460c      	mov	r4, r1
 8006220:	4618      	mov	r0, r3
 8006222:	4621      	mov	r1, r4
 8006224:	f7fa fc32 	bl	8000a8c <__aeabi_d2iz>
 8006228:	4603      	mov	r3, r0
 800622a:	82fb      	strh	r3, [r7, #22]
        	htim2.Instance->CNT = 0;
 800622c:	4b23      	ldr	r3, [pc, #140]	; (80062bc <main+0x420>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	625a      	str	r2, [r3, #36]	; 0x24
        	L6470_Run(1,L6470_DIR_FWD_ID,encoder_count_x);
 8006234:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006238:	461a      	mov	r2, r3
 800623a:	2101      	movs	r1, #1
 800623c:	2001      	movs	r0, #1
 800623e:	f7fe fe99 	bl	8004f74 <L6470_Run>
 8006242:	e7ab      	b.n	800619c <main+0x300>
        	}
            else if(encoder_count_x <=0)
 8006244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006248:	2b00      	cmp	r3, #0
 800624a:	dca7      	bgt.n	800619c <main+0x300>
        	{
        	encoder_count_x *= -1;
 800624c:	8afb      	ldrh	r3, [r7, #22]
 800624e:	425b      	negs	r3, r3
 8006250:	b29b      	uxth	r3, r3
 8006252:	82fb      	strh	r3, [r7, #22]
        	encoder_count_x = encoder_count_x*exp(encoder_count_x);
 8006254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006258:	4618      	mov	r0, r3
 800625a:	f7fa f917 	bl	800048c <__aeabi_i2d>
 800625e:	4604      	mov	r4, r0
 8006260:	460d      	mov	r5, r1
 8006262:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006266:	4618      	mov	r0, r3
 8006268:	f7fa f910 	bl	800048c <__aeabi_i2d>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	ec43 2b10 	vmov	d0, r2, r3
 8006274:	f001 f9ec 	bl	8007650 <exp>
 8006278:	ec53 2b10 	vmov	r2, r3, d0
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa f96a 	bl	8000558 <__aeabi_dmul>
 8006284:	4603      	mov	r3, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4618      	mov	r0, r3
 800628a:	4621      	mov	r1, r4
 800628c:	f7fa fbfe 	bl	8000a8c <__aeabi_d2iz>
 8006290:	4603      	mov	r3, r0
 8006292:	82fb      	strh	r3, [r7, #22]
        	htim2.Instance->CNT = 0;
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <main+0x420>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2200      	movs	r2, #0
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
        	L6470_Run(1,L6470_DIR_REV_ID,encoder_count_x);
 800629c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80062a0:	461a      	mov	r2, r3
 80062a2:	2100      	movs	r1, #0
 80062a4:	2001      	movs	r0, #1
 80062a6:	f7fe fe65 	bl	8004f74 <L6470_Run>
	{
 80062aa:	e777      	b.n	800619c <main+0x300>
 80062ac:	20000c04 	.word	0x20000c04
 80062b0:	20000b18 	.word	0x20000b18
 80062b4:	20000018 	.word	0x20000018
 80062b8:	20000ac0 	.word	0x20000ac0
 80062bc:	20000dc0 	.word	0x20000dc0
 80062c0:	20000e5c 	.word	0x20000e5c
 80062c4:	20000958 	.word	0x20000958
 80062c8:	2000095c 	.word	0x2000095c

080062cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b094      	sub	sp, #80	; 0x50
 80062d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	4a35      	ldr	r2, [pc, #212]	; (80063ac <SystemClock_Config+0xe0>)
 80062d8:	4b34      	ldr	r3, [pc, #208]	; (80063ac <SystemClock_Config+0xe0>)
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e0:	6413      	str	r3, [r2, #64]	; 0x40
 80062e2:	4b32      	ldr	r3, [pc, #200]	; (80063ac <SystemClock_Config+0xe0>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	4a2f      	ldr	r2, [pc, #188]	; (80063b0 <SystemClock_Config+0xe4>)
 80062f4:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <SystemClock_Config+0xe4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <SystemClock_Config+0xe4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800630e:	2302      	movs	r3, #2
 8006310:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006312:	2301      	movs	r3, #1
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8006316:	2310      	movs	r3, #16
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800631a:	2302      	movs	r3, #2
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800631e:	2300      	movs	r3, #0
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006322:	2308      	movs	r3, #8
 8006324:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8006326:	2354      	movs	r3, #84	; 0x54
 8006328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800632a:	2302      	movs	r3, #2
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800632e:	2307      	movs	r3, #7
 8006330:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006332:	f107 0320 	add.w	r3, r7, #32
 8006336:	4618      	mov	r0, r3
 8006338:	f7fb fc66 	bl	8001c08 <HAL_RCC_OscConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006342:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006346:	481b      	ldr	r0, [pc, #108]	; (80063b4 <SystemClock_Config+0xe8>)
 8006348:	f000 f88f 	bl	800646a <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800634c:	230f      	movs	r3, #15
 800634e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006350:	2302      	movs	r3, #2
 8006352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800635c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006362:	f107 030c 	add.w	r3, r7, #12
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f7fb fe8f 	bl	800208c <HAL_RCC_ClockConfig>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <SystemClock_Config+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006374:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006378:	480e      	ldr	r0, [pc, #56]	; (80063b4 <SystemClock_Config+0xe8>)
 800637a:	f000 f876 	bl	800646a <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800637e:	f7fc f83f 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <SystemClock_Config+0xec>)
 8006386:	fba3 2302 	umull	r2, r3, r3, r2
 800638a:	099b      	lsrs	r3, r3, #6
 800638c:	4618      	mov	r0, r3
 800638e:	f7fa fec0 	bl	8001112 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006392:	2004      	movs	r0, #4
 8006394:	f7fa feca 	bl	800112c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006398:	2200      	movs	r2, #0
 800639a:	2100      	movs	r1, #0
 800639c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a0:	f7fa fe8d 	bl	80010be <HAL_NVIC_SetPriority>
}
 80063a4:	bf00      	nop
 80063a6:	3750      	adds	r7, #80	; 0x50
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40023800 	.word	0x40023800
 80063b0:	40007000 	.word	0x40007000
 80063b4:	08007c30 	.word	0x08007c30
 80063b8:	10624dd3 	.word	0x10624dd3

080063bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	80fb      	strh	r3, [r7, #6]
	    L6470_HardStop(3);
	    }

	}
*/
    if (GPIO_Pin == L6470_Flag_INT_Pin)
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d14a      	bne.n	8006462 <HAL_GPIO_EXTI_Callback+0xa6>
	{
	uint16_t status_register_0 = L6470_GetStatus(0);
 80063cc:	2000      	movs	r0, #0
 80063ce:	f7fe fff1 	bl	80053b4 <L6470_GetStatus>
 80063d2:	4603      	mov	r3, r0
 80063d4:	82bb      	strh	r3, [r7, #20]
	uint16_t status_register_1 = L6470_GetStatus(1);
 80063d6:	2001      	movs	r0, #1
 80063d8:	f7fe ffec 	bl	80053b4 <L6470_GetStatus>
 80063dc:	4603      	mov	r3, r0
 80063de:	827b      	strh	r3, [r7, #18]
	uint16_t status_register_2 = L6470_GetStatus(2);
 80063e0:	2002      	movs	r0, #2
 80063e2:	f7fe ffe7 	bl	80053b4 <L6470_GetStatus>
 80063e6:	4603      	mov	r3, r0
 80063e8:	823b      	strh	r3, [r7, #16]
	uint16_t status_register_3 = L6470_GetStatus(3);
 80063ea:	2003      	movs	r0, #3
 80063ec:	f7fe ffe2 	bl	80053b4 <L6470_GetStatus>
 80063f0:	4603      	mov	r3, r0
 80063f2:	81fb      	strh	r3, [r7, #14]

	uint8_t perform_action = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]

	if ((status_register_0 & STATUS_SW_EVN))
 80063f8:	8abb      	ldrh	r3, [r7, #20]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d006      	beq.n	8006410 <HAL_GPIO_EXTI_Callback+0x54>
	    {
	    perform_action = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(0, L6470_ACT_RST_ID, L6470_DIR_REV_ID);
 8006406:	2200      	movs	r2, #0
 8006408:	2100      	movs	r1, #0
 800640a:	2000      	movs	r0, #0
 800640c:	f7ff f8ca 	bl	80055a4 <L6470_PrepareReleaseSW>
	    }
	if ((status_register_1 & STATUS_SW_EVN))
 8006410:	8a7b      	ldrh	r3, [r7, #18]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <HAL_GPIO_EXTI_Callback+0x6c>
	    {
	    perform_action = 1;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(1, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 800641e:	2201      	movs	r2, #1
 8006420:	2100      	movs	r1, #0
 8006422:	2001      	movs	r0, #1
 8006424:	f7ff f8be 	bl	80055a4 <L6470_PrepareReleaseSW>
	    }
	if ((status_register_2 & STATUS_SW_EVN))
 8006428:	8a3b      	ldrh	r3, [r7, #16]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d006      	beq.n	8006440 <HAL_GPIO_EXTI_Callback+0x84>
	    {
	    perform_action = 1;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(2, L6470_ACT_RST_ID, L6470_DIR_REV_ID);
 8006436:	2200      	movs	r2, #0
 8006438:	2100      	movs	r1, #0
 800643a:	2002      	movs	r0, #2
 800643c:	f7ff f8b2 	bl	80055a4 <L6470_PrepareReleaseSW>
	    }
	if ((status_register_3 & STATUS_SW_EVN))
 8006440:	89fb      	ldrh	r3, [r7, #14]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d006      	beq.n	8006458 <HAL_GPIO_EXTI_Callback+0x9c>
	    {
	    perform_action = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
	    L6470_PrepareReleaseSW(3, L6470_ACT_RST_ID, L6470_DIR_REV_ID);
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	2003      	movs	r0, #3
 8006454:	f7ff f8a6 	bl	80055a4 <L6470_PrepareReleaseSW>
	    }

	if (perform_action)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_GPIO_EXTI_Callback+0xa6>
	    {
	    L6470_PerformPreparedApplicationCommand();
 800645e:	f7ff f981 	bl	8005764 <L6470_PerformPreparedApplicationCommand>
	    }

	}

    }
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006474:	e7fe      	b.n	8006474 <_Error_Handler+0xa>
	...

08006478 <Ring_Buffer_Init>:
static uint32_t Read_PTR;

#define WRITE_PTR (uint32_t)( BUFFER_SIZE - (huart->hdmarx->Instance->NDTR))

void Ring_Buffer_Init(UART_HandleTypeDef *_huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	huart = _huart;
 8006480:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <Ring_Buffer_Init+0x38>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6013      	str	r3, [r2, #0]
	huart->hdmarx->Instance->NDTR = BUFFER_SIZE;
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <Ring_Buffer_Init+0x38>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2240      	movs	r2, #64	; 0x40
 8006490:	605a      	str	r2, [r3, #4]
	Read_PTR = 0;
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <Ring_Buffer_Init+0x3c>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, RX_DMA_Buffer, BUFFER_SIZE);
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <Ring_Buffer_Init+0x38>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2240      	movs	r2, #64	; 0x40
 800649e:	4906      	ldr	r1, [pc, #24]	; (80064b8 <Ring_Buffer_Init+0x40>)
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fc fc71 	bl	8002d88 <HAL_UART_Receive_DMA>

}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200009a0 	.word	0x200009a0
 80064b4:	200009a4 	.word	0x200009a4
 80064b8:	20000960 	.word	0x20000960

080064bc <Ring_Buffer_Get_Char>:

	return (Read_PTR == WRITE_PTR)?1:0;
}

uint8_t Ring_Buffer_Get_Char(uint8_t* data)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Read_PTR)
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <Ring_Buffer_Get_Char+0x54>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <Ring_Buffer_Get_Char+0x58>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d101      	bne.n	80064de <Ring_Buffer_Get_Char+0x22>
	{
		return 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	e012      	b.n	8006504 <Ring_Buffer_Get_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Read_PTR];
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <Ring_Buffer_Get_Char+0x58>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a0d      	ldr	r2, [pc, #52]	; (8006518 <Ring_Buffer_Get_Char+0x5c>)
 80064e4:	5cd2      	ldrb	r2, [r2, r3]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	701a      	strb	r2, [r3, #0]

		Read_PTR++;
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <Ring_Buffer_Get_Char+0x58>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3301      	adds	r3, #1
 80064f0:	4a08      	ldr	r2, [pc, #32]	; (8006514 <Ring_Buffer_Get_Char+0x58>)
 80064f2:	6013      	str	r3, [r2, #0]

		if (Read_PTR == BUFFER_SIZE)
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <Ring_Buffer_Get_Char+0x58>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d102      	bne.n	8006502 <Ring_Buffer_Get_Char+0x46>
		{
			Read_PTR = 0;
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <Ring_Buffer_Get_Char+0x58>)
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
		}

		return 1;
 8006502:	2301      	movs	r3, #1
	}
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	200009a0 	.word	0x200009a0
 8006514:	200009a4 	.word	0x200009a4
 8006518:	20000960 	.word	0x20000960

0800651c <Ring_Buffer_Get_Count>:

uint8_t Ring_Buffer_Get_Count(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
	if (WRITE_PTR >= Read_PTR)
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <Ring_Buffer_Get_Count+0x64>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <Ring_Buffer_Get_Count+0x68>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d30f      	bcc.n	8006556 <Ring_Buffer_Get_Count+0x3a>
	{
		return (WRITE_PTR - Read_PTR);
 8006536:	4b12      	ldr	r3, [pc, #72]	; (8006580 <Ring_Buffer_Get_Count+0x64>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	425b      	negs	r3, r3
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <Ring_Buffer_Get_Count+0x68>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	3340      	adds	r3, #64	; 0x40
 8006552:	b2db      	uxtb	r3, r3
 8006554:	e00e      	b.n	8006574 <Ring_Buffer_Get_Count+0x58>
	}
	return (BUFFER_SIZE - (Read_PTR - WRITE_PTR));
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <Ring_Buffer_Get_Count+0x64>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <Ring_Buffer_Get_Count+0x68>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	4413      	add	r3, r2
 800656a:	b2da      	uxtb	r2, r3
 800656c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	b2db      	uxtb	r3, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	200009a0 	.word	0x200009a0
 8006584:	200009a4 	.word	0x200009a4

08006588 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800658c:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <MX_SPI1_Init+0x68>)
 800658e:	4a19      	ldr	r2, [pc, #100]	; (80065f4 <MX_SPI1_Init+0x6c>)
 8006590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <MX_SPI1_Init+0x68>)
 8006594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <MX_SPI1_Init+0x68>)
 800659c:	2200      	movs	r2, #0
 800659e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80065a0:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065a8:	2202      	movs	r2, #2
 80065aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80065b2:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80065ba:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065bc:	2210      	movs	r2, #16
 80065be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065cc:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065d4:	220a      	movs	r2, #10
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80065d8:	4805      	ldr	r0, [pc, #20]	; (80065f0 <MX_SPI1_Init+0x68>)
 80065da:	f7fb ff45 	bl	8002468 <HAL_SPI_Init>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80065e4:	2145      	movs	r1, #69	; 0x45
 80065e6:	4804      	ldr	r0, [pc, #16]	; (80065f8 <MX_SPI1_Init+0x70>)
 80065e8:	f7ff ff3f 	bl	800646a <_Error_Handler>
  }

}
 80065ec:	bf00      	nop
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000d68 	.word	0x20000d68
 80065f4:	40013000 	.word	0x40013000
 80065f8:	08007c40 	.word	0x08007c40

080065fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <HAL_SPI_MspInit+0x78>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d12d      	bne.n	800666a <HAL_SPI_MspInit+0x6e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]
 8006612:	4a19      	ldr	r2, [pc, #100]	; (8006678 <HAL_SPI_MspInit+0x7c>)
 8006614:	4b18      	ldr	r3, [pc, #96]	; (8006678 <HAL_SPI_MspInit+0x7c>)
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800661c:	6453      	str	r3, [r2, #68]	; 0x44
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <HAL_SPI_MspInit+0x7c>)
 8006620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800662a:	23c0      	movs	r3, #192	; 0xc0
 800662c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662e:	2302      	movs	r3, #2
 8006630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006636:	2303      	movs	r3, #3
 8006638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800663a:	2305      	movs	r3, #5
 800663c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800663e:	f107 030c 	add.w	r3, r7, #12
 8006642:	4619      	mov	r1, r3
 8006644:	480d      	ldr	r0, [pc, #52]	; (800667c <HAL_SPI_MspInit+0x80>)
 8006646:	f7fb f92b 	bl	80018a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800664a:	2308      	movs	r3, #8
 800664c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664e:	2302      	movs	r3, #2
 8006650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006656:	2303      	movs	r3, #3
 8006658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800665a:	2305      	movs	r3, #5
 800665c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800665e:	f107 030c 	add.w	r3, r7, #12
 8006662:	4619      	mov	r1, r3
 8006664:	4806      	ldr	r0, [pc, #24]	; (8006680 <HAL_SPI_MspInit+0x84>)
 8006666:	f7fb f91b 	bl	80018a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800666a:	bf00      	nop
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40013000 	.word	0x40013000
 8006678:	40023800 	.word	0x40023800
 800667c:	40020000 	.word	0x40020000
 8006680:	40020400 	.word	0x40020400

08006684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800668a:	2300      	movs	r3, #0
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	4a25      	ldr	r2, [pc, #148]	; (8006724 <HAL_MspInit+0xa0>)
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <HAL_MspInit+0xa0>)
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006698:	6453      	str	r3, [r2, #68]	; 0x44
 800669a:	4b22      	ldr	r3, [pc, #136]	; (8006724 <HAL_MspInit+0xa0>)
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4a1e      	ldr	r2, [pc, #120]	; (8006724 <HAL_MspInit+0xa0>)
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_MspInit+0xa0>)
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
 80066b6:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_MspInit+0xa0>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80066c2:	2007      	movs	r0, #7
 80066c4:	f7fa fcf0 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80066c8:	2200      	movs	r2, #0
 80066ca:	2100      	movs	r1, #0
 80066cc:	f06f 000b 	mvn.w	r0, #11
 80066d0:	f7fa fcf5 	bl	80010be <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80066d4:	2200      	movs	r2, #0
 80066d6:	2100      	movs	r1, #0
 80066d8:	f06f 000a 	mvn.w	r0, #10
 80066dc:	f7fa fcef 	bl	80010be <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80066e0:	2200      	movs	r2, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	f06f 0009 	mvn.w	r0, #9
 80066e8:	f7fa fce9 	bl	80010be <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80066ec:	2200      	movs	r2, #0
 80066ee:	2100      	movs	r1, #0
 80066f0:	f06f 0004 	mvn.w	r0, #4
 80066f4:	f7fa fce3 	bl	80010be <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80066f8:	2200      	movs	r2, #0
 80066fa:	2100      	movs	r1, #0
 80066fc:	f06f 0003 	mvn.w	r0, #3
 8006700:	f7fa fcdd 	bl	80010be <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006704:	2200      	movs	r2, #0
 8006706:	2100      	movs	r1, #0
 8006708:	f06f 0001 	mvn.w	r0, #1
 800670c:	f7fa fcd7 	bl	80010be <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006710:	2200      	movs	r2, #0
 8006712:	2100      	movs	r1, #0
 8006714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006718:	f7fa fcd1 	bl	80010be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40023800 	.word	0x40023800

08006728 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006736:	b480      	push	{r7}
 8006738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800673a:	e7fe      	b.n	800673a <HardFault_Handler+0x4>

0800673c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006740:	e7fe      	b.n	8006740 <MemManage_Handler+0x4>

08006742 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006746:	e7fe      	b.n	8006746 <BusFault_Handler+0x4>

08006748 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800674c:	e7fe      	b.n	800674c <UsageFault_Handler+0x4>

0800674e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800674e:	b480      	push	{r7}
 8006750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006752:	bf00      	nop
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006760:	bf00      	nop
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800676a:	b480      	push	{r7}
 800676c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800677c:	f7fa fb88 	bl	8000e90 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006780:	f7fa fcf0 	bl	8001164 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006784:	bf00      	nop
 8006786:	bd80      	pop	{r7, pc}

08006788 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800678c:	2001      	movs	r0, #1
 800678e:	f7fb fa23 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}

08006796 <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800679a:	2002      	movs	r0, #2
 800679c:	f7fb fa1c 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80067a0:	bf00      	nop
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80067a8:	4802      	ldr	r0, [pc, #8]	; (80067b4 <DMA1_Stream5_IRQHandler+0x10>)
 80067aa:	f7fa fe11 	bl	80013d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80067ae:	bf00      	nop
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000dfc 	.word	0x20000dfc

080067b8 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80067bc:	4802      	ldr	r0, [pc, #8]	; (80067c8 <USART2_IRQHandler+0x10>)
 80067be:	f7fc fb63 	bl	8002e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000e5c 	.word	0x20000e5c

080067cc <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80067d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80067d4:	f7fb fa00 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80067d8:	bf00      	nop
 80067da:	bd80      	pop	{r7, pc}

080067dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067e0:	4a16      	ldr	r2, [pc, #88]	; (800683c <SystemInit+0x60>)
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <SystemInit+0x60>)
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <SystemInit+0x64>)
 80067f2:	4b13      	ldr	r3, [pc, #76]	; (8006840 <SystemInit+0x64>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <SystemInit+0x64>)
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006802:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <SystemInit+0x64>)
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <SystemInit+0x64>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800680c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006810:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <SystemInit+0x64>)
 8006814:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <SystemInit+0x68>)
 8006816:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006818:	4a09      	ldr	r2, [pc, #36]	; (8006840 <SystemInit+0x64>)
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <SystemInit+0x64>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <SystemInit+0x64>)
 8006826:	2200      	movs	r2, #0
 8006828:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800682a:	4b04      	ldr	r3, [pc, #16]	; (800683c <SystemInit+0x60>)
 800682c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006830:	609a      	str	r2, [r3, #8]
#endif
}
 8006832:	bf00      	nop
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed00 	.word	0xe000ed00
 8006840:	40023800 	.word	0x40023800
 8006844:	24003010 	.word	0x24003010

08006848 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	; 0x30
 800684c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800684e:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <MX_TIM2_Init+0x90>)
 8006850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8006856:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <MX_TIM2_Init+0x90>)
 8006858:	2201      	movs	r2, #1
 800685a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800685c:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <MX_TIM2_Init+0x90>)
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8006862:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <MX_TIM2_Init+0x90>)
 8006864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800686a:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <MX_TIM2_Init+0x90>)
 800686c:	2200      	movs	r2, #0
 800686e:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006870:	2303      	movs	r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8006874:	2302      	movs	r3, #2
 8006876:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006878:	2301      	movs	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006884:	2302      	movs	r3, #2
 8006886:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006888:	2301      	movs	r3, #1
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800688c:	2300      	movs	r3, #0
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	4619      	mov	r1, r3
 800689a:	480f      	ldr	r0, [pc, #60]	; (80068d8 <MX_TIM2_Init+0x90>)
 800689c:	f7fc f86d 	bl	800297a <HAL_TIM_Encoder_Init>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80068a6:	2149      	movs	r1, #73	; 0x49
 80068a8:	480c      	ldr	r0, [pc, #48]	; (80068dc <MX_TIM2_Init+0x94>)
 80068aa:	f7ff fdde 	bl	800646a <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068b6:	1d3b      	adds	r3, r7, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4807      	ldr	r0, [pc, #28]	; (80068d8 <MX_TIM2_Init+0x90>)
 80068bc:	f7fc f9d1 	bl	8002c62 <HAL_TIMEx_MasterConfigSynchronization>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <MX_TIM2_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80068c6:	2150      	movs	r1, #80	; 0x50
 80068c8:	4804      	ldr	r0, [pc, #16]	; (80068dc <MX_TIM2_Init+0x94>)
 80068ca:	f7ff fdce 	bl	800646a <_Error_Handler>
  }

}
 80068ce:	bf00      	nop
 80068d0:	3730      	adds	r7, #48	; 0x30
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000dc0 	.word	0x20000dc0
 80068dc:	08007c50 	.word	0x08007c50

080068e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f0:	d11d      	bne.n	800692e <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068f2:	2300      	movs	r3, #0
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	4a10      	ldr	r2, [pc, #64]	; (8006938 <HAL_TIM_Encoder_MspInit+0x58>)
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <HAL_TIM_Encoder_MspInit+0x58>)
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	6413      	str	r3, [r2, #64]	; 0x40
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <HAL_TIM_Encoder_MspInit+0x58>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	60bb      	str	r3, [r7, #8]
 800690c:	68bb      	ldr	r3, [r7, #8]
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800690e:	2303      	movs	r3, #3
 8006910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006912:	2312      	movs	r3, #18
 8006914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006916:	2301      	movs	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691a:	2300      	movs	r3, #0
 800691c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800691e:	2301      	movs	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4619      	mov	r1, r3
 8006928:	4804      	ldr	r0, [pc, #16]	; (800693c <HAL_TIM_Encoder_MspInit+0x5c>)
 800692a:	f7fa ffb9 	bl	80018a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800692e:	bf00      	nop
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40023800 	.word	0x40023800
 800693c:	40020000 	.word	0x40020000

08006940 <xSerialPutChar>:
/* DEL acts as a backspace. */
#define cmdASCII_DEL		( 0x7F )


void xSerialPutChar(UART_HandleTypeDef *huart, uint8_t pData)
    {
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
    huart->Instance->DR = (pData);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(huart,UART_FLAG_TC) == 0);
 8006954:	bf00      	nop
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d1f8      	bne.n	8006956 <xSerialPutChar+0x16>
    }
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <vSerialPutString>:

void vSerialPutString(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
    {
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
    while (Size--)
 800697e:	e007      	b.n	8006990 <vSerialPutString+0x20>
	{
	xSerialPutChar(huart, *pData++);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	60ba      	str	r2, [r7, #8]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	4619      	mov	r1, r3
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff ffd8 	bl	8006940 <xSerialPutChar>
    while (Size--)
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	1e5a      	subs	r2, r3, #1
 8006994:	80fa      	strh	r2, [r7, #6]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f2      	bne.n	8006980 <vSerialPutString+0x10>
	}
    }
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UARTCommandConsoleLoop>:

void UARTCommandConsoleLoop()
    {
 80069a4:	b598      	push	{r3, r4, r7, lr}
 80069a6:	af00      	add	r7, sp, #0
     exclusion on this buffer as it is assumed only one command console interface
     will be used at any one time. */

    /* Send the welcome message. */
    static uint8_t first_flag = 0;
    if (first_flag == 0)
 80069a8:	4b52      	ldr	r3, [pc, #328]	; (8006af4 <UARTCommandConsoleLoop+0x150>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d115      	bne.n	80069dc <UARTCommandConsoleLoop+0x38>
	{
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80069b0:	f7fd fd1e 	bl	80043f0 <FreeRTOS_CLIGetOutputBuffer>
 80069b4:	4602      	mov	r2, r0
 80069b6:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <UARTCommandConsoleLoop+0x154>)
 80069b8:	601a      	str	r2, [r3, #0]
	first_flag = 1;
 80069ba:	4b4e      	ldr	r3, [pc, #312]	; (8006af4 <UARTCommandConsoleLoop+0x150>)
 80069bc:	2201      	movs	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
	vSerialPutString(&huart2, (uint8_t* ) pcWelcomeMessage, (unsigned short ) strlen(pcWelcomeMessage));
 80069c0:	4b4e      	ldr	r3, [pc, #312]	; (8006afc <UARTCommandConsoleLoop+0x158>)
 80069c2:	681c      	ldr	r4, [r3, #0]
 80069c4:	4b4d      	ldr	r3, [pc, #308]	; (8006afc <UARTCommandConsoleLoop+0x158>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7f9 fc05 	bl	80001d8 <strlen>
 80069ce:	4603      	mov	r3, r0
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	4621      	mov	r1, r4
 80069d6:	484a      	ldr	r0, [pc, #296]	; (8006b00 <UARTCommandConsoleLoop+0x15c>)
 80069d8:	f7ff ffca 	bl	8006970 <vSerialPutString>
	}

    if (Ring_Buffer_Get_Count() > 0)
 80069dc:	f7ff fd9e 	bl	800651c <Ring_Buffer_Get_Count>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8084 	beq.w	8006af0 <UARTCommandConsoleLoop+0x14c>
	{
	Ring_Buffer_Get_Char(&cRxedChar);
 80069e8:	4846      	ldr	r0, [pc, #280]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 80069ea:	f7ff fd67 	bl	80064bc <Ring_Buffer_Get_Char>
	/* Echo the character back. */
	   //xSerialPutChar(&huart2, cRxedChar);
	/* Was it the end of the line? */
	if (cRxedChar == '\n')
 80069ee:	4b45      	ldr	r3, [pc, #276]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b0a      	cmp	r3, #10
 80069f4:	d145      	bne.n	8006a82 <UARTCommandConsoleLoop+0xde>
	    {

	    millis1 = HAL_GetTick(); //time stamp
 80069f6:	f7fa fa5f 	bl	8000eb8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <UARTCommandConsoleLoop+0x164>)
 80069fe:	601a      	str	r2, [r3, #0]
	    /* Just to space the output from the input. */
	    //vSerialPutString(&huart2, (uint8_t * ) pcNewLine, (unsigned short ) strlen(pcNewLine));
	    /* See if the command is empty, indicating that the last command
	     is to be executed again. */
	    if (ucInputIndex == 0)
 8006a00:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <UARTCommandConsoleLoop+0x6c>
		{
		/* Copy the last command back into the input string. */
		strcpy(cInputString, cLastInputString);
 8006a08:	4941      	ldr	r1, [pc, #260]	; (8006b10 <UARTCommandConsoleLoop+0x16c>)
 8006a0a:	4842      	ldr	r0, [pc, #264]	; (8006b14 <UARTCommandConsoleLoop+0x170>)
 8006a0c:	f000 fbce 	bl	80071ac <strcpy>
	     pdFALSE	(indicating there is no more output) as it might
	     generate more than one string. */
	    do
		{
		/* Get the next output string from the command interpreter. */
		xReturned = FreeRTOS_CLIProcessCommand(cInputString,
 8006a10:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <UARTCommandConsoleLoop+0x154>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a18:	4619      	mov	r1, r3
 8006a1a:	483e      	ldr	r0, [pc, #248]	; (8006b14 <UARTCommandConsoleLoop+0x170>)
 8006a1c:	f7fd fc60 	bl	80042e0 <FreeRTOS_CLIProcessCommand>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	4b3c      	ldr	r3, [pc, #240]	; (8006b18 <UARTCommandConsoleLoop+0x174>)
 8006a26:	801a      	strh	r2, [r3, #0]
			pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE);

		/* Write the generated string to the UART. */
		   vSerialPutString(&huart2, (uint8_t *) pcOutputString,(unsigned short) strlen(pcOutputString));
 8006a28:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <UARTCommandConsoleLoop+0x154>)
 8006a2a:	681c      	ldr	r4, [r3, #0]
 8006a2c:	4b32      	ldr	r3, [pc, #200]	; (8006af8 <UARTCommandConsoleLoop+0x154>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7f9 fbd1 	bl	80001d8 <strlen>
 8006a36:	4603      	mov	r3, r0
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4830      	ldr	r0, [pc, #192]	; (8006b00 <UARTCommandConsoleLoop+0x15c>)
 8006a40:	f7ff ff96 	bl	8006970 <vSerialPutString>

		}
	    while (xReturned != pdFALSE);
 8006a44:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <UARTCommandConsoleLoop+0x174>)
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e1      	bne.n	8006a10 <UARTCommandConsoleLoop+0x6c>

	    /* All the strings generated by the input command have been
	     sent.  Clear the input string ready to receive the next command.
	     Remember the command that was just processed first in case it is
	     to be processed again. */
	    strcpy(cLastInputString, cInputString);
 8006a4c:	4931      	ldr	r1, [pc, #196]	; (8006b14 <UARTCommandConsoleLoop+0x170>)
 8006a4e:	4830      	ldr	r0, [pc, #192]	; (8006b10 <UARTCommandConsoleLoop+0x16c>)
 8006a50:	f000 fbac 	bl	80071ac <strcpy>
	    ucInputIndex = 0;
 8006a54:	4b2d      	ldr	r3, [pc, #180]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
	    memset(cInputString, 0x00, cmdMAX_INPUT_SIZE);
 8006a5a:	2232      	movs	r2, #50	; 0x32
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	482d      	ldr	r0, [pc, #180]	; (8006b14 <UARTCommandConsoleLoop+0x170>)
 8006a60:	f000 fb80 	bl	8007164 <memset>
	    vSerialPutString(&huart2, (uint8_t *) pcEndOfOutputMessage, (unsigned short) strlen(pcEndOfOutputMessage));
 8006a64:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <UARTCommandConsoleLoop+0x178>)
 8006a66:	681c      	ldr	r4, [r3, #0]
 8006a68:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <UARTCommandConsoleLoop+0x178>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7f9 fbb3 	bl	80001d8 <strlen>
 8006a72:	4603      	mov	r3, r0
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4821      	ldr	r0, [pc, #132]	; (8006b00 <UARTCommandConsoleLoop+0x15c>)
 8006a7c:	f7ff ff78 	bl	8006970 <vSerialPutString>
		    }
		}
	    }

	}
    }
 8006a80:	e036      	b.n	8006af0 <UARTCommandConsoleLoop+0x14c>
	    if (cRxedChar == '\r')
 8006a82:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b0d      	cmp	r3, #13
 8006a88:	d032      	beq.n	8006af0 <UARTCommandConsoleLoop+0x14c>
	    else if ((cRxedChar == '\b') || (cRxedChar == cmdASCII_DEL))
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d003      	beq.n	8006a9a <UARTCommandConsoleLoop+0xf6>
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b7f      	cmp	r3, #127	; 0x7f
 8006a98:	d110      	bne.n	8006abc <UARTCommandConsoleLoop+0x118>
		if (ucInputIndex > 0)
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d026      	beq.n	8006af0 <UARTCommandConsoleLoop+0x14c>
		    ucInputIndex--;
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006aac:	701a      	strb	r2, [r3, #0]
		    cInputString[ucInputIndex] = '\0';
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b17      	ldr	r3, [pc, #92]	; (8006b14 <UARTCommandConsoleLoop+0x170>)
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5499      	strb	r1, [r3, r2]
		if (ucInputIndex > 0)
 8006aba:	e019      	b.n	8006af0 <UARTCommandConsoleLoop+0x14c>
		if ((cRxedChar >= ' ') && (cRxedChar <= '~'))
 8006abc:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b1f      	cmp	r3, #31
 8006ac2:	d915      	bls.n	8006af0 <UARTCommandConsoleLoop+0x14c>
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b7e      	cmp	r3, #126	; 0x7e
 8006aca:	d811      	bhi.n	8006af0 <UARTCommandConsoleLoop+0x14c>
		    if (ucInputIndex < cmdMAX_INPUT_SIZE)
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b31      	cmp	r3, #49	; 0x31
 8006ad2:	d80d      	bhi.n	8006af0 <UARTCommandConsoleLoop+0x14c>
			cInputString[ucInputIndex] = cRxedChar;
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <UARTCommandConsoleLoop+0x160>)
 8006adc:	7819      	ldrb	r1, [r3, #0]
 8006ade:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <UARTCommandConsoleLoop+0x170>)
 8006ae0:	5499      	strb	r1, [r3, r2]
			ucInputIndex++;
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <UARTCommandConsoleLoop+0x168>)
 8006aec:	701a      	strb	r2, [r3, #0]
    }
 8006aee:	e7ff      	b.n	8006af0 <UARTCommandConsoleLoop+0x14c>
 8006af0:	bf00      	nop
 8006af2:	bd98      	pop	{r3, r4, r7, pc}
 8006af4:	200009ac 	.word	0x200009ac
 8006af8:	200009b0 	.word	0x200009b0
 8006afc:	200000b4 	.word	0x200000b4
 8006b00:	20000e5c 	.word	0x20000e5c
 8006b04:	200009b4 	.word	0x200009b4
 8006b08:	200009a8 	.word	0x200009a8
 8006b0c:	200009b5 	.word	0x200009b5
 8006b10:	200009ec 	.word	0x200009ec
 8006b14:	200009b8 	.word	0x200009b8
 8006b18:	20000a1e 	.word	0x20000a1e
 8006b1c:	200000b8 	.word	0x200000b8

08006b20 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006b24:	4b12      	ldr	r3, [pc, #72]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b26:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <MX_USART2_UART_Init+0x54>)
 8006b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b32:	4b0f      	ldr	r3, [pc, #60]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b46:	220c      	movs	r2, #12
 8006b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b4a:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b56:	4806      	ldr	r0, [pc, #24]	; (8006b70 <MX_USART2_UART_Init+0x50>)
 8006b58:	f7fc f8c8 	bl	8002cec <HAL_UART_Init>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006b62:	2144      	movs	r1, #68	; 0x44
 8006b64:	4804      	ldr	r0, [pc, #16]	; (8006b78 <MX_USART2_UART_Init+0x58>)
 8006b66:	f7ff fc80 	bl	800646a <_Error_Handler>
  }

}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000e5c 	.word	0x20000e5c
 8006b74:	40004400 	.word	0x40004400
 8006b78:	08007cd8 	.word	0x08007cd8

08006b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2f      	ldr	r2, [pc, #188]	; (8006c48 <HAL_UART_MspInit+0xcc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d157      	bne.n	8006c3e <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	4a2e      	ldr	r2, [pc, #184]	; (8006c4c <HAL_UART_MspInit+0xd0>)
 8006b94:	4b2d      	ldr	r3, [pc, #180]	; (8006c4c <HAL_UART_MspInit+0xd0>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b9e:	4b2b      	ldr	r3, [pc, #172]	; (8006c4c <HAL_UART_MspInit+0xd0>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006baa:	230c      	movs	r3, #12
 8006bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006bba:	2307      	movs	r3, #7
 8006bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4822      	ldr	r0, [pc, #136]	; (8006c50 <HAL_UART_MspInit+0xd4>)
 8006bc6:	f7fa fe6b 	bl	80018a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006bca:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006bcc:	4a22      	ldr	r2, [pc, #136]	; (8006c58 <HAL_UART_MspInit+0xdc>)
 8006bce:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006bd0:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bd6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd8:	4b1e      	ldr	r3, [pc, #120]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bde:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bec:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bf2:	4b18      	ldr	r3, [pc, #96]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8006bf8:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006c00:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c06:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c08:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006c0e:	4811      	ldr	r0, [pc, #68]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006c10:	f7fa faae 	bl	8001170 <HAL_DMA_Init>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_UART_MspInit+0xa6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8006c1a:	216e      	movs	r1, #110	; 0x6e
 8006c1c:	480f      	ldr	r0, [pc, #60]	; (8006c5c <HAL_UART_MspInit+0xe0>)
 8006c1e:	f7ff fc24 	bl	800646a <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a0b      	ldr	r2, [pc, #44]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006c26:	635a      	str	r2, [r3, #52]	; 0x34
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <HAL_UART_MspInit+0xd8>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	2026      	movs	r0, #38	; 0x26
 8006c34:	f7fa fa43 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006c38:	2026      	movs	r0, #38	; 0x26
 8006c3a:	f7fa fa5c 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	40004400 	.word	0x40004400
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40020000 	.word	0x40020000
 8006c54:	20000dfc 	.word	0x20000dfc
 8006c58:	40026088 	.word	0x40026088
 8006c5c:	08007cd8 	.word	0x08007cd8

08006c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006c66:	e003      	b.n	8006c70 <LoopCopyDataInit>

08006c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006c6e:	3104      	adds	r1, #4

08006c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006c70:	480b      	ldr	r0, [pc, #44]	; (8006ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006c78:	d3f6      	bcc.n	8006c68 <CopyDataInit>
  ldr  r2, =_sbss
 8006c7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006c7c:	e002      	b.n	8006c84 <LoopFillZerobss>

08006c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006c80:	f842 3b04 	str.w	r3, [r2], #4

08006c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006c84:	4b09      	ldr	r3, [pc, #36]	; (8006cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006c88:	d3f9      	bcc.n	8006c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c8a:	f7ff fda7 	bl	80067dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c8e:	f000 f815 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c92:	f7ff f903 	bl	8005e9c <main>
  bx  lr    
 8006c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006c98:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8006c9c:	08008210 	.word	0x08008210
  ldr  r0, =_sdata
 8006ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006ca4:	20000730 	.word	0x20000730
  ldr  r2, =_sbss
 8006ca8:	20000730 	.word	0x20000730
  ldr  r3, = _ebss
 8006cac:	20000eac 	.word	0x20000eac

08006cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cb0:	e7fe      	b.n	8006cb0 <ADC_IRQHandler>

08006cb2 <atoi>:
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f000 bb3d 	b.w	8007334 <strtol>
	...

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4e0d      	ldr	r6, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1ba4      	subs	r4, r4, r6
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	42a5      	cmp	r5, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4e0b      	ldr	r6, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 feca 	bl	8007a68 <_init>
 8006cd4:	1ba4      	subs	r4, r4, r6
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2500      	movs	r5, #0
 8006cda:	42a5      	cmp	r5, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce4:	4798      	blx	r3
 8006ce6:	3501      	adds	r5, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cee:	4798      	blx	r3
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08008208 	.word	0x08008208
 8006cf8:	08008208 	.word	0x08008208
 8006cfc:	08008208 	.word	0x08008208
 8006d00:	0800820c 	.word	0x0800820c

08006d04 <__itoa>:
 8006d04:	1e93      	subs	r3, r2, #2
 8006d06:	2b22      	cmp	r3, #34	; 0x22
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	d904      	bls.n	8006d18 <__itoa+0x14>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	700b      	strb	r3, [r1, #0]
 8006d12:	461c      	mov	r4, r3
 8006d14:	4620      	mov	r0, r4
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	2a0a      	cmp	r2, #10
 8006d1a:	d109      	bne.n	8006d30 <__itoa+0x2c>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	da07      	bge.n	8006d30 <__itoa+0x2c>
 8006d20:	232d      	movs	r3, #45	; 0x2d
 8006d22:	700b      	strb	r3, [r1, #0]
 8006d24:	4240      	negs	r0, r0
 8006d26:	2101      	movs	r1, #1
 8006d28:	4421      	add	r1, r4
 8006d2a:	f000 fb19 	bl	8007360 <__utoa>
 8006d2e:	e7f1      	b.n	8006d14 <__itoa+0x10>
 8006d30:	2100      	movs	r1, #0
 8006d32:	e7f9      	b.n	8006d28 <__itoa+0x24>

08006d34 <itoa>:
 8006d34:	f7ff bfe6 	b.w	8006d04 <__itoa>

08006d38 <malloc>:
 8006d38:	4b02      	ldr	r3, [pc, #8]	; (8006d44 <malloc+0xc>)
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	f000 b803 	b.w	8006d48 <_malloc_r>
 8006d42:	bf00      	nop
 8006d44:	200004cc 	.word	0x200004cc

08006d48 <_malloc_r>:
 8006d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	f101 040b 	add.w	r4, r1, #11
 8006d50:	2c16      	cmp	r4, #22
 8006d52:	4681      	mov	r9, r0
 8006d54:	d907      	bls.n	8006d66 <_malloc_r+0x1e>
 8006d56:	f034 0407 	bics.w	r4, r4, #7
 8006d5a:	d505      	bpl.n	8006d68 <_malloc_r+0x20>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	f8c9 3000 	str.w	r3, [r9]
 8006d62:	2600      	movs	r6, #0
 8006d64:	e131      	b.n	8006fca <_malloc_r+0x282>
 8006d66:	2410      	movs	r4, #16
 8006d68:	428c      	cmp	r4, r1
 8006d6a:	d3f7      	bcc.n	8006d5c <_malloc_r+0x14>
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fa01 	bl	8007174 <__malloc_lock>
 8006d72:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006d76:	4d9c      	ldr	r5, [pc, #624]	; (8006fe8 <_malloc_r+0x2a0>)
 8006d78:	d236      	bcs.n	8006de8 <_malloc_r+0xa0>
 8006d7a:	f104 0208 	add.w	r2, r4, #8
 8006d7e:	442a      	add	r2, r5
 8006d80:	f1a2 0108 	sub.w	r1, r2, #8
 8006d84:	6856      	ldr	r6, [r2, #4]
 8006d86:	428e      	cmp	r6, r1
 8006d88:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006d8c:	d102      	bne.n	8006d94 <_malloc_r+0x4c>
 8006d8e:	68d6      	ldr	r6, [r2, #12]
 8006d90:	42b2      	cmp	r2, r6
 8006d92:	d010      	beq.n	8006db6 <_malloc_r+0x6e>
 8006d94:	6873      	ldr	r3, [r6, #4]
 8006d96:	68f2      	ldr	r2, [r6, #12]
 8006d98:	68b1      	ldr	r1, [r6, #8]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	60ca      	str	r2, [r1, #12]
 8006da0:	4433      	add	r3, r6
 8006da2:	6091      	str	r1, [r2, #8]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	605a      	str	r2, [r3, #4]
 8006dac:	4648      	mov	r0, r9
 8006dae:	f000 f9e7 	bl	8007180 <__malloc_unlock>
 8006db2:	3608      	adds	r6, #8
 8006db4:	e109      	b.n	8006fca <_malloc_r+0x282>
 8006db6:	3302      	adds	r3, #2
 8006db8:	4a8c      	ldr	r2, [pc, #560]	; (8006fec <_malloc_r+0x2a4>)
 8006dba:	692e      	ldr	r6, [r5, #16]
 8006dbc:	4296      	cmp	r6, r2
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	d06d      	beq.n	8006e9e <_malloc_r+0x156>
 8006dc2:	6870      	ldr	r0, [r6, #4]
 8006dc4:	f020 0003 	bic.w	r0, r0, #3
 8006dc8:	1b07      	subs	r7, r0, r4
 8006dca:	2f0f      	cmp	r7, #15
 8006dcc:	dd47      	ble.n	8006e5e <_malloc_r+0x116>
 8006dce:	1933      	adds	r3, r6, r4
 8006dd0:	f044 0401 	orr.w	r4, r4, #1
 8006dd4:	6074      	str	r4, [r6, #4]
 8006dd6:	616b      	str	r3, [r5, #20]
 8006dd8:	612b      	str	r3, [r5, #16]
 8006dda:	60da      	str	r2, [r3, #12]
 8006ddc:	609a      	str	r2, [r3, #8]
 8006dde:	f047 0201 	orr.w	r2, r7, #1
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	5037      	str	r7, [r6, r0]
 8006de6:	e7e1      	b.n	8006dac <_malloc_r+0x64>
 8006de8:	0a63      	lsrs	r3, r4, #9
 8006dea:	d02a      	beq.n	8006e42 <_malloc_r+0xfa>
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d812      	bhi.n	8006e16 <_malloc_r+0xce>
 8006df0:	09a3      	lsrs	r3, r4, #6
 8006df2:	3338      	adds	r3, #56	; 0x38
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006dfa:	f1a2 0008 	sub.w	r0, r2, #8
 8006dfe:	6856      	ldr	r6, [r2, #4]
 8006e00:	4286      	cmp	r6, r0
 8006e02:	d006      	beq.n	8006e12 <_malloc_r+0xca>
 8006e04:	6872      	ldr	r2, [r6, #4]
 8006e06:	f022 0203 	bic.w	r2, r2, #3
 8006e0a:	1b11      	subs	r1, r2, r4
 8006e0c:	290f      	cmp	r1, #15
 8006e0e:	dd1c      	ble.n	8006e4a <_malloc_r+0x102>
 8006e10:	3b01      	subs	r3, #1
 8006e12:	3301      	adds	r3, #1
 8006e14:	e7d0      	b.n	8006db8 <_malloc_r+0x70>
 8006e16:	2b14      	cmp	r3, #20
 8006e18:	d801      	bhi.n	8006e1e <_malloc_r+0xd6>
 8006e1a:	335b      	adds	r3, #91	; 0x5b
 8006e1c:	e7ea      	b.n	8006df4 <_malloc_r+0xac>
 8006e1e:	2b54      	cmp	r3, #84	; 0x54
 8006e20:	d802      	bhi.n	8006e28 <_malloc_r+0xe0>
 8006e22:	0b23      	lsrs	r3, r4, #12
 8006e24:	336e      	adds	r3, #110	; 0x6e
 8006e26:	e7e5      	b.n	8006df4 <_malloc_r+0xac>
 8006e28:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006e2c:	d802      	bhi.n	8006e34 <_malloc_r+0xec>
 8006e2e:	0be3      	lsrs	r3, r4, #15
 8006e30:	3377      	adds	r3, #119	; 0x77
 8006e32:	e7df      	b.n	8006df4 <_malloc_r+0xac>
 8006e34:	f240 5254 	movw	r2, #1364	; 0x554
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d804      	bhi.n	8006e46 <_malloc_r+0xfe>
 8006e3c:	0ca3      	lsrs	r3, r4, #18
 8006e3e:	337c      	adds	r3, #124	; 0x7c
 8006e40:	e7d8      	b.n	8006df4 <_malloc_r+0xac>
 8006e42:	233f      	movs	r3, #63	; 0x3f
 8006e44:	e7d6      	b.n	8006df4 <_malloc_r+0xac>
 8006e46:	237e      	movs	r3, #126	; 0x7e
 8006e48:	e7d4      	b.n	8006df4 <_malloc_r+0xac>
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	68f1      	ldr	r1, [r6, #12]
 8006e4e:	db04      	blt.n	8006e5a <_malloc_r+0x112>
 8006e50:	68b3      	ldr	r3, [r6, #8]
 8006e52:	60d9      	str	r1, [r3, #12]
 8006e54:	608b      	str	r3, [r1, #8]
 8006e56:	18b3      	adds	r3, r6, r2
 8006e58:	e7a4      	b.n	8006da4 <_malloc_r+0x5c>
 8006e5a:	460e      	mov	r6, r1
 8006e5c:	e7d0      	b.n	8006e00 <_malloc_r+0xb8>
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	616a      	str	r2, [r5, #20]
 8006e62:	612a      	str	r2, [r5, #16]
 8006e64:	db05      	blt.n	8006e72 <_malloc_r+0x12a>
 8006e66:	4430      	add	r0, r6
 8006e68:	6843      	ldr	r3, [r0, #4]
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	6043      	str	r3, [r0, #4]
 8006e70:	e79c      	b.n	8006dac <_malloc_r+0x64>
 8006e72:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006e76:	d244      	bcs.n	8006f02 <_malloc_r+0x1ba>
 8006e78:	08c0      	lsrs	r0, r0, #3
 8006e7a:	1087      	asrs	r7, r0, #2
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	fa02 f707 	lsl.w	r7, r2, r7
 8006e82:	686a      	ldr	r2, [r5, #4]
 8006e84:	3001      	adds	r0, #1
 8006e86:	433a      	orrs	r2, r7
 8006e88:	606a      	str	r2, [r5, #4]
 8006e8a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006e8e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8006e92:	60b7      	str	r7, [r6, #8]
 8006e94:	3a08      	subs	r2, #8
 8006e96:	60f2      	str	r2, [r6, #12]
 8006e98:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8006e9c:	60fe      	str	r6, [r7, #12]
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	109a      	asrs	r2, r3, #2
 8006ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ea6:	6868      	ldr	r0, [r5, #4]
 8006ea8:	4282      	cmp	r2, r0
 8006eaa:	f200 80a1 	bhi.w	8006ff0 <_malloc_r+0x2a8>
 8006eae:	4202      	tst	r2, r0
 8006eb0:	d106      	bne.n	8006ec0 <_malloc_r+0x178>
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	0052      	lsls	r2, r2, #1
 8006eb8:	4202      	tst	r2, r0
 8006eba:	f103 0304 	add.w	r3, r3, #4
 8006ebe:	d0fa      	beq.n	8006eb6 <_malloc_r+0x16e>
 8006ec0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8006ec4:	46e0      	mov	r8, ip
 8006ec6:	469e      	mov	lr, r3
 8006ec8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006ecc:	4546      	cmp	r6, r8
 8006ece:	d153      	bne.n	8006f78 <_malloc_r+0x230>
 8006ed0:	f10e 0e01 	add.w	lr, lr, #1
 8006ed4:	f01e 0f03 	tst.w	lr, #3
 8006ed8:	f108 0808 	add.w	r8, r8, #8
 8006edc:	d1f4      	bne.n	8006ec8 <_malloc_r+0x180>
 8006ede:	0798      	lsls	r0, r3, #30
 8006ee0:	d179      	bne.n	8006fd6 <_malloc_r+0x28e>
 8006ee2:	686b      	ldr	r3, [r5, #4]
 8006ee4:	ea23 0302 	bic.w	r3, r3, r2
 8006ee8:	606b      	str	r3, [r5, #4]
 8006eea:	6868      	ldr	r0, [r5, #4]
 8006eec:	0052      	lsls	r2, r2, #1
 8006eee:	4282      	cmp	r2, r0
 8006ef0:	d87e      	bhi.n	8006ff0 <_malloc_r+0x2a8>
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	d07c      	beq.n	8006ff0 <_malloc_r+0x2a8>
 8006ef6:	4673      	mov	r3, lr
 8006ef8:	4202      	tst	r2, r0
 8006efa:	d1e1      	bne.n	8006ec0 <_malloc_r+0x178>
 8006efc:	3304      	adds	r3, #4
 8006efe:	0052      	lsls	r2, r2, #1
 8006f00:	e7fa      	b.n	8006ef8 <_malloc_r+0x1b0>
 8006f02:	0a42      	lsrs	r2, r0, #9
 8006f04:	2a04      	cmp	r2, #4
 8006f06:	d815      	bhi.n	8006f34 <_malloc_r+0x1ec>
 8006f08:	0982      	lsrs	r2, r0, #6
 8006f0a:	3238      	adds	r2, #56	; 0x38
 8006f0c:	1c57      	adds	r7, r2, #1
 8006f0e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006f12:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006f16:	45be      	cmp	lr, r7
 8006f18:	d126      	bne.n	8006f68 <_malloc_r+0x220>
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	1092      	asrs	r2, r2, #2
 8006f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f22:	6868      	ldr	r0, [r5, #4]
 8006f24:	4310      	orrs	r0, r2
 8006f26:	6068      	str	r0, [r5, #4]
 8006f28:	f8c6 e00c 	str.w	lr, [r6, #12]
 8006f2c:	60b7      	str	r7, [r6, #8]
 8006f2e:	f8ce 6008 	str.w	r6, [lr, #8]
 8006f32:	e7b3      	b.n	8006e9c <_malloc_r+0x154>
 8006f34:	2a14      	cmp	r2, #20
 8006f36:	d801      	bhi.n	8006f3c <_malloc_r+0x1f4>
 8006f38:	325b      	adds	r2, #91	; 0x5b
 8006f3a:	e7e7      	b.n	8006f0c <_malloc_r+0x1c4>
 8006f3c:	2a54      	cmp	r2, #84	; 0x54
 8006f3e:	d802      	bhi.n	8006f46 <_malloc_r+0x1fe>
 8006f40:	0b02      	lsrs	r2, r0, #12
 8006f42:	326e      	adds	r2, #110	; 0x6e
 8006f44:	e7e2      	b.n	8006f0c <_malloc_r+0x1c4>
 8006f46:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006f4a:	d802      	bhi.n	8006f52 <_malloc_r+0x20a>
 8006f4c:	0bc2      	lsrs	r2, r0, #15
 8006f4e:	3277      	adds	r2, #119	; 0x77
 8006f50:	e7dc      	b.n	8006f0c <_malloc_r+0x1c4>
 8006f52:	f240 5754 	movw	r7, #1364	; 0x554
 8006f56:	42ba      	cmp	r2, r7
 8006f58:	bf9a      	itte	ls
 8006f5a:	0c82      	lsrls	r2, r0, #18
 8006f5c:	327c      	addls	r2, #124	; 0x7c
 8006f5e:	227e      	movhi	r2, #126	; 0x7e
 8006f60:	e7d4      	b.n	8006f0c <_malloc_r+0x1c4>
 8006f62:	68bf      	ldr	r7, [r7, #8]
 8006f64:	45be      	cmp	lr, r7
 8006f66:	d004      	beq.n	8006f72 <_malloc_r+0x22a>
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	f022 0203 	bic.w	r2, r2, #3
 8006f6e:	4290      	cmp	r0, r2
 8006f70:	d3f7      	bcc.n	8006f62 <_malloc_r+0x21a>
 8006f72:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8006f76:	e7d7      	b.n	8006f28 <_malloc_r+0x1e0>
 8006f78:	6870      	ldr	r0, [r6, #4]
 8006f7a:	68f7      	ldr	r7, [r6, #12]
 8006f7c:	f020 0003 	bic.w	r0, r0, #3
 8006f80:	eba0 0a04 	sub.w	sl, r0, r4
 8006f84:	f1ba 0f0f 	cmp.w	sl, #15
 8006f88:	dd10      	ble.n	8006fac <_malloc_r+0x264>
 8006f8a:	68b2      	ldr	r2, [r6, #8]
 8006f8c:	1933      	adds	r3, r6, r4
 8006f8e:	f044 0401 	orr.w	r4, r4, #1
 8006f92:	6074      	str	r4, [r6, #4]
 8006f94:	60d7      	str	r7, [r2, #12]
 8006f96:	60ba      	str	r2, [r7, #8]
 8006f98:	f04a 0201 	orr.w	r2, sl, #1
 8006f9c:	616b      	str	r3, [r5, #20]
 8006f9e:	612b      	str	r3, [r5, #16]
 8006fa0:	60d9      	str	r1, [r3, #12]
 8006fa2:	6099      	str	r1, [r3, #8]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	f846 a000 	str.w	sl, [r6, r0]
 8006faa:	e6ff      	b.n	8006dac <_malloc_r+0x64>
 8006fac:	f1ba 0f00 	cmp.w	sl, #0
 8006fb0:	db0f      	blt.n	8006fd2 <_malloc_r+0x28a>
 8006fb2:	4430      	add	r0, r6
 8006fb4:	6843      	ldr	r3, [r0, #4]
 8006fb6:	f043 0301 	orr.w	r3, r3, #1
 8006fba:	6043      	str	r3, [r0, #4]
 8006fbc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006fc0:	4648      	mov	r0, r9
 8006fc2:	60df      	str	r7, [r3, #12]
 8006fc4:	60bb      	str	r3, [r7, #8]
 8006fc6:	f000 f8db 	bl	8007180 <__malloc_unlock>
 8006fca:	4630      	mov	r0, r6
 8006fcc:	b003      	add	sp, #12
 8006fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd2:	463e      	mov	r6, r7
 8006fd4:	e77a      	b.n	8006ecc <_malloc_r+0x184>
 8006fd6:	f85c 0908 	ldr.w	r0, [ip], #-8
 8006fda:	4584      	cmp	ip, r0
 8006fdc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006fe0:	f43f af7d 	beq.w	8006ede <_malloc_r+0x196>
 8006fe4:	e781      	b.n	8006eea <_malloc_r+0x1a2>
 8006fe6:	bf00      	nop
 8006fe8:	200000bc 	.word	0x200000bc
 8006fec:	200000c4 	.word	0x200000c4
 8006ff0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006ff4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006ff8:	f026 0603 	bic.w	r6, r6, #3
 8006ffc:	42b4      	cmp	r4, r6
 8006ffe:	d803      	bhi.n	8007008 <_malloc_r+0x2c0>
 8007000:	1b33      	subs	r3, r6, r4
 8007002:	2b0f      	cmp	r3, #15
 8007004:	f300 8096 	bgt.w	8007134 <_malloc_r+0x3ec>
 8007008:	4a4f      	ldr	r2, [pc, #316]	; (8007148 <_malloc_r+0x400>)
 800700a:	6817      	ldr	r7, [r2, #0]
 800700c:	4a4f      	ldr	r2, [pc, #316]	; (800714c <_malloc_r+0x404>)
 800700e:	6811      	ldr	r1, [r2, #0]
 8007010:	3710      	adds	r7, #16
 8007012:	3101      	adds	r1, #1
 8007014:	eb0b 0306 	add.w	r3, fp, r6
 8007018:	4427      	add	r7, r4
 800701a:	d005      	beq.n	8007028 <_malloc_r+0x2e0>
 800701c:	494c      	ldr	r1, [pc, #304]	; (8007150 <_malloc_r+0x408>)
 800701e:	3901      	subs	r1, #1
 8007020:	440f      	add	r7, r1
 8007022:	3101      	adds	r1, #1
 8007024:	4249      	negs	r1, r1
 8007026:	400f      	ands	r7, r1
 8007028:	4639      	mov	r1, r7
 800702a:	4648      	mov	r0, r9
 800702c:	9201      	str	r2, [sp, #4]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	f000 f8ac 	bl	800718c <_sbrk_r>
 8007034:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007038:	4680      	mov	r8, r0
 800703a:	d056      	beq.n	80070ea <_malloc_r+0x3a2>
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	9a01      	ldr	r2, [sp, #4]
 8007040:	4283      	cmp	r3, r0
 8007042:	d901      	bls.n	8007048 <_malloc_r+0x300>
 8007044:	45ab      	cmp	fp, r5
 8007046:	d150      	bne.n	80070ea <_malloc_r+0x3a2>
 8007048:	4842      	ldr	r0, [pc, #264]	; (8007154 <_malloc_r+0x40c>)
 800704a:	6801      	ldr	r1, [r0, #0]
 800704c:	4543      	cmp	r3, r8
 800704e:	eb07 0e01 	add.w	lr, r7, r1
 8007052:	f8c0 e000 	str.w	lr, [r0]
 8007056:	4940      	ldr	r1, [pc, #256]	; (8007158 <_malloc_r+0x410>)
 8007058:	4682      	mov	sl, r0
 800705a:	d113      	bne.n	8007084 <_malloc_r+0x33c>
 800705c:	420b      	tst	r3, r1
 800705e:	d111      	bne.n	8007084 <_malloc_r+0x33c>
 8007060:	68ab      	ldr	r3, [r5, #8]
 8007062:	443e      	add	r6, r7
 8007064:	f046 0601 	orr.w	r6, r6, #1
 8007068:	605e      	str	r6, [r3, #4]
 800706a:	4a3c      	ldr	r2, [pc, #240]	; (800715c <_malloc_r+0x414>)
 800706c:	f8da 3000 	ldr.w	r3, [sl]
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	428b      	cmp	r3, r1
 8007074:	bf88      	it	hi
 8007076:	6013      	strhi	r3, [r2, #0]
 8007078:	4a39      	ldr	r2, [pc, #228]	; (8007160 <_malloc_r+0x418>)
 800707a:	6811      	ldr	r1, [r2, #0]
 800707c:	428b      	cmp	r3, r1
 800707e:	bf88      	it	hi
 8007080:	6013      	strhi	r3, [r2, #0]
 8007082:	e032      	b.n	80070ea <_malloc_r+0x3a2>
 8007084:	6810      	ldr	r0, [r2, #0]
 8007086:	3001      	adds	r0, #1
 8007088:	bf1b      	ittet	ne
 800708a:	eba8 0303 	subne.w	r3, r8, r3
 800708e:	4473      	addne	r3, lr
 8007090:	f8c2 8000 	streq.w	r8, [r2]
 8007094:	f8ca 3000 	strne.w	r3, [sl]
 8007098:	f018 0007 	ands.w	r0, r8, #7
 800709c:	bf1c      	itt	ne
 800709e:	f1c0 0008 	rsbne	r0, r0, #8
 80070a2:	4480      	addne	r8, r0
 80070a4:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <_malloc_r+0x408>)
 80070a6:	4447      	add	r7, r8
 80070a8:	4418      	add	r0, r3
 80070aa:	400f      	ands	r7, r1
 80070ac:	1bc7      	subs	r7, r0, r7
 80070ae:	4639      	mov	r1, r7
 80070b0:	4648      	mov	r0, r9
 80070b2:	f000 f86b 	bl	800718c <_sbrk_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	bf08      	it	eq
 80070ba:	4640      	moveq	r0, r8
 80070bc:	f8da 3000 	ldr.w	r3, [sl]
 80070c0:	f8c5 8008 	str.w	r8, [r5, #8]
 80070c4:	bf08      	it	eq
 80070c6:	2700      	moveq	r7, #0
 80070c8:	eba0 0008 	sub.w	r0, r0, r8
 80070cc:	443b      	add	r3, r7
 80070ce:	4407      	add	r7, r0
 80070d0:	f047 0701 	orr.w	r7, r7, #1
 80070d4:	45ab      	cmp	fp, r5
 80070d6:	f8ca 3000 	str.w	r3, [sl]
 80070da:	f8c8 7004 	str.w	r7, [r8, #4]
 80070de:	d0c4      	beq.n	800706a <_malloc_r+0x322>
 80070e0:	2e0f      	cmp	r6, #15
 80070e2:	d810      	bhi.n	8007106 <_malloc_r+0x3be>
 80070e4:	2301      	movs	r3, #1
 80070e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80070ea:	68ab      	ldr	r3, [r5, #8]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	f022 0203 	bic.w	r2, r2, #3
 80070f2:	4294      	cmp	r4, r2
 80070f4:	eba2 0304 	sub.w	r3, r2, r4
 80070f8:	d801      	bhi.n	80070fe <_malloc_r+0x3b6>
 80070fa:	2b0f      	cmp	r3, #15
 80070fc:	dc1a      	bgt.n	8007134 <_malloc_r+0x3ec>
 80070fe:	4648      	mov	r0, r9
 8007100:	f000 f83e 	bl	8007180 <__malloc_unlock>
 8007104:	e62d      	b.n	8006d62 <_malloc_r+0x1a>
 8007106:	f8db 3004 	ldr.w	r3, [fp, #4]
 800710a:	3e0c      	subs	r6, #12
 800710c:	f026 0607 	bic.w	r6, r6, #7
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	4333      	orrs	r3, r6
 8007116:	f8cb 3004 	str.w	r3, [fp, #4]
 800711a:	eb0b 0306 	add.w	r3, fp, r6
 800711e:	2205      	movs	r2, #5
 8007120:	2e0f      	cmp	r6, #15
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	609a      	str	r2, [r3, #8]
 8007126:	d9a0      	bls.n	800706a <_malloc_r+0x322>
 8007128:	f10b 0108 	add.w	r1, fp, #8
 800712c:	4648      	mov	r0, r9
 800712e:	f000 f9ad 	bl	800748c <_free_r>
 8007132:	e79a      	b.n	800706a <_malloc_r+0x322>
 8007134:	68ae      	ldr	r6, [r5, #8]
 8007136:	f044 0201 	orr.w	r2, r4, #1
 800713a:	4434      	add	r4, r6
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	6072      	str	r2, [r6, #4]
 8007142:	60ac      	str	r4, [r5, #8]
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	e631      	b.n	8006dac <_malloc_r+0x64>
 8007148:	20000a50 	.word	0x20000a50
 800714c:	200004c4 	.word	0x200004c4
 8007150:	00000080 	.word	0x00000080
 8007154:	20000a20 	.word	0x20000a20
 8007158:	0000007f 	.word	0x0000007f
 800715c:	20000a48 	.word	0x20000a48
 8007160:	20000a4c 	.word	0x20000a4c

08007164 <memset>:
 8007164:	4402      	add	r2, r0
 8007166:	4603      	mov	r3, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <__malloc_lock>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__malloc_lock+0x8>)
 8007176:	f000 ba48 	b.w	800760a <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	20000ea0 	.word	0x20000ea0

08007180 <__malloc_unlock>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__malloc_unlock+0x8>)
 8007182:	f000 ba43 	b.w	800760c <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	20000ea0 	.word	0x20000ea0

0800718c <_sbrk_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4c06      	ldr	r4, [pc, #24]	; (80071a8 <_sbrk_r+0x1c>)
 8007190:	2300      	movs	r3, #0
 8007192:	4605      	mov	r5, r0
 8007194:	4608      	mov	r0, r1
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	f000 fc58 	bl	8007a4c <_sbrk>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_sbrk_r+0x1a>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_sbrk_r+0x1a>
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20000ea8 	.word	0x20000ea8

080071ac <strcpy>:
 80071ac:	4603      	mov	r3, r0
 80071ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071b2:	f803 2b01 	strb.w	r2, [r3], #1
 80071b6:	2a00      	cmp	r2, #0
 80071b8:	d1f9      	bne.n	80071ae <strcpy+0x2>
 80071ba:	4770      	bx	lr

080071bc <strncat>:
 80071bc:	b530      	push	{r4, r5, lr}
 80071be:	4603      	mov	r3, r0
 80071c0:	781c      	ldrb	r4, [r3, #0]
 80071c2:	1c5d      	adds	r5, r3, #1
 80071c4:	b944      	cbnz	r4, 80071d8 <strncat+0x1c>
 80071c6:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80071ca:	d304      	bcc.n	80071d6 <strncat+0x1a>
 80071cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d0:	f803 4b01 	strb.w	r4, [r3], #1
 80071d4:	b914      	cbnz	r4, 80071dc <strncat+0x20>
 80071d6:	bd30      	pop	{r4, r5, pc}
 80071d8:	462b      	mov	r3, r5
 80071da:	e7f1      	b.n	80071c0 <strncat+0x4>
 80071dc:	2a00      	cmp	r2, #0
 80071de:	d1f2      	bne.n	80071c6 <strncat+0xa>
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e7f0      	b.n	80071c6 <strncat+0xa>

080071e4 <strncmp>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	b16a      	cbz	r2, 8007204 <strncmp+0x20>
 80071e8:	3901      	subs	r1, #1
 80071ea:	1884      	adds	r4, r0, r2
 80071ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80071f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d103      	bne.n	8007200 <strncmp+0x1c>
 80071f8:	42a0      	cmp	r0, r4
 80071fa:	d001      	beq.n	8007200 <strncmp+0x1c>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f5      	bne.n	80071ec <strncmp+0x8>
 8007200:	1a98      	subs	r0, r3, r2
 8007202:	bd10      	pop	{r4, pc}
 8007204:	4610      	mov	r0, r2
 8007206:	bd10      	pop	{r4, pc}

08007208 <strncpy>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4604      	mov	r4, r0
 800720c:	b902      	cbnz	r2, 8007210 <strncpy+0x8>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	4623      	mov	r3, r4
 8007212:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007216:	f803 5b01 	strb.w	r5, [r3], #1
 800721a:	1e56      	subs	r6, r2, #1
 800721c:	b91d      	cbnz	r5, 8007226 <strncpy+0x1e>
 800721e:	4414      	add	r4, r2
 8007220:	42a3      	cmp	r3, r4
 8007222:	d103      	bne.n	800722c <strncpy+0x24>
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	461c      	mov	r4, r3
 8007228:	4632      	mov	r2, r6
 800722a:	e7ef      	b.n	800720c <strncpy+0x4>
 800722c:	f803 5b01 	strb.w	r5, [r3], #1
 8007230:	e7f6      	b.n	8007220 <strncpy+0x18>

08007232 <_strtol_l.isra.0>:
 8007232:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007236:	4680      	mov	r8, r0
 8007238:	4689      	mov	r9, r1
 800723a:	4692      	mov	sl, r2
 800723c:	461f      	mov	r7, r3
 800723e:	468b      	mov	fp, r1
 8007240:	465d      	mov	r5, fp
 8007242:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007248:	f000 f9dc 	bl	8007604 <__locale_ctype_ptr_l>
 800724c:	4420      	add	r0, r4
 800724e:	7846      	ldrb	r6, [r0, #1]
 8007250:	f016 0608 	ands.w	r6, r6, #8
 8007254:	d10b      	bne.n	800726e <_strtol_l.isra.0+0x3c>
 8007256:	2c2d      	cmp	r4, #45	; 0x2d
 8007258:	d10b      	bne.n	8007272 <_strtol_l.isra.0+0x40>
 800725a:	782c      	ldrb	r4, [r5, #0]
 800725c:	2601      	movs	r6, #1
 800725e:	f10b 0502 	add.w	r5, fp, #2
 8007262:	b167      	cbz	r7, 800727e <_strtol_l.isra.0+0x4c>
 8007264:	2f10      	cmp	r7, #16
 8007266:	d114      	bne.n	8007292 <_strtol_l.isra.0+0x60>
 8007268:	2c30      	cmp	r4, #48	; 0x30
 800726a:	d00a      	beq.n	8007282 <_strtol_l.isra.0+0x50>
 800726c:	e011      	b.n	8007292 <_strtol_l.isra.0+0x60>
 800726e:	46ab      	mov	fp, r5
 8007270:	e7e6      	b.n	8007240 <_strtol_l.isra.0+0xe>
 8007272:	2c2b      	cmp	r4, #43	; 0x2b
 8007274:	bf04      	itt	eq
 8007276:	782c      	ldrbeq	r4, [r5, #0]
 8007278:	f10b 0502 	addeq.w	r5, fp, #2
 800727c:	e7f1      	b.n	8007262 <_strtol_l.isra.0+0x30>
 800727e:	2c30      	cmp	r4, #48	; 0x30
 8007280:	d127      	bne.n	80072d2 <_strtol_l.isra.0+0xa0>
 8007282:	782b      	ldrb	r3, [r5, #0]
 8007284:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007288:	2b58      	cmp	r3, #88	; 0x58
 800728a:	d14b      	bne.n	8007324 <_strtol_l.isra.0+0xf2>
 800728c:	786c      	ldrb	r4, [r5, #1]
 800728e:	2710      	movs	r7, #16
 8007290:	3502      	adds	r5, #2
 8007292:	2e00      	cmp	r6, #0
 8007294:	bf0c      	ite	eq
 8007296:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800729a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800729e:	2200      	movs	r2, #0
 80072a0:	fbb1 fef7 	udiv	lr, r1, r7
 80072a4:	4610      	mov	r0, r2
 80072a6:	fb07 1c1e 	mls	ip, r7, lr, r1
 80072aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80072ae:	2b09      	cmp	r3, #9
 80072b0:	d811      	bhi.n	80072d6 <_strtol_l.isra.0+0xa4>
 80072b2:	461c      	mov	r4, r3
 80072b4:	42a7      	cmp	r7, r4
 80072b6:	dd1d      	ble.n	80072f4 <_strtol_l.isra.0+0xc2>
 80072b8:	1c53      	adds	r3, r2, #1
 80072ba:	d007      	beq.n	80072cc <_strtol_l.isra.0+0x9a>
 80072bc:	4586      	cmp	lr, r0
 80072be:	d316      	bcc.n	80072ee <_strtol_l.isra.0+0xbc>
 80072c0:	d101      	bne.n	80072c6 <_strtol_l.isra.0+0x94>
 80072c2:	45a4      	cmp	ip, r4
 80072c4:	db13      	blt.n	80072ee <_strtol_l.isra.0+0xbc>
 80072c6:	fb00 4007 	mla	r0, r0, r7, r4
 80072ca:	2201      	movs	r2, #1
 80072cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072d0:	e7eb      	b.n	80072aa <_strtol_l.isra.0+0x78>
 80072d2:	270a      	movs	r7, #10
 80072d4:	e7dd      	b.n	8007292 <_strtol_l.isra.0+0x60>
 80072d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80072da:	2b19      	cmp	r3, #25
 80072dc:	d801      	bhi.n	80072e2 <_strtol_l.isra.0+0xb0>
 80072de:	3c37      	subs	r4, #55	; 0x37
 80072e0:	e7e8      	b.n	80072b4 <_strtol_l.isra.0+0x82>
 80072e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80072e6:	2b19      	cmp	r3, #25
 80072e8:	d804      	bhi.n	80072f4 <_strtol_l.isra.0+0xc2>
 80072ea:	3c57      	subs	r4, #87	; 0x57
 80072ec:	e7e2      	b.n	80072b4 <_strtol_l.isra.0+0x82>
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f2:	e7eb      	b.n	80072cc <_strtol_l.isra.0+0x9a>
 80072f4:	1c53      	adds	r3, r2, #1
 80072f6:	d108      	bne.n	800730a <_strtol_l.isra.0+0xd8>
 80072f8:	2322      	movs	r3, #34	; 0x22
 80072fa:	f8c8 3000 	str.w	r3, [r8]
 80072fe:	4608      	mov	r0, r1
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	d107      	bne.n	8007316 <_strtol_l.isra.0+0xe4>
 8007306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	b106      	cbz	r6, 800730e <_strtol_l.isra.0+0xdc>
 800730c:	4240      	negs	r0, r0
 800730e:	f1ba 0f00 	cmp.w	sl, #0
 8007312:	d00c      	beq.n	800732e <_strtol_l.isra.0+0xfc>
 8007314:	b122      	cbz	r2, 8007320 <_strtol_l.isra.0+0xee>
 8007316:	3d01      	subs	r5, #1
 8007318:	f8ca 5000 	str.w	r5, [sl]
 800731c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	464d      	mov	r5, r9
 8007322:	e7f9      	b.n	8007318 <_strtol_l.isra.0+0xe6>
 8007324:	2430      	movs	r4, #48	; 0x30
 8007326:	2f00      	cmp	r7, #0
 8007328:	d1b3      	bne.n	8007292 <_strtol_l.isra.0+0x60>
 800732a:	2708      	movs	r7, #8
 800732c:	e7b1      	b.n	8007292 <_strtol_l.isra.0+0x60>
 800732e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007334 <strtol>:
 8007334:	4b08      	ldr	r3, [pc, #32]	; (8007358 <strtol+0x24>)
 8007336:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	4d08      	ldr	r5, [pc, #32]	; (800735c <strtol+0x28>)
 800733c:	6a23      	ldr	r3, [r4, #32]
 800733e:	2b00      	cmp	r3, #0
 8007340:	bf08      	it	eq
 8007342:	462b      	moveq	r3, r5
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	460a      	mov	r2, r1
 800734a:	4601      	mov	r1, r0
 800734c:	4620      	mov	r0, r4
 800734e:	f7ff ff70 	bl	8007232 <_strtol_l.isra.0>
 8007352:	b003      	add	sp, #12
 8007354:	bd30      	pop	{r4, r5, pc}
 8007356:	bf00      	nop
 8007358:	200004cc 	.word	0x200004cc
 800735c:	200005c0 	.word	0x200005c0

08007360 <__utoa>:
 8007360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007362:	4c1e      	ldr	r4, [pc, #120]	; (80073dc <__utoa+0x7c>)
 8007364:	b08b      	sub	sp, #44	; 0x2c
 8007366:	4603      	mov	r3, r0
 8007368:	460f      	mov	r7, r1
 800736a:	466d      	mov	r5, sp
 800736c:	f104 0e20 	add.w	lr, r4, #32
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	6861      	ldr	r1, [r4, #4]
 8007374:	462e      	mov	r6, r5
 8007376:	c603      	stmia	r6!, {r0, r1}
 8007378:	3408      	adds	r4, #8
 800737a:	4574      	cmp	r4, lr
 800737c:	4635      	mov	r5, r6
 800737e:	d1f7      	bne.n	8007370 <__utoa+0x10>
 8007380:	7921      	ldrb	r1, [r4, #4]
 8007382:	7131      	strb	r1, [r6, #4]
 8007384:	1e91      	subs	r1, r2, #2
 8007386:	6820      	ldr	r0, [r4, #0]
 8007388:	6030      	str	r0, [r6, #0]
 800738a:	2922      	cmp	r1, #34	; 0x22
 800738c:	f04f 0100 	mov.w	r1, #0
 8007390:	d904      	bls.n	800739c <__utoa+0x3c>
 8007392:	7039      	strb	r1, [r7, #0]
 8007394:	460f      	mov	r7, r1
 8007396:	4638      	mov	r0, r7
 8007398:	b00b      	add	sp, #44	; 0x2c
 800739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739c:	1e78      	subs	r0, r7, #1
 800739e:	4606      	mov	r6, r0
 80073a0:	fbb3 f5f2 	udiv	r5, r3, r2
 80073a4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80073a8:	fb02 3315 	mls	r3, r2, r5, r3
 80073ac:	4473      	add	r3, lr
 80073ae:	1c4c      	adds	r4, r1, #1
 80073b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80073b4:	f806 3f01 	strb.w	r3, [r6, #1]!
 80073b8:	462b      	mov	r3, r5
 80073ba:	b965      	cbnz	r5, 80073d6 <__utoa+0x76>
 80073bc:	553d      	strb	r5, [r7, r4]
 80073be:	187a      	adds	r2, r7, r1
 80073c0:	1acc      	subs	r4, r1, r3
 80073c2:	42a3      	cmp	r3, r4
 80073c4:	dae7      	bge.n	8007396 <__utoa+0x36>
 80073c6:	7844      	ldrb	r4, [r0, #1]
 80073c8:	7815      	ldrb	r5, [r2, #0]
 80073ca:	f800 5f01 	strb.w	r5, [r0, #1]!
 80073ce:	3301      	adds	r3, #1
 80073d0:	f802 4901 	strb.w	r4, [r2], #-1
 80073d4:	e7f4      	b.n	80073c0 <__utoa+0x60>
 80073d6:	4621      	mov	r1, r4
 80073d8:	e7e2      	b.n	80073a0 <__utoa+0x40>
 80073da:	bf00      	nop
 80073dc:	08008098 	.word	0x08008098

080073e0 <_malloc_trim_r>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4f25      	ldr	r7, [pc, #148]	; (800747c <_malloc_trim_r+0x9c>)
 80073e6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007488 <_malloc_trim_r+0xa8>
 80073ea:	4689      	mov	r9, r1
 80073ec:	4606      	mov	r6, r0
 80073ee:	f7ff fec1 	bl	8007174 <__malloc_lock>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	685d      	ldr	r5, [r3, #4]
 80073f6:	f1a8 0411 	sub.w	r4, r8, #17
 80073fa:	f025 0503 	bic.w	r5, r5, #3
 80073fe:	eba4 0409 	sub.w	r4, r4, r9
 8007402:	442c      	add	r4, r5
 8007404:	fbb4 f4f8 	udiv	r4, r4, r8
 8007408:	3c01      	subs	r4, #1
 800740a:	fb08 f404 	mul.w	r4, r8, r4
 800740e:	4544      	cmp	r4, r8
 8007410:	da05      	bge.n	800741e <_malloc_trim_r+0x3e>
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff feb4 	bl	8007180 <__malloc_unlock>
 8007418:	2000      	movs	r0, #0
 800741a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741e:	2100      	movs	r1, #0
 8007420:	4630      	mov	r0, r6
 8007422:	f7ff feb3 	bl	800718c <_sbrk_r>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	442b      	add	r3, r5
 800742a:	4298      	cmp	r0, r3
 800742c:	d1f1      	bne.n	8007412 <_malloc_trim_r+0x32>
 800742e:	4261      	negs	r1, r4
 8007430:	4630      	mov	r0, r6
 8007432:	f7ff feab 	bl	800718c <_sbrk_r>
 8007436:	3001      	adds	r0, #1
 8007438:	d110      	bne.n	800745c <_malloc_trim_r+0x7c>
 800743a:	2100      	movs	r1, #0
 800743c:	4630      	mov	r0, r6
 800743e:	f7ff fea5 	bl	800718c <_sbrk_r>
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	1a83      	subs	r3, r0, r2
 8007446:	2b0f      	cmp	r3, #15
 8007448:	dde3      	ble.n	8007412 <_malloc_trim_r+0x32>
 800744a:	490d      	ldr	r1, [pc, #52]	; (8007480 <_malloc_trim_r+0xa0>)
 800744c:	6809      	ldr	r1, [r1, #0]
 800744e:	1a40      	subs	r0, r0, r1
 8007450:	490c      	ldr	r1, [pc, #48]	; (8007484 <_malloc_trim_r+0xa4>)
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	6008      	str	r0, [r1, #0]
 8007458:	6053      	str	r3, [r2, #4]
 800745a:	e7da      	b.n	8007412 <_malloc_trim_r+0x32>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <_malloc_trim_r+0xa4>)
 8007460:	1b2d      	subs	r5, r5, r4
 8007462:	f045 0501 	orr.w	r5, r5, #1
 8007466:	605d      	str	r5, [r3, #4]
 8007468:	6813      	ldr	r3, [r2, #0]
 800746a:	4630      	mov	r0, r6
 800746c:	1b1c      	subs	r4, r3, r4
 800746e:	6014      	str	r4, [r2, #0]
 8007470:	f7ff fe86 	bl	8007180 <__malloc_unlock>
 8007474:	2001      	movs	r0, #1
 8007476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800747a:	bf00      	nop
 800747c:	200000bc 	.word	0x200000bc
 8007480:	200004c4 	.word	0x200004c4
 8007484:	20000a20 	.word	0x20000a20
 8007488:	00000080 	.word	0x00000080

0800748c <_free_r>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	4688      	mov	r8, r1
 8007494:	2900      	cmp	r1, #0
 8007496:	f000 80ab 	beq.w	80075f0 <_free_r+0x164>
 800749a:	f7ff fe6b 	bl	8007174 <__malloc_lock>
 800749e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80074a2:	4d54      	ldr	r5, [pc, #336]	; (80075f4 <_free_r+0x168>)
 80074a4:	f022 0001 	bic.w	r0, r2, #1
 80074a8:	f1a8 0308 	sub.w	r3, r8, #8
 80074ac:	181f      	adds	r7, r3, r0
 80074ae:	68a9      	ldr	r1, [r5, #8]
 80074b0:	687e      	ldr	r6, [r7, #4]
 80074b2:	428f      	cmp	r7, r1
 80074b4:	f026 0603 	bic.w	r6, r6, #3
 80074b8:	f002 0201 	and.w	r2, r2, #1
 80074bc:	d11b      	bne.n	80074f6 <_free_r+0x6a>
 80074be:	4430      	add	r0, r6
 80074c0:	b93a      	cbnz	r2, 80074d2 <_free_r+0x46>
 80074c2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80074c6:	1a9b      	subs	r3, r3, r2
 80074c8:	4410      	add	r0, r2
 80074ca:	6899      	ldr	r1, [r3, #8]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	60ca      	str	r2, [r1, #12]
 80074d0:	6091      	str	r1, [r2, #8]
 80074d2:	f040 0201 	orr.w	r2, r0, #1
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	60ab      	str	r3, [r5, #8]
 80074da:	4b47      	ldr	r3, [pc, #284]	; (80075f8 <_free_r+0x16c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4298      	cmp	r0, r3
 80074e0:	d304      	bcc.n	80074ec <_free_r+0x60>
 80074e2:	4b46      	ldr	r3, [pc, #280]	; (80075fc <_free_r+0x170>)
 80074e4:	4620      	mov	r0, r4
 80074e6:	6819      	ldr	r1, [r3, #0]
 80074e8:	f7ff ff7a 	bl	80073e0 <_malloc_trim_r>
 80074ec:	4620      	mov	r0, r4
 80074ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f2:	f7ff be45 	b.w	8007180 <__malloc_unlock>
 80074f6:	607e      	str	r6, [r7, #4]
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	d139      	bne.n	8007570 <_free_r+0xe4>
 80074fc:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007500:	1a5b      	subs	r3, r3, r1
 8007502:	4408      	add	r0, r1
 8007504:	6899      	ldr	r1, [r3, #8]
 8007506:	f105 0e08 	add.w	lr, r5, #8
 800750a:	4571      	cmp	r1, lr
 800750c:	d032      	beq.n	8007574 <_free_r+0xe8>
 800750e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007512:	f8c1 e00c 	str.w	lr, [r1, #12]
 8007516:	f8ce 1008 	str.w	r1, [lr, #8]
 800751a:	19b9      	adds	r1, r7, r6
 800751c:	6849      	ldr	r1, [r1, #4]
 800751e:	07c9      	lsls	r1, r1, #31
 8007520:	d40a      	bmi.n	8007538 <_free_r+0xac>
 8007522:	4430      	add	r0, r6
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	bb3a      	cbnz	r2, 8007578 <_free_r+0xec>
 8007528:	4e35      	ldr	r6, [pc, #212]	; (8007600 <_free_r+0x174>)
 800752a:	42b1      	cmp	r1, r6
 800752c:	d124      	bne.n	8007578 <_free_r+0xec>
 800752e:	616b      	str	r3, [r5, #20]
 8007530:	612b      	str	r3, [r5, #16]
 8007532:	2201      	movs	r2, #1
 8007534:	60d9      	str	r1, [r3, #12]
 8007536:	6099      	str	r1, [r3, #8]
 8007538:	f040 0101 	orr.w	r1, r0, #1
 800753c:	6059      	str	r1, [r3, #4]
 800753e:	5018      	str	r0, [r3, r0]
 8007540:	2a00      	cmp	r2, #0
 8007542:	d1d3      	bne.n	80074ec <_free_r+0x60>
 8007544:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007548:	d21a      	bcs.n	8007580 <_free_r+0xf4>
 800754a:	08c0      	lsrs	r0, r0, #3
 800754c:	1081      	asrs	r1, r0, #2
 800754e:	2201      	movs	r2, #1
 8007550:	408a      	lsls	r2, r1
 8007552:	6869      	ldr	r1, [r5, #4]
 8007554:	3001      	adds	r0, #1
 8007556:	430a      	orrs	r2, r1
 8007558:	606a      	str	r2, [r5, #4]
 800755a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800755e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007562:	6099      	str	r1, [r3, #8]
 8007564:	3a08      	subs	r2, #8
 8007566:	60da      	str	r2, [r3, #12]
 8007568:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800756c:	60cb      	str	r3, [r1, #12]
 800756e:	e7bd      	b.n	80074ec <_free_r+0x60>
 8007570:	2200      	movs	r2, #0
 8007572:	e7d2      	b.n	800751a <_free_r+0x8e>
 8007574:	2201      	movs	r2, #1
 8007576:	e7d0      	b.n	800751a <_free_r+0x8e>
 8007578:	68fe      	ldr	r6, [r7, #12]
 800757a:	60ce      	str	r6, [r1, #12]
 800757c:	60b1      	str	r1, [r6, #8]
 800757e:	e7db      	b.n	8007538 <_free_r+0xac>
 8007580:	0a42      	lsrs	r2, r0, #9
 8007582:	2a04      	cmp	r2, #4
 8007584:	d813      	bhi.n	80075ae <_free_r+0x122>
 8007586:	0982      	lsrs	r2, r0, #6
 8007588:	3238      	adds	r2, #56	; 0x38
 800758a:	1c51      	adds	r1, r2, #1
 800758c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007590:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007594:	428e      	cmp	r6, r1
 8007596:	d124      	bne.n	80075e2 <_free_r+0x156>
 8007598:	2001      	movs	r0, #1
 800759a:	1092      	asrs	r2, r2, #2
 800759c:	fa00 f202 	lsl.w	r2, r0, r2
 80075a0:	6868      	ldr	r0, [r5, #4]
 80075a2:	4302      	orrs	r2, r0
 80075a4:	606a      	str	r2, [r5, #4]
 80075a6:	60de      	str	r6, [r3, #12]
 80075a8:	6099      	str	r1, [r3, #8]
 80075aa:	60b3      	str	r3, [r6, #8]
 80075ac:	e7de      	b.n	800756c <_free_r+0xe0>
 80075ae:	2a14      	cmp	r2, #20
 80075b0:	d801      	bhi.n	80075b6 <_free_r+0x12a>
 80075b2:	325b      	adds	r2, #91	; 0x5b
 80075b4:	e7e9      	b.n	800758a <_free_r+0xfe>
 80075b6:	2a54      	cmp	r2, #84	; 0x54
 80075b8:	d802      	bhi.n	80075c0 <_free_r+0x134>
 80075ba:	0b02      	lsrs	r2, r0, #12
 80075bc:	326e      	adds	r2, #110	; 0x6e
 80075be:	e7e4      	b.n	800758a <_free_r+0xfe>
 80075c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80075c4:	d802      	bhi.n	80075cc <_free_r+0x140>
 80075c6:	0bc2      	lsrs	r2, r0, #15
 80075c8:	3277      	adds	r2, #119	; 0x77
 80075ca:	e7de      	b.n	800758a <_free_r+0xfe>
 80075cc:	f240 5154 	movw	r1, #1364	; 0x554
 80075d0:	428a      	cmp	r2, r1
 80075d2:	bf9a      	itte	ls
 80075d4:	0c82      	lsrls	r2, r0, #18
 80075d6:	327c      	addls	r2, #124	; 0x7c
 80075d8:	227e      	movhi	r2, #126	; 0x7e
 80075da:	e7d6      	b.n	800758a <_free_r+0xfe>
 80075dc:	6889      	ldr	r1, [r1, #8]
 80075de:	428e      	cmp	r6, r1
 80075e0:	d004      	beq.n	80075ec <_free_r+0x160>
 80075e2:	684a      	ldr	r2, [r1, #4]
 80075e4:	f022 0203 	bic.w	r2, r2, #3
 80075e8:	4290      	cmp	r0, r2
 80075ea:	d3f7      	bcc.n	80075dc <_free_r+0x150>
 80075ec:	68ce      	ldr	r6, [r1, #12]
 80075ee:	e7da      	b.n	80075a6 <_free_r+0x11a>
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	200000bc 	.word	0x200000bc
 80075f8:	200004c8 	.word	0x200004c8
 80075fc:	20000a50 	.word	0x20000a50
 8007600:	200000c4 	.word	0x200000c4

08007604 <__locale_ctype_ptr_l>:
 8007604:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007608:	4770      	bx	lr

0800760a <__retarget_lock_acquire_recursive>:
 800760a:	4770      	bx	lr

0800760c <__retarget_lock_release_recursive>:
 800760c:	4770      	bx	lr

0800760e <__ascii_mbtowc>:
 800760e:	b082      	sub	sp, #8
 8007610:	b901      	cbnz	r1, 8007614 <__ascii_mbtowc+0x6>
 8007612:	a901      	add	r1, sp, #4
 8007614:	b142      	cbz	r2, 8007628 <__ascii_mbtowc+0x1a>
 8007616:	b14b      	cbz	r3, 800762c <__ascii_mbtowc+0x1e>
 8007618:	7813      	ldrb	r3, [r2, #0]
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	7812      	ldrb	r2, [r2, #0]
 800761e:	1c10      	adds	r0, r2, #0
 8007620:	bf18      	it	ne
 8007622:	2001      	movne	r0, #1
 8007624:	b002      	add	sp, #8
 8007626:	4770      	bx	lr
 8007628:	4610      	mov	r0, r2
 800762a:	e7fb      	b.n	8007624 <__ascii_mbtowc+0x16>
 800762c:	f06f 0001 	mvn.w	r0, #1
 8007630:	e7f8      	b.n	8007624 <__ascii_mbtowc+0x16>

08007632 <__ascii_wctomb>:
 8007632:	b149      	cbz	r1, 8007648 <__ascii_wctomb+0x16>
 8007634:	2aff      	cmp	r2, #255	; 0xff
 8007636:	bf85      	ittet	hi
 8007638:	238a      	movhi	r3, #138	; 0x8a
 800763a:	6003      	strhi	r3, [r0, #0]
 800763c:	700a      	strbls	r2, [r1, #0]
 800763e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007642:	bf98      	it	ls
 8007644:	2001      	movls	r0, #1
 8007646:	4770      	bx	lr
 8007648:	4608      	mov	r0, r1
 800764a:	4770      	bx	lr
 800764c:	0000      	movs	r0, r0
	...

08007650 <exp>:
 8007650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007652:	ed2d 8b02 	vpush	{d8}
 8007656:	4e38      	ldr	r6, [pc, #224]	; (8007738 <exp+0xe8>)
 8007658:	b08b      	sub	sp, #44	; 0x2c
 800765a:	ec55 4b10 	vmov	r4, r5, d0
 800765e:	f000 f873 	bl	8007748 <__ieee754_exp>
 8007662:	f996 3000 	ldrsb.w	r3, [r6]
 8007666:	eeb0 8a40 	vmov.f32	s16, s0
 800766a:	eef0 8a60 	vmov.f32	s17, s1
 800766e:	3301      	adds	r3, #1
 8007670:	d02c      	beq.n	80076cc <exp+0x7c>
 8007672:	ec45 4b10 	vmov	d0, r4, r5
 8007676:	f000 f9d9 	bl	8007a2c <finite>
 800767a:	b338      	cbz	r0, 80076cc <exp+0x7c>
 800767c:	a32a      	add	r3, pc, #168	; (adr r3, 8007728 <exp+0xd8>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	4620      	mov	r0, r4
 8007684:	4629      	mov	r1, r5
 8007686:	f7f9 f9f7 	bl	8000a78 <__aeabi_dcmpgt>
 800768a:	4607      	mov	r7, r0
 800768c:	2800      	cmp	r0, #0
 800768e:	d030      	beq.n	80076f2 <exp+0xa2>
 8007690:	2303      	movs	r3, #3
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	4b29      	ldr	r3, [pc, #164]	; (800773c <exp+0xec>)
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	2300      	movs	r3, #0
 800769a:	9308      	str	r3, [sp, #32]
 800769c:	f996 3000 	ldrsb.w	r3, [r6]
 80076a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80076a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076a8:	b9c3      	cbnz	r3, 80076dc <exp+0x8c>
 80076aa:	4b25      	ldr	r3, [pc, #148]	; (8007740 <exp+0xf0>)
 80076ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80076b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076b4:	4668      	mov	r0, sp
 80076b6:	f000 f9c1 	bl	8007a3c <matherr>
 80076ba:	b1a8      	cbz	r0, 80076e8 <exp+0x98>
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	b11b      	cbz	r3, 80076c8 <exp+0x78>
 80076c0:	f000 f9be 	bl	8007a40 <__errno>
 80076c4:	9b08      	ldr	r3, [sp, #32]
 80076c6:	6003      	str	r3, [r0, #0]
 80076c8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80076cc:	eeb0 0a48 	vmov.f32	s0, s16
 80076d0:	eef0 0a68 	vmov.f32	s1, s17
 80076d4:	b00b      	add	sp, #44	; 0x2c
 80076d6:	ecbd 8b02 	vpop	{d8}
 80076da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076dc:	4919      	ldr	r1, [pc, #100]	; (8007744 <exp+0xf4>)
 80076de:	2000      	movs	r0, #0
 80076e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d1e5      	bne.n	80076b4 <exp+0x64>
 80076e8:	f000 f9aa 	bl	8007a40 <__errno>
 80076ec:	2322      	movs	r3, #34	; 0x22
 80076ee:	6003      	str	r3, [r0, #0]
 80076f0:	e7e4      	b.n	80076bc <exp+0x6c>
 80076f2:	a30f      	add	r3, pc, #60	; (adr r3, 8007730 <exp+0xe0>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	4620      	mov	r0, r4
 80076fa:	4629      	mov	r1, r5
 80076fc:	f7f9 f99e 	bl	8000a3c <__aeabi_dcmplt>
 8007700:	2800      	cmp	r0, #0
 8007702:	d0e3      	beq.n	80076cc <exp+0x7c>
 8007704:	2304      	movs	r3, #4
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <exp+0xec>)
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007714:	9708      	str	r7, [sp, #32]
 8007716:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800771a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800771e:	f996 3000 	ldrsb.w	r3, [r6]
 8007722:	e7df      	b.n	80076e4 <exp+0x94>
 8007724:	f3af 8000 	nop.w
 8007728:	fefa39ef 	.word	0xfefa39ef
 800772c:	40862e42 	.word	0x40862e42
 8007730:	d52d3051 	.word	0xd52d3051
 8007734:	c0874910 	.word	0xc0874910
 8007738:	2000072c 	.word	0x2000072c
 800773c:	080081c8 	.word	0x080081c8
 8007740:	47efffff 	.word	0x47efffff
 8007744:	7ff00000 	.word	0x7ff00000

08007748 <__ieee754_exp>:
 8007748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	ec55 4b10 	vmov	r4, r5, d0
 8007750:	4aad      	ldr	r2, [pc, #692]	; (8007a08 <__ieee754_exp+0x2c0>)
 8007752:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007756:	4297      	cmp	r7, r2
 8007758:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800775c:	f240 80af 	bls.w	80078be <__ieee754_exp+0x176>
 8007760:	4aaa      	ldr	r2, [pc, #680]	; (8007a0c <__ieee754_exp+0x2c4>)
 8007762:	4297      	cmp	r7, r2
 8007764:	d915      	bls.n	8007792 <__ieee754_exp+0x4a>
 8007766:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800776a:	4323      	orrs	r3, r4
 800776c:	d009      	beq.n	8007782 <__ieee754_exp+0x3a>
 800776e:	ee10 2a10 	vmov	r2, s0
 8007772:	462b      	mov	r3, r5
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f8 fd3c 	bl	80001f4 <__adddf3>
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	e002      	b.n	8007788 <__ieee754_exp+0x40>
 8007782:	b10e      	cbz	r6, 8007788 <__ieee754_exp+0x40>
 8007784:	2400      	movs	r4, #0
 8007786:	2500      	movs	r5, #0
 8007788:	ec45 4b10 	vmov	d0, r4, r5
 800778c:	b003      	add	sp, #12
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	a387      	add	r3, pc, #540	; (adr r3, 80079b0 <__ieee754_exp+0x268>)
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	ee10 0a10 	vmov	r0, s0
 800779c:	4629      	mov	r1, r5
 800779e:	f7f9 f96b 	bl	8000a78 <__aeabi_dcmpgt>
 80077a2:	b138      	cbz	r0, 80077b4 <__ieee754_exp+0x6c>
 80077a4:	a384      	add	r3, pc, #528	; (adr r3, 80079b8 <__ieee754_exp+0x270>)
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	f7f8 fed3 	bl	8000558 <__aeabi_dmul>
 80077b2:	e7e3      	b.n	800777c <__ieee754_exp+0x34>
 80077b4:	a382      	add	r3, pc, #520	; (adr r3, 80079c0 <__ieee754_exp+0x278>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f9 f93d 	bl	8000a3c <__aeabi_dcmplt>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d1de      	bne.n	8007784 <__ieee754_exp+0x3c>
 80077c6:	4b92      	ldr	r3, [pc, #584]	; (8007a10 <__ieee754_exp+0x2c8>)
 80077c8:	429f      	cmp	r7, r3
 80077ca:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 80077ce:	f200 808e 	bhi.w	80078ee <__ieee754_exp+0x1a6>
 80077d2:	4b90      	ldr	r3, [pc, #576]	; (8007a14 <__ieee754_exp+0x2cc>)
 80077d4:	443b      	add	r3, r7
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	4620      	mov	r0, r4
 80077dc:	4629      	mov	r1, r5
 80077de:	f7f8 fd07 	bl	80001f0 <__aeabi_dsub>
 80077e2:	4b8d      	ldr	r3, [pc, #564]	; (8007a18 <__ieee754_exp+0x2d0>)
 80077e4:	441f      	add	r7, r3
 80077e6:	ed97 7b00 	vldr	d7, [r7]
 80077ea:	ed8d 7b00 	vstr	d7, [sp]
 80077ee:	4682      	mov	sl, r0
 80077f0:	f1c6 0001 	rsb	r0, r6, #1
 80077f4:	468b      	mov	fp, r1
 80077f6:	1b86      	subs	r6, r0, r6
 80077f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077fc:	4650      	mov	r0, sl
 80077fe:	4659      	mov	r1, fp
 8007800:	f7f8 fcf6 	bl	80001f0 <__aeabi_dsub>
 8007804:	4604      	mov	r4, r0
 8007806:	460d      	mov	r5, r1
 8007808:	4622      	mov	r2, r4
 800780a:	462b      	mov	r3, r5
 800780c:	4620      	mov	r0, r4
 800780e:	4629      	mov	r1, r5
 8007810:	f7f8 fea2 	bl	8000558 <__aeabi_dmul>
 8007814:	a36c      	add	r3, pc, #432	; (adr r3, 80079c8 <__ieee754_exp+0x280>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	4680      	mov	r8, r0
 800781c:	4689      	mov	r9, r1
 800781e:	f7f8 fe9b 	bl	8000558 <__aeabi_dmul>
 8007822:	a36b      	add	r3, pc, #428	; (adr r3, 80079d0 <__ieee754_exp+0x288>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fce2 	bl	80001f0 <__aeabi_dsub>
 800782c:	4642      	mov	r2, r8
 800782e:	464b      	mov	r3, r9
 8007830:	f7f8 fe92 	bl	8000558 <__aeabi_dmul>
 8007834:	a368      	add	r3, pc, #416	; (adr r3, 80079d8 <__ieee754_exp+0x290>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fcdb 	bl	80001f4 <__adddf3>
 800783e:	4642      	mov	r2, r8
 8007840:	464b      	mov	r3, r9
 8007842:	f7f8 fe89 	bl	8000558 <__aeabi_dmul>
 8007846:	a366      	add	r3, pc, #408	; (adr r3, 80079e0 <__ieee754_exp+0x298>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fcd0 	bl	80001f0 <__aeabi_dsub>
 8007850:	4642      	mov	r2, r8
 8007852:	464b      	mov	r3, r9
 8007854:	f7f8 fe80 	bl	8000558 <__aeabi_dmul>
 8007858:	a363      	add	r3, pc, #396	; (adr r3, 80079e8 <__ieee754_exp+0x2a0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fcc9 	bl	80001f4 <__adddf3>
 8007862:	4642      	mov	r2, r8
 8007864:	464b      	mov	r3, r9
 8007866:	f7f8 fe77 	bl	8000558 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f8 fcbd 	bl	80001f0 <__aeabi_dsub>
 8007876:	4680      	mov	r8, r0
 8007878:	4689      	mov	r9, r1
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	2e00      	cmp	r6, #0
 8007884:	d162      	bne.n	800794c <__ieee754_exp+0x204>
 8007886:	f7f8 fe67 	bl	8000558 <__aeabi_dmul>
 800788a:	2200      	movs	r2, #0
 800788c:	4606      	mov	r6, r0
 800788e:	460f      	mov	r7, r1
 8007890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	f7f8 fcaa 	bl	80001f0 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f8 ff82 	bl	80007ac <__aeabi_ddiv>
 80078a8:	4622      	mov	r2, r4
 80078aa:	462b      	mov	r3, r5
 80078ac:	f7f8 fca0 	bl	80001f0 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	2000      	movs	r0, #0
 80078b6:	4959      	ldr	r1, [pc, #356]	; (8007a1c <__ieee754_exp+0x2d4>)
 80078b8:	f7f8 fc9a 	bl	80001f0 <__aeabi_dsub>
 80078bc:	e75e      	b.n	800777c <__ieee754_exp+0x34>
 80078be:	4b58      	ldr	r3, [pc, #352]	; (8007a20 <__ieee754_exp+0x2d8>)
 80078c0:	429f      	cmp	r7, r3
 80078c2:	d880      	bhi.n	80077c6 <__ieee754_exp+0x7e>
 80078c4:	4b57      	ldr	r3, [pc, #348]	; (8007a24 <__ieee754_exp+0x2dc>)
 80078c6:	429f      	cmp	r7, r3
 80078c8:	d83c      	bhi.n	8007944 <__ieee754_exp+0x1fc>
 80078ca:	a33b      	add	r3, pc, #236	; (adr r3, 80079b8 <__ieee754_exp+0x270>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	ee10 0a10 	vmov	r0, s0
 80078d4:	4629      	mov	r1, r5
 80078d6:	f7f8 fc8d 	bl	80001f4 <__adddf3>
 80078da:	2200      	movs	r2, #0
 80078dc:	4b4f      	ldr	r3, [pc, #316]	; (8007a1c <__ieee754_exp+0x2d4>)
 80078de:	f7f9 f8cb 	bl	8000a78 <__aeabi_dcmpgt>
 80078e2:	b388      	cbz	r0, 8007948 <__ieee754_exp+0x200>
 80078e4:	2200      	movs	r2, #0
 80078e6:	4b4d      	ldr	r3, [pc, #308]	; (8007a1c <__ieee754_exp+0x2d4>)
 80078e8:	4620      	mov	r0, r4
 80078ea:	4629      	mov	r1, r5
 80078ec:	e744      	b.n	8007778 <__ieee754_exp+0x30>
 80078ee:	4e4e      	ldr	r6, [pc, #312]	; (8007a28 <__ieee754_exp+0x2e0>)
 80078f0:	a33f      	add	r3, pc, #252	; (adr r3, 80079f0 <__ieee754_exp+0x2a8>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	443e      	add	r6, r7
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f8 fe2c 	bl	8000558 <__aeabi_dmul>
 8007900:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007904:	f7f8 fc76 	bl	80001f4 <__adddf3>
 8007908:	f7f9 f8c0 	bl	8000a8c <__aeabi_d2iz>
 800790c:	4606      	mov	r6, r0
 800790e:	f7f8 fdbd 	bl	800048c <__aeabi_i2d>
 8007912:	a339      	add	r3, pc, #228	; (adr r3, 80079f8 <__ieee754_exp+0x2b0>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	4680      	mov	r8, r0
 800791a:	4689      	mov	r9, r1
 800791c:	f7f8 fe1c 	bl	8000558 <__aeabi_dmul>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4620      	mov	r0, r4
 8007926:	4629      	mov	r1, r5
 8007928:	f7f8 fc62 	bl	80001f0 <__aeabi_dsub>
 800792c:	a334      	add	r3, pc, #208	; (adr r3, 8007a00 <__ieee754_exp+0x2b8>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	4682      	mov	sl, r0
 8007934:	468b      	mov	fp, r1
 8007936:	4640      	mov	r0, r8
 8007938:	4649      	mov	r1, r9
 800793a:	f7f8 fe0d 	bl	8000558 <__aeabi_dmul>
 800793e:	e9cd 0100 	strd	r0, r1, [sp]
 8007942:	e759      	b.n	80077f8 <__ieee754_exp+0xb0>
 8007944:	2600      	movs	r6, #0
 8007946:	e75f      	b.n	8007808 <__ieee754_exp+0xc0>
 8007948:	4606      	mov	r6, r0
 800794a:	e75d      	b.n	8007808 <__ieee754_exp+0xc0>
 800794c:	f7f8 fe04 	bl	8000558 <__aeabi_dmul>
 8007950:	4642      	mov	r2, r8
 8007952:	4604      	mov	r4, r0
 8007954:	460d      	mov	r5, r1
 8007956:	464b      	mov	r3, r9
 8007958:	2000      	movs	r0, #0
 800795a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800795e:	f7f8 fc47 	bl	80001f0 <__aeabi_dsub>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4620      	mov	r0, r4
 8007968:	4629      	mov	r1, r5
 800796a:	f7f8 ff1f 	bl	80007ac <__aeabi_ddiv>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007976:	f7f8 fc3b 	bl	80001f0 <__aeabi_dsub>
 800797a:	4652      	mov	r2, sl
 800797c:	465b      	mov	r3, fp
 800797e:	f7f8 fc37 	bl	80001f0 <__aeabi_dsub>
 8007982:	460b      	mov	r3, r1
 8007984:	4602      	mov	r2, r0
 8007986:	4925      	ldr	r1, [pc, #148]	; (8007a1c <__ieee754_exp+0x2d4>)
 8007988:	2000      	movs	r0, #0
 800798a:	f7f8 fc31 	bl	80001f0 <__aeabi_dsub>
 800798e:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8007992:	429e      	cmp	r6, r3
 8007994:	db02      	blt.n	800799c <__ieee754_exp+0x254>
 8007996:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 800799a:	e6ef      	b.n	800777c <__ieee754_exp+0x34>
 800799c:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 80079a0:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 80079a4:	2200      	movs	r2, #0
 80079a6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80079aa:	e700      	b.n	80077ae <__ieee754_exp+0x66>
 80079ac:	f3af 8000 	nop.w
 80079b0:	fefa39ef 	.word	0xfefa39ef
 80079b4:	40862e42 	.word	0x40862e42
 80079b8:	8800759c 	.word	0x8800759c
 80079bc:	7e37e43c 	.word	0x7e37e43c
 80079c0:	d52d3051 	.word	0xd52d3051
 80079c4:	c0874910 	.word	0xc0874910
 80079c8:	72bea4d0 	.word	0x72bea4d0
 80079cc:	3e663769 	.word	0x3e663769
 80079d0:	c5d26bf1 	.word	0xc5d26bf1
 80079d4:	3ebbbd41 	.word	0x3ebbbd41
 80079d8:	af25de2c 	.word	0xaf25de2c
 80079dc:	3f11566a 	.word	0x3f11566a
 80079e0:	16bebd93 	.word	0x16bebd93
 80079e4:	3f66c16c 	.word	0x3f66c16c
 80079e8:	5555553e 	.word	0x5555553e
 80079ec:	3fc55555 	.word	0x3fc55555
 80079f0:	652b82fe 	.word	0x652b82fe
 80079f4:	3ff71547 	.word	0x3ff71547
 80079f8:	fee00000 	.word	0xfee00000
 80079fc:	3fe62e42 	.word	0x3fe62e42
 8007a00:	35793c76 	.word	0x35793c76
 8007a04:	3dea39ef 	.word	0x3dea39ef
 8007a08:	40862e41 	.word	0x40862e41
 8007a0c:	7fefffff 	.word	0x7fefffff
 8007a10:	3ff0a2b1 	.word	0x3ff0a2b1
 8007a14:	080081e0 	.word	0x080081e0
 8007a18:	080081f0 	.word	0x080081f0
 8007a1c:	3ff00000 	.word	0x3ff00000
 8007a20:	3fd62e42 	.word	0x3fd62e42
 8007a24:	3e2fffff 	.word	0x3e2fffff
 8007a28:	080081d0 	.word	0x080081d0

08007a2c <finite>:
 8007a2c:	ee10 3a90 	vmov	r3, s1
 8007a30:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007a34:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007a38:	0fc0      	lsrs	r0, r0, #31
 8007a3a:	4770      	bx	lr

08007a3c <matherr>:
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	4770      	bx	lr

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	200004cc 	.word	0x200004cc

08007a4c <_sbrk>:
 8007a4c:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <_sbrk+0x14>)
 8007a4e:	6819      	ldr	r1, [r3, #0]
 8007a50:	4602      	mov	r2, r0
 8007a52:	b909      	cbnz	r1, 8007a58 <_sbrk+0xc>
 8007a54:	4903      	ldr	r1, [pc, #12]	; (8007a64 <_sbrk+0x18>)
 8007a56:	6019      	str	r1, [r3, #0]
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	4402      	add	r2, r0
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	4770      	bx	lr
 8007a60:	20000a54 	.word	0x20000a54
 8007a64:	20000eac 	.word	0x20000eac

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
